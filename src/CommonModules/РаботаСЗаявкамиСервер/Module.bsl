#Область РегламентныеОперации
&НаСервере
Процедура ЗагрузкаЗаявок() Экспорт
	
	Возврат;
	
	Если Метаданные.Обработки.Найти("ЗагрузкаЗаявок") <> Неопределено Тогда
		Результат = Обработки["ЗагрузкаЗаявок"].ЗагрузитьЗаявки();
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ФормированиеТекстовЗапросов

Функция ТекстЗапроса_ВзятьВРаботу(IDЗаявки) Экспорт
	Возврат "dbo.sp_pm_in_work " + Формат(IDЗаявки, "ЧГ = 0") + ", 1, NULL";
КонецФункции

Функция ТекстЗапроса_ОтменитьВзятиеВРаботу(IDЗаявки) Экспорт
	//Возврат "dbo.sp_pm_unwait " + Формат(IDЗаявки, "ЧГ = 0");
	Возврат "exec dbo.sp_pm_unwait
	|@i_bill_id = " + Формат(IDЗаявки, "ЧГ = 0") + ",
	|@userlogin = '" + ИмяПользователя() + "',
	|@userhost = '" + ИмяКомпьютера() + "'";
КонецФункции

Функция ТекстЗапроса_ПолучитьСтатус(IDЗаявки) Экспорт
	Возврат "SELECT dbo.bills.i_id,
	|				dbo.spr_statuses.s_name,
	|				dbo.bills.s_number,
	|				dbo.bills.i_status_id
	|			FROM dbo.bills
	|			LEFT OUTER JOIN
	| dbo.spr_statuses
	|			ON dbo.bills.i_status_id = dbo.spr_statuses.i_id
	|			WHERE dbo.bills.i_id = '" + СокрЛП(Формат(IDЗаявки, "ЧГ = 0")) + "'";
КонецФункции

Функция ТекстЗапроса_ЗаблокироватьЗаявку(IDЗаявки) Экспорт
	//Возврат "dbo.sp_pm_wait " + Формат(IDЗаявки, "ЧГ = 0");
	Возврат "exec dbo.sp_pm_wait
	|@i_bill_id = " + Формат(IDЗаявки, "ЧГ = 0") + ", 
	|@userlogin = '" + ИмяПользователя() + "', 
	|@userhost = '" + ИмяКомпьютера() + "'";
КонецФункции

Функция ТекстЗапроса_ОтклонитьЗаявку(IDЗаявки, Комментарий = "") Экспорт
	Возврат "dbo.sp_pm_reject " + Формат(IDЗаявки, "ЧГ = 0") + ", '" + Комментарий + "'";
КонецФункции

Функция ТекстЗапроса_ОтменитьОплатуЗаявки(IDЗаявки) Экспорт
	//Возврат "dbo.sp_pm_unpay " + Формат(IDЗаявки, "ЧГ = 0") + ", 6";
	Возврат "exec dbo.sp_pm_unpay 
	|@i_bill_id = " + Формат(IDЗаявки, "ЧГ = 0") + ", 
	|@i_status_id = 6, 
	|@userlogin = '" + ИмяПользователя() + "', 
	|@userhost = '" + ИмяКомпьютера() + "'";
КонецФункции

Функция ТекстЗапроса_ОплатитьЗаявку(IDЗаявки, ЧастичнаяОплата, ДатаОплатыЗаявки, СуммаОплатыЗаявки, НомерПлатежногоПоручения = "", ДатаПлатежногоПоручения = "", Комментарий = "") Экспорт
	
	ДатаПлатежаСтрокой = ?(НЕ ЗначениеЗаполнено(ДатаОплатыЗаявки), "NULL", "'" + SQL_ПреобразоватьДатуДляЗапроса(ДатаОплатыЗаявки) + "'");
	КомментарийСтрокой = ?(НЕ ЗначениеЗаполнено(Комментарий), "NULL", "'" + СокрЛП(Комментарий) + "'");
	СуммаПлатежаСтрокой = Формат(СуммаОплатыЗаявки, "ЧГ = 0;ЧРД = .");
	НомерПлатежногоПорученияСтрокой = ?(НЕ ЗначениеЗаполнено(НомерПлатежногоПоручения), "NULL", "'" + НомерПлатежногоПоручения + "'");
	ДатаПлатежногоПорученияСтрокой = ?(НЕ ЗначениеЗаполнено(ДатаПлатежногоПоручения), "NULL", "'" + SQL_ПреобразоватьДатуДляЗапроса(ДатаПлатежногоПоручения) + "'");
	ЧастичнаяОплатаСтрокой = ?(ЧастичнаяОплата, 0, 1);
	//Возврат "dbo.sp_pm_pay " + Формат(IDЗаявки, "ЧГ = 0") + ", " + ДатаПлатежаСтрокой + ", " + КомментарийСтрокой + ", " + СуммаПлатежаСтрокой + ", " + НомерПлатежногоПорученияСтрокой + ", " + ДатаПлатежногоПорученияСтрокой + ", " + ЧастичнаяОплатаСтрокой + ", NULL";
	
	Возврат "exec dbo.sp_pm_pay  
	|@i_bill_id = " + Формат(IDЗаявки, "ЧГ = 0") + ", 
	|@d_payed = " + ДатаПлатежаСтрокой + ", 
	|@s_reason = " + КомментарийСтрокой + ", 
	|@m_pay_fact_amount = " + СуммаПлатежаСтрокой + ", 
	|@s_pm_number = " + НомерПлатежногоПорученияСтрокой + ", 
	|@d_pm_date = " + ДатаПлатежногоПорученияСтрокой + ", 
	|@b_pay_complete = " + ЧастичнаяОплатаСтрокой + ", 
	|@i_pay_fact_curr_id = NULL, 
	|@userlogin = '" + ИмяПользователя() + "', @userhost = '" + ИмяКомпьютера() + "'";
	
КонецФункции

#КонецОбласти

#Область РаботаСЗаявками

Функция SQL_ОплатитьЗаявку(Соединение, IDЗаявки, СтатусЗаявки, ДатаОплатыЗаявки, СуммаОплатыЗаявки, НомерПлатежногоПоручения, ДатаПлатежногоПоручения, Комментарий) Экспорт
	
	ТекстЗапроса = РаботаСЗаявкамиСервер.ТекстЗапроса_ОплатитьЗаявку(IDЗаявки, СтатусЗаявки = 4, ДатаОплатыЗаявки, СуммаОплатыЗаявки, НомерПлатежногоПоручения, ДатаПлатежногоПоручения, Комментарий);
	Возврат ЗапросыЧерезАДО.ВыполнитьКомандуАДО(Соединение, ТекстЗапроса);
	
КонецФункции

Функция SQL_ВзятьВРаботу(Соединение, IDЗаявки) Экспорт
	ТекстЗапроса = РаботаСЗаявкамиСервер.ТекстЗапроса_ВзятьВРаботу(IDЗаявки);
	Возврат ЗапросыЧерезАДО.ВыполнитьКомандуАДО(Соединение, ТекстЗапроса);
КонецФункции

Функция SQL_ОтменитьВзятиеВРаботу(Соединение, IDЗаявки) Экспорт
	//Сообщить("Отменяем блокировку заявки " + IDЗаявки);
	ТекстЗапроса = РаботаСЗаявкамиСервер.ТекстЗапроса_ОтменитьВзятиеВРаботу(IDЗаявки);
	Возврат ЗапросыЧерезАДО.ВыполнитьКомандуАДО(Соединение, ТекстЗапроса);
КонецФункции

Функция SQL_ОтменитьОплатуЗаявки(Соединение, IDЗаявки) Экспорт
	ТекстЗапроса = РаботаСЗаявкамиСервер.ТекстЗапроса_ОтменитьОплатуЗаявки(IDЗаявки);
	Возврат ЗапросыЧерезАДО.ВыполнитьКомандуАДО(Соединение, ТекстЗапроса);
КонецФункции

Функция SQL_ЗаблокироватьЗаявку(Соединение, IDЗаявки) Экспорт
	
	//Сообщить("Блокируем заявку " + IDЗаявки);
	ТекстЗапроса = РаботаСЗаявкамиСервер.ТекстЗапроса_ЗаблокироватьЗаявку(IDЗаявки);
	Возврат ЗапросыЧерезАДО.ВыполнитьКомандуАДО(Соединение, ТекстЗапроса);
	
КонецФункции

Функция SQL_ОтклонитьЗаявку(Соединение, IDЗаявки, Комментарий = "") Экспорт
	
	ТекстЗапроса = РаботаСЗаявкамиСервер.ТекстЗапроса_ОтклонитьЗаявку(IDЗаявки, Комментарий);
	Возврат ЗапросыЧерезАДО.ВыполнитьКомандуАДО(Соединение, ТекстЗапроса);
	
КонецФункции


Функция SQL_СформироватьТекстЗапросаФигОплатыЗаявки(IDЗаявки, СуммаОплатыЗаявки, СтатусЗаявки, Комментарий, списЗначЗ = Неопределено) Экспорт
	
	Если СтатусЗаявки = 4 Тогда
		
		ТекстЗапроса = "
		|UPDATE bills SET 
		|	i_status_id = " + СтатусЗаявки + ", ";
		
		ТекстЗапроса = ТекстЗапроса + "
		|	m_pay_fact_amount = (Case When i_status_id <> 7 THEN " + Формат(СуммаОплатыЗаявки, "ЧГ = 0;ЧРД = .") + " ELSE m_pay_fact_amount END), 
		|	d_pm_rejected = NULL, 
		|	s_pm_reject_comment = NULL";
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	s_pm_pay_comment = ltrim(rtrim(IsNull(s_pm_pay_comment, ''))) + (Case When IsNull(s_pm_pay_comment, '') <> '' THEN '; ' ELSE '' END) + '" + Комментарий + "'";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		| WHERE (i_id = '" + Формат(IDЗаявки, "ЧГ = 0") + "' OR i_parent_id = '" + Формат(IDЗаявки, "ЧГ = 0") + "') AND not i_status_id in (4, 7)"; 
		
	ИначеЕсли СтатусЗаявки = -2 Тогда
		
		ТекстЗапроса = "dbo.sp_pm_reject " + Формат(IDЗаявки, "ЧГ = 0") + ", '" + Комментарий + "'";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбщиеФункции

Функция SQL_ПреобразоватьДатуДляЗапроса(пДата) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(пДата) Тогда
		Возврат NULL;
		
	Иначе
		Возврат Формат(Год(пДата), "ЧГ=0") + ?(Месяц(пДата) <= 9, "0", "") + Строка(Месяц(пДата)) + ?(День(пДата) <= 9, "0", "") + Строка(День(пДата));
		
	КонецЕсли;
		
КонецФункции

#КонецОбласти


Процедура SQL_ЗаблокироватьЗаявки(Заявки, ДатаБлокировки) Экспорт
	
	Если ТипЗнч(Заявки) <> Тип("Массив") Тогда
		МассивЗаявок = Новый Массив;
		МассивЗаявок.Добавить(Заявки);
	Иначе
		МассивЗаявок = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Заявки);
	КонецЕсли;
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	
	Для Каждого ИДЗаявки Из МассивЗаявок Цикл
	
		ТекстЗапроса = "exec sp_pm_in_work
		| @i_bill_id	= '" + ИДЗаявки + "',
		| @i_mode 		= 1, 
		| @d_pay_plan	= '" + Формат(ДатаБлокировки, "ДФ=ггггММдд") + "'";
		
		ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса);
		
	КонецЦикла;
	
	ЗапросыЧерезАДО.ЗакрытьСоединениеАДО(СоединениеАДО);
	
КонецПроцедуры

Процедура SQL_РазблокироватьЗаявки(Заявки, ДатаРазблокировки) Экспорт
	
	Если ТипЗнч(Заявки) <> Тип("Массив") Тогда
		МассивЗаявок = Новый Массив;
		МассивЗаявок.Добавить(Заявки);
	Иначе
		МассивЗаявок = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Заявки);
	КонецЕсли;
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	
	Для Каждого ИДЗаявки Из МассивЗаявок Цикл
	
		ТекстЗапроса = "exec sp_pm_in_work
		| @i_bill_id	= '" + ИДЗаявки + "',
		| @i_mode 		= 0, 
		| @d_pay_plan	= '" + Формат(ДатаРазблокировки, "ДФ=ггггММдд") + "'";
		
		ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса);
		
	КонецЦикла;
	
	ЗапросыЧерезАДО.ЗакрытьСоединениеАДО(СоединениеАДО);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаявкиФинансовогоПланаИзФормы(Источник) Экспорт
	
	//Если Источник.Параметры.Ключ.Пустая() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	//ДатаОбъекта = Источник.Объект.Дата;
	//
	//ТаблицаЗаявок = Источник.Объект.Планирование.Выгрузить(, "Заявка, Валюта, ВалютаЗаявки, КурсОплатыФиксированный, Процент, Сумма, ВалютнаяСумма");
	//ТаблицаЗаявок.Свернуть("Заявка, Валюта, ВалютаЗаявки, КурсОплатыФиксированный, Процент", "Сумма, ВалютнаяСумма");
	//
	//НаборСтатусыЗаявок = РегистрыСведений.СтатусыЗаявок.СоздатьНаборЗаписей();
	//НаборСтатусыЗаявок.Отбор.Документ.Установить(Источник.Объект.Ссылка);
	//
	//НаборПланируемаяОплатаЗаявок = РегистрыНакопления.ПланируемаяОплатаЗаявок.СоздатьНаборЗаписей();
	//НаборПланируемаяОплатаЗаявок.Отбор.Регистратор.Установить(Источник.Объект.Ссылка);
	//
	//Для Каждого СтрокаТаблицы Из ТаблицаЗаявок Цикл
	//	
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
	//		
	//		НовоеДвижение = НаборПланируемаяОплатаЗаявок.ДобавитьРасход();
	//		НовоеДвижение.Период = Источник.Объект.Дата;
	//		НовоеДвижение.Заявка = СтрокаТаблицы.Заявка;
	//		
	//		Если СтрокаТаблицы.Валюта <> ПараметрыСеанса.ВалютаРегламентированногоУчета
	//			ИЛИ СтрокаТаблицы.Валюта <> СтрокаТаблицы.ВалютаЗаявки Тогда
	//			НовоеДвижение.Сумма = СтрокаТаблицы.ВалютнаяСумма;
	//		Иначе
	//			НовоеДвижение.Сумма = СтрокаТаблицы.Сумма;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Для Каждого Элемент Из ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаЗаявок.ВыгрузитьКолонку("Заявка")) Цикл
	//	
	//	Если ЗначениеЗаполнено(Элемент) Тогда
	//		
	//		НовоеДвижение = НаборСтатусыЗаявок.Добавить();
	//		НовоеДвижение.Период = Источник.Объект.Дата;
	//		НовоеДвижение.Документ = Источник.Объект.Ссылка;
	//		НовоеДвижение.Заявка = Элемент;
	//		НовоеДвижение.Статус = Перечисления.СтатусыЗаявок.ВРаботе;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//НаборСтатусыЗаявок.Записать();
	//НаборПланируемаяОплатаЗаявок.Записать();
	
КонецПроцедуры

&НаСервере
Функция РасчитатьВалютнуюСуммуСУсловиями(Данные) Экспорт
	
	мРубли = ПараметрыСеанса.ВалютаРегламентированногоУчета;
	Сумма = Данные.Сумма;
	ВалютаИсходная = ?(ЗначениеЗаполнено(Данные.ВалютаИсходная), Данные.ВалютаИсходная, мРубли);
	ВалютаКонечная = ?(ЗначениеЗаполнено(Данные.ВалютаКонечная), Данные.ВалютаКонечная, мРубли);
	ДатаКурса = Данные.ДатаКурса;
	КурсФиксированный = ?(Данные.Свойство("КурсФиксированный"), Данные.КурсФиксированный, 0);
	ПроцентНадбавкиКурса = ?(Данные.Свойство("ПроцентНадбавкиКурса"), Данные.ПроцентНадбавкиКурса, 0);
	
	Если ВалютаИсходная = ВалютаКонечная Тогда
		Возврат Сумма;
	Иначе
		
		КурсВалютыИсходной = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаИсходная, ДатаКурса);
		КурсВалютыКонечной = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонечная, ДатаКурса);
		
		Если КурсФиксированный > 0 Тогда // Фиксированный курс
			
			//Если ВалютаИсходная = мРубли Тогда
			//	КурсВалютыКонечной.Курс = КурсФиксированный;
			//Иначе
			//	КурсВалютыИсходной.Курс = КурсФиксированный;
			//КонецЕсли;
			
			КурсВалютыКонечной.Курс = КурсФиксированный;
			КурсВалютыИсходной.Курс = КурсФиксированный;
			
			КурсВалютыКонечной.Кратность = КурсФиксированный;
			КурсВалютыИсходной.Курс = КурсФиксированный;
			
		ИначеЕсли ПроцентНадбавкиКурса > 0 Тогда // Процент надбавки курса
			
			Если ВалютаИсходная = мРубли Тогда
				КурсВалютыКонечной.Курс = Окр(КурсВалютыКонечной.Курс * (100 + ПроцентНадбавкиКурса) / 100, 4);
			Иначе
				КурсВалютыИсходной.Курс = Окр(КурсВалютыИсходной.Курс * (100 + ПроцентНадбавкиКурса) / 100, 4);
			КонецЕсли;
	
		КонецЕсли;
		
		Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма, КурсВалютыИсходной, КурсВалютыКонечной);
		
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция РасчитатьВалютнуюСумму(Знач Сумма, Знач ВалютаИсходная) Экспорт
	
	мРубли = ПараметрыСеанса.ВалютаРегламентированногоУчета;
	
	Если НЕ ЗначениеЗаполнено(ВалютаИсходная) Тогда
		ВалютаИсходная = мРубли;
	КонецЕсли;
	
	Если ВалютаИсходная <> мРубли Тогда
		Возврат Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


Процедура ОтклонитьЗаявку(Заявка, ПричинаОтклонения) Экспорт
	
	ЗаявкаОбъект = Заявка.ПолучитьОбъект();
	ОчередьSQL.ДобавитьВОчередь(РаботаСЗаявкамиСервер.ТекстЗапроса_ОтклонитьЗаявку(ЗаявкаОбъект.IDЗаявки, СокрЛП(ПричинаОтклонения)));
	
	ЗаявкаОбъект.ЗаявкаОтклонена = Истина;
	ЗаявкаОбъект.ПричинаОтклонения = ПричинаОтклонения;
	ЗаявкаОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьРеквизитыSQLЗаявок(МассивЗаявок) Экспорт
	
	СтрокаID = "";
	
	Для Каждого КлючЗначение Из ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗаявок, "IDЗаявки", Истина) Цикл
		
		Если СтрокаID = "" Тогда
			СтрокаID = Формат(КлючЗначение.Значение, "ЧГ=");
		Иначе
			СтрокаID = СтрокаID + "," + Формат(КлючЗначение.Значение, "ЧГ=");
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонЗапроса = "SELECT i_id,
		|s_number,
		|i_organization_id,
		|d_ins_date,
		|d_pay_due,
		|m_acc_amount,
		|m_acc_vat,
		|s_request,
		|s_comment, 
		|i_pay_percent,
		|m_x_acc_pay_fixed
		|
		|FROM [Fin_Request].[dbo].[bills] WHERE i_id IN (%1)";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, СтрокаID);
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	РезультатВыполнения = ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса);
	ЗапросыЧерезАДО.ЗакрытьСоединениеАДО(СоединениеАДО);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПолучитьJSONИзРеквизитов(Реквизиты) Экспорт
	
	СоответствиеJSON = Новый Соответствие();
	
	Для Каждого Колонка Из Реквизиты.Владелец().Колонки Цикл
		Если ТипЗнч(Реквизиты[Колонка.Имя]) = Тип("Null") Тогда
			СоответствиеJSON.Вставить(Колонка.Имя, "Null");	
		Иначе
			СоответствиеJSON.Вставить(Колонка.Имя, Реквизиты[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Windows,, Истина,, Истина, Истина, Истина, Истина, Истина);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, СоответствиеJSON);

	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПроверитьИзмененияЗаявок(МассивЗаявок) Экспорт
	
	МассивНекорректныхЗаявок = Новый Массив;
	
	РеквизитыЗаявокИзБазыSQL = ПолучитьРеквизитыSQLЗаявок(МассивЗаявок);
	
	Для Каждого КлючЗначение Из ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаявок, "Ссылка, IDЗаявки, ЗначенияРеквизитовЗаявкиSQL", Истина) Цикл
		
		ТекстJSONРеквизитовЗаявки = КлючЗначение.Значение.ЗначенияРеквизитовЗаявкиSQL;
		
		Если СокрЛП(ТекстJSONРеквизитовЗаявки) <> "" Тогда
			
			СтрокиТЧ = РеквизитыЗаявокИзБазыSQL.НайтиСтроки(Новый Структура("i_id", КлючЗначение.Значение.IDЗаявки));
			Если СтрокиТЧ.Количество() > 0 Тогда
				
				ТекстJSONБазыSQL = ПолучитьJSONИзРеквизитов(СтрокиТЧ[0]);
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекстJSONРеквизитовЗаявки);
				СохраненноеСоответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекстJSONБазыSQL);
				SQLСоответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
				
				Для Каждого ЭлементСоответствия Из СохраненноеСоответствие Цикл
					
					ЭлементSQLЗначение = SQLСоответствие.Получить(ЭлементСоответствия.Ключ);
					
					Если ЭлементSQLЗначение <> Неопределено
						И ЭлементSQLЗначение <> ЭлементСоответствия.Значение Тогда
						
						МассивНекорректныхЗаявок.Добавить(КлючЗначение.Значение.Ссылка);
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
		
	КонецЦикла;
	
	Если МассивНекорректныхЗаявок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивНекорректныхЗаявок;
	КонецЕсли;
	
КонецФункции


// Получить заявки
Функция ПолучитьДанныеЗаявок(ДанныеЗапроса) Экспорт
	
	ТекстЗапроса = "exec sp_get_requests_BUDGET_99
	| @d_begin 		 = '" + Формат(ДанныеЗапроса.ДатаНачала, "ДФ = ггггММдд") + "',
	| @d_end 		 = '" + Формат(ДанныеЗапроса.ДатаОкончания + 86400, "ДФ = ггггММдд") + "',
	| @s_division	 = 'All'";
	
	МассивДанных = Новый Массив;
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	
	СтруктураИнформация = ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса, Ложь);
	
	Если СтруктураИнформация = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Информация Из СтруктураИнформация Цикл
		
		СтруктураВозврата = Новый Структура;

		СтруктураВозврата.Вставить("ДатаЗаявки", Информация.DateRequest);
		СтруктураВозврата.Вставить("НомерЗаявки", Информация.NumberRequest);
		СтруктураВозврата.Вставить("Казначейство", Информация.nomkazn);
		
		текНазнПлат = СокрЛП(Информация.objPay);
		текДопИнфо = СокрЛП(Информация.S_DOC_INFO); 
		текНазнПлат = текНазнПлат + ?(НЕ(текНазнПлат = "" И текДопИнфо = ""),"; ","") + текДопИнфо;
		
		СтруктураВозврата.Вставить("НазначениеПлатежа", текНазнПлат);
		СтруктураВозврата.Вставить("СуммаКОплате", Информация.Amount);
		СтруктураВозврата.Вставить("СуммаНДС", Информация.AmountNDS);
		
		Если СокрЛП(Информация.codeCurr) = "810" Тогда
			СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.НайтиПоКоду("643"));
		Иначе
			СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.НайтиПоКоду(СокрЛП(Информация.codeCurr)));
		КонецЕсли;
		
		Если СокрЛП(Информация.codeCurrPay) = "810" Тогда
			СтруктураВозврата.Вставить("ВалютаОплаты", Справочники.Валюты.НайтиПоКоду("643"));
		Иначе
			СтруктураВозврата.Вставить("ВалютаОплаты", Справочники.Валюты.НайтиПоКоду(СокрЛП(Информация.codeCurrPay)));
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КатегорияОперации", Справочники.КатегорииОпераций.НайтиПоКоду(СокрЛП(Информация.codeKatOper)));
		
		СтруктураВозврата.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоКоду(СокрЛП(Информация.codeCFU)));
		СтруктураВозврата.Вставить("Бренд", Справочники.Брэнды.НайтиПоКоду(СокрЛП(Информация.codeBrand)));
		СтруктураВозврата.Вставить("Комментарий", СокрЛП(Информация.comment));
		
		СтруктураВозврата.Вставить("Автор", СокрЛП(Информация.Who));
		СтруктураВозврата.Вставить("ДолжностьАвтора", СокрЛП(Информация.position));
		СтруктураВозврата.Вставить("Сводная", Булево(Информация.hasChildren));
		
		СтруктураВозврата.Вставить("ИННОрганизации", Информация.OrgInn);
		
		СтруктураВозврата.Вставить("Процент", Число(Информация.percentPay));
		СтруктураВозврата.Вставить("КурсОплатыФиксированный", Число(Информация.FixExchPay));
		
		МассивПараметров = Новый Массив;
		
		Для т = 0 По 7 Цикл
			
			СтруктураПараметров = Новый Структура("Параметр, ФорматПараметра, ЗначениеПараметра",
						СокрЛП(Информация["Параметр" + т]),
						СокрЛП(Информация["ФорматПараметра" + т]),
						СокрЛП(Информация["s_sub" + (т + 1)]));
						
			МассивПараметров.Добавить(СтруктураПараметров);
			
		КонецЦикла;
		
		СтруктураВозврата.Вставить("ПараметрыУправленческогоУчета", МассивПараметров);
		
		//Контрагенты и договоры
		
		
		МассивДанных.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьУникальныйИдентификаторИзID(IDRref) Экспорт
	
	ID = Строка(Прав(IDRref, 8) + "-" + Сред(IDRref, 21, 4) + "-" + Сред(IDRref, 17, 4) + "-" + Лев(IDRref, 4)  + "-" + Сред(IDRref, 5, 12));
	Возврат Новый УникальныйИдентификатор(ID);
	
КонецФункции





























