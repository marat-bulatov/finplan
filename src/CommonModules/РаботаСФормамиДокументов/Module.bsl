
&НаСервере
Процедура ОбновитьФорму(Форма, ИмяЭлемента = "") Экспорт

	Объект = Форма.Объект;
	//Форма.Элементы.Валюта.Видимость = Ложь;
	мРубли = ПараметрыСеанса.ВалютаРегламентированногоУчета;
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		
		ВалютаСчетаОрганизации = БанковскиеСчетаВызовСервера.ВалютаБанковскогоСчета(Объект.СчетОрганизации);
		
		Форма.Элементы.КурсКратность.Видимость = Объект.Валюта <> ВалютаСчетаОрганизации;
		
		Если НЕ ЗначениеЗаполнено(ВалютаСчетаОрганизации) Тогда
			ВалютаСчетаОрганизации = мРубли;
		КонецЕсли;
		
		Если Объект.Валюта <> ВалютаСчетаОрганизации Тогда
			Объект.Валюта = ВалютаСчетаОрганизации;
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаСчетаОрганизации, Объект.Дата);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураКурса, "Курс, Кратность");
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) И Объект.Курс = 0 Тогда
			ЗаполнитьЗначенияСвойств(Объект, РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата), "Курс, Кратность");
			
		КонецЕсли;
		
		СтруктураИнформации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетОрганизации, "НомерСчета, Банк");
		БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураИнформации.Банк, "Код");
		
		ЭтоРублевыйСчет = БанковскиеПравила.ЭтоРублевыйСчет(СтруктураИнформации.НомерСчета);
		//Форма.Элементы.Валюта.Видимость = Не ЭтоРублевыйСчет;
		//Форма.Элементы.ВалютнаяСумма.Видимость = Не ЭтоРублевыйСчет;
		
		НомерСчетаКорректен = БанковскиеСчетаФормыКлиентСервер.НомерСчетаКорректен(СтруктураИнформации.НомерСчета, БИК, Истина);
		
		Если НомерСчетаКорректен Тогда
			
			Если ЭтоРублевыйСчет Тогда
				Объект.Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			Иначе
				КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(Объект.СчетОрганизации.НомерСчета);
				Объект.Валюта = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.Элементы.ГруппаВалютнаяСумма.Видимость = ВалютаСчетаОрганизации <> мРубли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		
		Если Форма.Параметры.Ключ.Пустая() И (НЕ Форма.Параметры.Свойство("ЗначениеКопирования") ИЛИ Форма.Параметры.ЗначениеКопирования.Пустая()) Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтатьяДДС, "КатегорияОперацииПоУмолчанию, НазначениеПлатежаПоУмолчанию, УстанавливатьНазначениеПлатежа, УстанавливатьКатегориюОперации");
			
			Если Реквизиты.УстанавливатьКатегориюОперации Тогда
				Объект.КатегорияОперации = Реквизиты.КатегорияОперацииПоУмолчанию;
			КонецЕсли;
			
			Если Реквизиты.УстанавливатьНазначениеПлатежа Тогда
				Объект.НазначениеПлатежа = Реквизиты.НазначениеПлатежаПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.Элементы.Контрагент.Видимость = Объект.СтатьяДДС.ВидимостьКонтрагента;
		Форма.Элементы.СчетКонтрагента.Видимость = Объект.СтатьяДДС.ВидимостьСчетаКонтрагента;
		Форма.Элементы.Договор.Видимость = Объект.СтатьяДДС.ВидимостьДоговораКонтрагента;
		
		Форма.Элементы.СуммаНДС.Видимость = Объект.СтатьяДДС.РасчитыватьСуммуНДС;
		Если НЕ Объект.СтатьяДДС.РасчитыватьСуммуНДС Тогда
			Объект.СуммаНДС = 0;
		КонецЕсли;
		
		НомерСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "НомерСчета");
		НомерСчетаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "НомерСчета");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КатегорияОперации) Тогда
		
		Для Каждого СтрокаТЧ Из Объект.УправленческийУчет Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ТипЗначения) И ЗначениеЗаполнено(СтрокаТЧ.ВидПараметра.ТипЗначения) Тогда
				СтрокаТЧ.ТипЗначения = СтрокаТЧ.ВидПараметра.ТипЗначения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяЭлемента = "СчетОрганизации" ИЛИ ИмяЭлемента = "ПересчетВалютнойСуммы" Тогда
		Если Объект.Валюта = мРубли Тогда
			Объект.ВалютнаяСумма = Объект.Сумма;
		Иначе
			Объект.ВалютнаяСумма = Объект.Сумма * Объект.Кратность / Объект.Курс;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЭлемента = "СчетКонтрагента" Тогда
		
		//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		//	
		//	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВнутренняяОрганизация"))
		//		И НЕ ЗначениеЗаполнено(Объект.КатегорияОперации) Тогда
		//		Объект.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Приход Х", Истина);
		//	КонецЕсли;
		//	
		//ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		//	
		//	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВнутренняяОрганизация"))
		//		И НЕ ЗначениеЗаполнено(Объект.КатегорияОперации) Тогда
		//		Объект.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Расход Х", Истина);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
	//	Форма.Элементы.СуммаКомиссии.Видимость = Объект.СтатьяДДС.ВидимостьСуммыКомиссии;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокБанковскихСчетов(Дата, ВладелецСчета) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчета.Наименование КАК Наименование,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	НЕ БанковскиеСчета.Закрыт
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.Владелец = &ВладелецСчета
	|	И НЕ БанковскиеСчета.НеПоказыватьВВыборе
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Запрос.УстановитьПараметр("ВладелецСчета", ВладелецСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.БанковскийСчет, Выборка.Наименование + " (" + СокрЛП(Выборка.НомерСчета) + ")   ");
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеОстаткиБанковскихСчетов(Дата, МассивСчетов) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0) + ЕСТЬNULL(ПланируемыеДвиженияОстатки.СуммаОстаток, 0) КАК Сумма
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(&ДатаАнализа, Организация = &ВладелецСчета) КАК ДенежныеСредстваОстатки
	|		ПО (ДенежныеСредстваОстатки.БанковскийСчет = БанковскиеСчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланируемыеДвижения.Остатки(КОНЕЦПЕРИОДА(&ДатаАнализа, ДЕНЬ), Организация = &ВладелецСчета) КАК ПланируемыеДвиженияОстатки
	|		ПО БанковскиеСчета.Ссылка = ПланируемыеДвиженияОстатки.СчетОрганизации
	|ГДЕ
	|	БанковскиеСчета.Ссылка В (&МассивСчетов)");
	
	Запрос.УстановитьПараметр("ДатаАнализа", Дата);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	МассивРезультатов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРезультатов.Добавить(Новый Структура("БанковскийСчет, Сумма", Выборка.БанковскийСчет, Выборка.Сумма));
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ВыборЗначенияУправленческогоУчета(Данные, СтандартнаяОбработка) Экспорт
	
	Объект = Данные.Объект;
	Ссылка = Данные.Ссылка;
	ТекущиеДанные = Данные.ЭлементФормы.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.ВидПараметра) = Тип("ПланВидовХарактеристикСсылка.РеквизитыУправленческогоУчета") Тогда
		
		Если ТекущиеДанные.ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЦФУ")) <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.ЦФУ.ФормаВыбора", Новый Структура("ТекущаяСтрока", Данные.Значение), Данные.ЭлементФормы);
			
		ИначеЕсли ТекущиеДанные.ТипЗначения.Типы().Найти(Тип("СправочникСсылка.Брэнды")) <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Брэнды.ФормаВыбора", Новый Структура("ТекущаяСтрока", Данные.Значение), Данные.ЭлементФормы);
			
		ИначеЕсли ТекущиеДанные.ТипЗначения.Типы().Найти(Тип("СправочникСсылка.Контрагенты")) <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", Новый Структура("ТекущаяСтрока", Данные.Значение), Данные.ЭлементФормы);
			
		ИначеЕсли ТекущиеДанные.ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСубконтоУправленческогоУчета")) <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Владелец", ТекущиеДанные.ВидПараметра);
			ОткрытьФорму("Справочник.ЗначенияСубконтоУправленческогоУчета.ФормаВыбора", ПараметрыФормы, Данные.ЭлементФормы);
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			
			//Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			//	
			//	Если ТекущиеДанные.Имя = "Счет" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Организация);
			//	ИначеЕсли ТекущиеДанные.Имя = "СчетОтправитель" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
			//	ИначеЕсли ТекущиеДанные.Имя = "СчетПолучатель" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Организация);
			//	КонецЕсли;
			//	
			//ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			//	
			//	Если ТекущиеДанные.Имя = "Счет" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Организация);
			//	ИначеЕсли ТекущиеДанные.Имя = "СчетОтправитель" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Организация);
			//	ИначеЕсли ТекущиеДанные.Имя = "Счет_ОтвЛ" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Организация);
			//	ИначеЕсли ТекущиеДанные.Имя = "СчетПолучатель" Тогда
			//		ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
			//	КонецЕсли
			//	
			//КонецЕсли;
			
			ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Данные.ЭлементФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ТекстЗапросаПоискаПереводов() Экспорт
	
	//Возврат("ВЫБРАТЬ
	//|	ПереводыДенежныхСредств.Период КАК Дата,
	//|	ПереводыДенежныхСредств.ОрганизацияПриемник КАК Организация,
	//|	ПереводыДенежныхСредств.СчетПриемник КАК СчетОрганизации,
	//|	ПереводыДенежныхСредств.ОрганизацияИсточник.ВнутреннийКонтрагент КАК Контрагент,
	//|	ПереводыДенежныхСредств.СчетИсточник.ПарныйБанковскийСчет КАК СчетКонтрагента,
	//|	ПереводыДенежныхСредств.Валюта КАК Валюта,
	//|	ПереводыДенежныхСредств.Сумма КАК Сумма,
	//|	ПереводыДенежныхСредств.Регистратор КАК ДокументПереводаДенежныхСредств,
	//|	ПереводыДенежныхСредств.Регистратор.СтатьяДДС КАК СтатьяДДС,
	//|	ПереводыДенежныхСредств.Регистратор.НазначениеПлатежа КАК НазначениеПлатежа,
	//|	ПереводыДенежныхСредств.Регистратор.КатегорияОперации КАК КатегорияОперации,
	//|	ПереводыДенежныхСредств.Регистратор.Заявка КАК Заявка,
	//|	ПереводыДенежныхСредств.Регистратор.ПланируемаяОплата КАК ПланируемаяОплата,
	//|	СвязиДокументовПереводыДенежныхСредств.ДокументСписания КАК ДокументСписания,
	//|	СвязиДокументовПереводыДенежныхСредств.ДокументПоступления КАК ДокументПоступления,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка КАК СуществующийДокументПоступления
	//|ИЗ
	//|	РегистрНакопления.ПереводыДенежныхСредств.Остатки(
	//|			КОНЕЦПЕРИОДА(&ДатаАнализа, ДЕНЬ),
	//|			ОрганизацияПриемник = &Организация
	//|				И СчетПриемник = &СчетОрганизации) КАК ПереводыДенежныхСредствОстатки
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПереводыДенежныхСредств КАК ПереводыДенежныхСредств
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументовПереводыДенежныхСредств КАК СвязиДокументовПереводыДенежныхСредств
	//|			ПО ПереводыДенежныхСредств.Регистратор = СвязиДокументовПереводыДенежныхСредств.ДокументСписания
	//|				И (НЕ СвязиДокументовПереводыДенежныхСредств.ДокументПоступления.ПометкаУдаления)
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	//|			ПО ПереводыДенежныхСредств.ОрганизацияПриемник = ПоступлениеНаРасчетныйСчет.Организация
	//|				И ПереводыДенежныхСредств.СчетПриемник = ПоступлениеНаРасчетныйСчет.СчетОрганизации
	//|				И (НАЧАЛОПЕРИОДА(ПереводыДенежныхСредств.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПоступлениеНаРасчетныйСчет.Дата, ДЕНЬ))
	//|				И ПереводыДенежныхСредств.ОрганизацияИсточник.ВнутреннийКонтрагент = ПоступлениеНаРасчетныйСчет.Контрагент
	//|				И (НЕ ПоступлениеНаРасчетныйСчет.ПометкаУдаления)
	//|		ПО ПереводыДенежныхСредствОстатки.ОрганизацияИсточник = ПереводыДенежныхСредств.ОрганизацияИсточник
	//|			И ПереводыДенежныхСредствОстатки.СчетИсточник = ПереводыДенежныхСредств.СчетИсточник
	//|			И ПереводыДенежныхСредствОстатки.ОрганизацияПриемник = ПереводыДенежныхСредств.ОрганизацияПриемник
	//|			И ПереводыДенежныхСредствОстатки.СчетПриемник = ПереводыДенежныхСредств.СчетПриемник
	//|			И ПереводыДенежныхСредствОстатки.Валюта = ПереводыДенежныхСредств.Валюта
	//|ГДЕ
	//|	ПереводыДенежныхСредств.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаАнализа, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаАнализа, ДЕНЬ)
	//|	И ПереводыДенежныхСредств.ОрганизацияПриемник = &Организация
	//|	И ПереводыДенежныхСредств.СчетПриемник = &СчетОрганизации
	//|	И ПереводыДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//|	И СвязиДокументовПереводыДенежныхСредств.ДокументСписания ЕСТЬ NULL");
	
КонецФункции