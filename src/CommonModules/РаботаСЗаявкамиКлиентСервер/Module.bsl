&НаКлиенте
Функция ПолучитьИнформациюОЗаявкахЗаПериод(ДатаНачала, ДатаОкончания) Экспорт
	
	ТекстЗапроса = "exec sp_get_requests_BUDGET_99
	| @d_begin 		 = '" + Формат(ДатаНачала, "ДФ = ггггММдд") + "',
	| @d_end 		 = '" + Формат(ДатаОкончания + 86400, "ДФ = ггггММдд") + "',
	| @s_division	 = 'All'";
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	Возврат(РаботаСЗаявкамиКлиентСервер.РазобратьСтруктуруЗаявокSQL(ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса)));
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОЗаявкахПоСписку(СписокЗаявок = "") Экспорт

	ТекстЗапроса = "exec sp_get_requests_BUDGET_CatOp_99
	| @s_numbers_list = '" + СписокЗаявок + "',
    | @s_filter = 'single',
    | @b_all = 1";
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");	
	Возврат(РаботаСЗаявкамиКлиентСервер.РазобратьСтруктуруЗаявокSQL(ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса)));
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОЗаявкахПоМассивуЗаявок(МассивЗаявок) Экспорт

	СписокЗаявок = "";
	Для Каждого Элемент Из МассивЗаявок Цикл
		
		Если СписокЗаявок = "" Тогда
			СписокЗаявок = Элемент;
		Иначе
			СписокЗаявок = СписокЗаявок + "," + Элемент;
		КонецЕсли;
		
	КонецЦикла;

	Возврат РаботаСЗаявкамиКлиентСервер.ПолучитьИнформациюОЗаявкахПоСписку(СписокЗаявок);
	
КонецФункции


&НаСервере
Функция РазобратьПоляЗаявкиSQL(ДанныеSQL) Экспорт
	
	СтруктураДанных = Новый Структура();
	
	КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду(СокрЛП(ДанныеSQL.codeKatOper));
	
	Если НЕ ЗначениеЗаполнено(КатегорияОперации) Тогда
		
		сообЦУМ = "";
		
		Если ДанныеSQL.IDBrand = "80000726" ИЛИ ДанныеSQL.IDBrand = "80001149" Тогда
			сообЦУМ = " ЦУМ";
		КонецЕсли;
		
		Сообщить("Для Заявки №"+ СокрЛП(ДанныеSQL.NumberRequest) + " от "+
			ДанныеSQL.DateRequest + " не найдена категория операции" + сообЦУМ + "! (Значение в системе заявок = '"+ СокрЛП(ДанныеSQL.codeKatOper) + "')");
			//Символы.ПС+"Заявка не будет загружена!",СтатусСообщения.Важное);
		
	КонецЕсли;
	
	НазначениеПлатежа = СокрЛП(ДанныеSQL.objPay);
	ДополнительнаяИнформация = СокрЛП(ДанныеSQL.S_DOC_INFO); 
	НазначениеПлатежа = СокрЛП(ДанныеSQL.objPay) + ?(НЕ(НазначениеПлатежа = "" И ДополнительнаяИнформация = ""),"); ","") + ДополнительнаяИнформация;
	
	СтруктураДанных.Вставить("IDЗаявки",				СокрЛП(ДанныеSQL.IDRequest));
	СтруктураДанных.Вставить("НомерЗаявки",				СокрЛП(ДанныеSQL.NumberRequest));
	СтруктураДанных.Вставить("НачальнаяБаза",			ДанныеSQL.startBase);
	СтруктураДанных.Вставить("ДатаЗаявки",				ДанныеSQL.DateRequest);
	СтруктураДанных.Вставить("Казначейство",			ДанныеSQL.nomkazn);
	СтруктураДанных.Вставить("Сумма",					ДанныеSQL.Amount);		//// + Окр(ДанныеSQL.Amount*ДанныеSQL.percentPay/100,2));	//
	СтруктураДанных.Вставить("СуммаНДС",				ДанныеSQL.AmountNDS);
	СтруктураДанных.Вставить("ВалютаЗаявки",			Справочники.Валюты.НайтиПоКоду(СокрЛП(ДанныеSQL.codeCurr)));
	СтруктураДанных.Вставить("Валюта",					Справочники.Валюты.НайтиПоКоду(СокрЛП(ДанныеSQL.codeCurrPay)));
	СтруктураДанных.Вставить("Процент",					ДанныеSQL.percentPay);
	СтруктураДанных.Вставить("КурсОплатыФиксированный", ДанныеSQL.fixExchPay);
	СтруктураДанных.Вставить("НазначениеПлатежа", 		НазначениеПлатежа);
	СтруктураДанных.Вставить("КатегорияОперации", 		Справочники.КатегорииОпераций.НайтиПоКоду(СокрЛП(ДанныеSQL.codeKatOper)));
	СтруктураДанных.Вставить("ДолжностьАвтора",			СокрЛП(ДанныеSQL.position));
	СтруктураДанных.Вставить("ЦФУ",						Справочники.ЦФУ.НайтиПоКоду(СокрЛП(ДанныеSQL.codeCFU)));
	СтруктураДанных.Вставить("Бренд",					Справочники.Брэнды.НайтиПоКоду(СокрЛП(ДанныеSQL.codeBrand)));
	СтруктураДанных.Вставить("Комментарий",				СокрЛП(ДанныеSQL.comment));
	СтруктураДанных.Вставить("Автор",					СокрЛП(ДанныеSQL.Who));
	СтруктураДанных.Вставить("СтатусЗаявки",			Перечисления.СтатусыЗаявок.Новый);
	СтруктураДанных.Вставить("Сводная",					Булево(ДанныеSQL.hasChildren));
	
	СтруктураДанных.Вставить("УправленческийУчет", Новый Массив);

	// Заполняем из Категории
	ДанныеУУ = УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(СтруктураДанных.КатегорияОперации);
	
	Для Каждого СтрокаПараметры Из ДанныеУУ Цикл		
		НоваяСтрокаУУ = Новый Структура("Имя, Значение, ТипРеквизита, ЗапретРедактирования, Необязательный, ВидПараметра, Формула");
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, СтрокаПараметры);
		СтруктураДанных.УправленческийУчет.Добавить(НоваяСтрокаУУ);
	КонецЦикла;
	
	//заполняем субконто
	Для т = 0 по 8 Цикл
		
		Параметр = ДанныеSQL["Параметр" + т];
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			
			ФорматПараметра = ДанныеSQL["ФорматПараметра" + т];
			ЗначениеПараметра = ДанныеSQL["s_sub" + (т + 1)];
			
			// Поиск Строки УУ
			
			Для Каждого СтрокаОбработки Из СтруктураДанных.УправленческийУчет Цикл
				
				Если СтрокаОбработки.Имя = "ЦФУ" Тогда
					СтрокаОбработки.Значение = СтруктураДанных.ЦФУ;
					Продолжить;
				КонецЕсли;
				
				Если СтрокаОбработки.Имя = "Бренд" Тогда
					СтрокаОбработки.Значение = СтруктураДанных.Бренд;
					Продолжить;
				КонецЕсли;
				
				Если СтрокаОбработки.Имя <> Параметр Тогда
					Продолжить;
				КонецЕсли;

				Если СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникЦФУ
					ИЛИ СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникБрэнды Тогда
					
					Продолжить;
					
				ИначеЕсли СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникКонтрагенты Тогда
					СтрокаОбработки.Значение = Справочники.Контрагенты.НайтиПоКоду(ЗначениеПараметра);
					
				ИначеЕсли СтрокаОбработки.ВидПараметра <> Неопределено И  СтрокаОбработки.ВидПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоУправленческогоУчета") Тогда
					СтрокаОбработки.Значение = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоКоду(ЗначениеПараметра,,, СтрокаОбработки.ВидПараметра);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаУУ Из СтруктураДанных.УправленческийУчет Цикл
				
				Если ТипЗнч(СтрокаУУ.ВидПараметра) = Тип("ПланВидовХарактеристикСсылка.РеквизитыУправленческогоУчета")
					И СтрокаУУ.ВидПараметра.НаименованиеПараметра = ФорматПараметра Тогда
					
					СтрокаУУ.Значение = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоКоду(ЗначениеПараметра,,, СтрокаУУ.ВидПараметра);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция РазобратьСтруктуруЗаявокSQL(ДанныеSQL) Экспорт
	
	МассивДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеSQL Цикл
		
		МассивДанных.Добавить(РаботаСЗаявкамиКлиентСервер.РазобратьПоляЗаявкиSQL(СтрокаДанных));
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

