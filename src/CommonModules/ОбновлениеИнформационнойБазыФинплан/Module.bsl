Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	Описание.Имя = "ФинансовоеПланирование";
	Описание.Версия = "1.1.0.11";
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьКонтактнуюИнформацию";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a18b6ef-cc3c-4ad3-a893-c94d98efd862");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьОписанияРеквизитовУправленческогоУчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьНаборыДополнительныхСведений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьТипыСтрокойПВХ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьПланОбменаУправленческийУчет";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьСтатьиДДС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.42";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьОписанияРеквизитовУправленческогоУчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.43";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.НастроитьОписанияРеквизитовУправленческогоУчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.48";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.ПерезаписатьОрганизации";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.63";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.ПерезаписатьККМ";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a18b6ef-cc3c-4ad3-a893-c94d98efd863");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.77";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.Обновление1_0_0_77";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a18b6ef-cc3c-4ad3-a893-c94d98efd864");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.83";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.Обновление1_0_0_83";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.86";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.Обновление1_0_0_86";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a18b6ef-cc3c-4ad3-a893-c94d98efd865");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыФинплан.Обновление1_1_0_10";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a18b6ef-cc3c-4ad3-a893-c94d98efd866");
	
КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы() Экспорт
КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
КонецПроцедуры

Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
КонецПроцедуры

Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
КонецПроцедуры

Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
КонецПроцедуры

// Обновления
Процедура НастроитьКонтактнуюИнформацию(Параметры = Неопределено) Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации.ПолучитьОбъект();
	СправочникОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактическийАдресОрганизации;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	// Контрагенты
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.ПолучитьОбъект();
	СправочникОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.EmaiКонтрагента;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
	ПараметрВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрВида);
	
КонецПроцедуры

// Обновления
Процедура НастроитьОписанияРеквизитовУправленческогоУчета(Параметры = Неопределено) Экспорт
	
	СоответствиеЭлементовИНаименований = Новый Соответствие;
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыКомандировочныхРасходов, "VidyKomandirovochnykhRaskhodov");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыНалогов, "VidyNalogov");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыПлатежейПоДоставкеХранению, "VidyPlatezheyPoDostavkeKHraneniyu");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыПрочихФинансовыхРасходов, "VidyProchikhFinansovykhRaskhodov");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовДоходовТКЗ, "VidyRaskhodovDokhodovTKZ");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовНаРекламуИPR, "VidyRaskhodovNaReklamuIPR");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовТекущийРемонт, "VidyRaskhodovTekRemont");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовУборка, "VidyRaskhodovUborka");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыТаможенныхПлатежей, "VidyTamozhennykhPlatezhey");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыТранспортныхРасходов, "VidTransportnykhRaskhodov");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыХозРасходов, "VidyKHozRaskhodov");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКатегорииВзаиморасчетов, "KategoriiVzaimotaschetov");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКредитыИОбязательства, "KredityIObyazatelьstva");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоМатериалы, "Materialy");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоНаправления, "Napravleniya");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоОС, "OS");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоПериоды, "Periody");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоСезоны, "Sezony");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоСобытияТКЗ, "SobytiyaTKZ");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоСчетаЗаРубежом, "SchetaZaRubezhom");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоТипКарты, "TipKredKart");
	СоответствиеЭлементовИНаименований.Вставить(ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКонтрагенты, "Kontragenty");
	
	Выборка = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Значение = СоответствиеЭлементовИНаименований.Получить(Выборка.Ссылка);
		
		Если Значение <> Неопределено Тогда
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НаименованиеПараметра = Значение;
			Объект.НаименованиеСправочникаВБазе = Значение;
			Объект.Записать();
			
		КонецЕсли;
			
		
	КонецЦикла;
	
	
КонецПроцедуры

// Обновления
Процедура НастроитьНаборыДополнительныхСведений(Параметры = Неопределено) Экспорт
	
	ЭлементыДляОбработки = "Документ_Заявка,Документ_ПоступлениеНаРасчетныйСчет,Документ_СписаниеСРасчетногоСчета";
	
	Для Каждого Элемент Из СтрРазделить(ЭлементыДляОбработки, ",") Цикл
		
		ОбъектОбработки = Справочники.НаборыДополнительныхРеквизитовИСведений[Элемент].ПолучитьОбъект();
		ОбъектОбработки.Используется = Истина;
		ОбъектОбработки.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обновления
Процедура НастроитьТипыСтрокойПВХ(Параметры = Неопределено) Экспорт
	
	СоотвествиеОбработки = Новый Соответствие;
	СоотвествиеОбработки.Вставить("Число", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипЧисло);
	СоотвествиеОбработки.Вставить("Строка", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСтрока);
	СоотвествиеОбработки.Вставить("ПеречислениеСсылка.Да/Нет", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипБулево);
	
	СоотвествиеОбработки.Вставить("СправочникСсылка.ЦФУ", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникЦФУ);
	СоотвествиеОбработки.Вставить("СправочникСсылка.Брэнды", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникБрэнды);
	СоотвествиеОбработки.Вставить("СправочникСсылка.Валюты", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникВалюты);
	
	СоотвествиеОбработки.Вставить("СправочникСсылка.Направления", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоНаправления);
	СоотвествиеОбработки.Вставить("СправочникСсылка.КатегорииВзаиморасчетов", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКатегорииВзаиморасчетов);
	СоотвествиеОбработки.Вставить("СправочникСсылка.СобытияТКЗ", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоСобытияТКЗ);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыРасходовДоходовТКЗ", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовДоходовТКЗ);
	СоотвествиеОбработки.Вставить("СправочникСсылка.Сезоны", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоСезоны);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыКомандировочныхРасходов", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыКомандировочныхРасходов);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ОС", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоОС);
	СоотвествиеОбработки.Вставить("СправочникСсылка.СчетаЗаРубежом", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоСчетаЗаРубежом);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыТаможенныхПлатежей", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыТаможенныхПлатежей);
	СоотвествиеОбработки.Вставить("СправочникСсылка.Периоды", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоПериоды);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыРасходовНаРекламуИPR", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовНаРекламуИPR);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыХозРасходов", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыХозРасходов);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыРасходовУборка", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовУборка);
	СоотвествиеОбработки.Вставить("СправочникСсылка.КредитыИОбязательства", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКредитыИОбязательства);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыНалогов", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыНалогов);
	СоотвествиеОбработки.Вставить("СправочникСсылка.Материалы", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоМатериалы);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидТранспортныхРасходов", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыТранспортныхРасходов);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыРасходовТекРемонт", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовТекущийРемонт);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыПлатежейПоДоставкеХранению", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыПлатежейПоДоставкеХранению);
	СоотвествиеОбработки.Вставить("СправочникСсылка.ВидыПрочихФинансовыхРасходов", ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыПрочихФинансовыхРасходов);
	
	Для Каждого КлючЗначение Из СоотвествиеОбработки Цикл
		
		Объект = КлючЗначение.Значение.ПолучитьОбъект();
		Объект.ТипСтрокой = КлючЗначение.Ключ;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обновления
Процедура НастроитьПланОбменаУправленческийУчет(Параметры = Неопределено) Экспорт
	
	УзелОбъект = ПланыОбмена.УправленческийУчет.ЭтотУзел().ПолучитьОбъект();
	УзелОбъект.Код = "ФП";
	УзелОбъект.Наименование = "Финансовый план";
	УзелОбъект.Записать();
	
	УзелОбмена = ПланыОбмена.УправленческийУчет.СоздатьУзел();
	УзелОбмена.Код = "УУ";
	УзелОбмена.Наименование = "Управленческая база";
	УзелОбмена.Записать();
	
КонецПроцедуры

// Обновления
Процедура ПерезаписатьОрганизации(Параметры = Неопределено) Экспорт
	
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьСтатьиДДС(Параметры = Неопределено) Экспорт
	
	ТаблицаНастройки = Новый ТаблицаЗначений;
	ТаблицаНастройки.Колонки.Добавить("СтатьяДДС");
	ТаблицаНастройки.Колонки.Добавить("КатегорияДвиженияДенежныхСредств");
	ТаблицаНастройки.Колонки.Добавить("НазначениеПлатежаПоУмолчанию");
	ТаблицаНастройки.Колонки.Добавить("КатегорияОперацииПоУмолчанию");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Аренда;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Аренда";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Аренда зданий и помещений");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.ЗаТовары;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Оплата за товары";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Оплата поставщику за товар");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Зарплата;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Зарплата";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("(З/п) основная часть");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.ЗарплатаНаКК;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Зарплата на к/к";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("(З/п) основная часть");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Инкассация;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Поступление;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Торговая выручка";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Приход инкассация (Касса1 => р/сч Х получение)");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.КомиссияБанка;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Комиссия банка";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Комиссия банка");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Налог;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Оплата налогов";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Оплата налогов");
	
	//СтрокаТЗ = ТаблицаНастройки.Добавить();
	//СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Перевод;
	//СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Перевод;
	//СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Перевод средств";
	//СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию();
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Приход;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Поступление;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Приход";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Приход Х");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.ПриходПоКК;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Поступление;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Поступление на счет по кредитной карте";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Поступление на счет по кредитной карте");
	
	СтрокаТЗ = ТаблицаНастройки.Добавить();
	СтрокаТЗ.СтатьяДДС = Справочники.СтатьиДДС.Расход;
	СтрокаТЗ.КатегорияДвиженияДенежныхСредств = Перечисления.КатегорииДвиженияДенежныхСредств.Списание;
	СтрокаТЗ.НазначениеПлатежаПоУмолчанию = "Расход";
	СтрокаТЗ.КатегорияОперацииПоУмолчанию = Справочники.КатегорииОпераций.НайтиПоНаименованию("Расход Х");
	
	Для Каждого СтрокаТЗ Из ТаблицаНастройки Цикл
		
		СтатьяОбъект = СтрокаТЗ.СтатьяДДС.ПолучитьОбъект();
		СтатьяОбъект.КатегорияДвиженияДенежныхСредств = СтрокаТЗ.КатегорияДвиженияДенежныхСредств;
		СтатьяОбъект.НазначениеПлатежаПоУмолчанию = СтрокаТЗ.НазначениеПлатежаПоУмолчанию;
		СтатьяОбъект.КатегорияОперацииПоУмолчанию = СтрокаТЗ.КатегорияОперацииПоУмолчанию;
		СтатьяОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаписатьККМ(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрольноКассовыеМашины.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтрольноКассовыеМашины КАК КонтрольноКассовыеМашины";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭлементОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЭлементОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Обновление1_0_0_77(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец.ЭтоИностранныйКонтрагент КАК ЭтоИностранныйКонтрагент
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидРезидентностиКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыРезидентностиКонтрагентов.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДоговорОбъект = ВыборкаДетальныеЗаписи.Договор.ПолучитьОбъект();
		
		Если ВыборкаДетальныеЗаписи.ЭтоИностранныйКонтрагент Тогда
			ДоговорОбъект.ВидРезидентностиКонтрагента = Перечисления.ВидыРезидентностиКонтрагентов.НеРезидент;
		Иначе
			ДоговорОбъект.ВидРезидентностиКонтрагента = Перечисления.ВидыРезидентностиКонтрагентов.Резидент;
		КонецЕсли;
			
		ДоговорОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Обновление1_0_0_83(Параметры = Неопределено) Экспорт
	
	ПапкаАвтоматическиСозданные = Справочники.Контрагенты.СоздатьГруппу();
	ПапкаАвтоматическиСозданные.Наименование = "Автоматически созданные";
	ПапкаАвтоматическиСозданные.Записать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ФинансовыйПланПланирование.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	ФинансовыйПланПланирование.GUIDСтрокиФинансовогоПлана = """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектФП = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТЧ Из ОбъектФП.Планирование Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.GUIDСтрокиФинансовогоПлана) Тогда
				СтрокаТЧ.GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
		ОбъектФП.ОбменДанными.Загрузка = Истина;
		ОбъектФП.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Обновление1_0_0_86(Параметры = Неопределено) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.ВидКонтрагента КАК ВидКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.ИНН <> """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрДлина(СокрЛП(Выборка.ИНН)) = 12 И Выборка.ВидКонтрагента <> Перечисления.ВидыКонтрагента.ИндивидуальныйПредприниматель Тогда
			
			ОбъектКонтрагент = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагента.ИндивидуальныйПредприниматель;
			ОбъектКонтрагент.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Обновление1_1_0_10(Параметры = Неопределено) Экспорт

	Набор = РегистрыСведений.НастройкиИмпортаВыписок.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.Используется = Истина;
	КонецЦикла;
	
	Набор.Записать(Истина);
	
КонецПроцедуры