
Функция ЗагрузитьЗаявки(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, МассивЗаявокДляЗагрузки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = НачалоДня(ТекущаяДата()) - (3 * 86400);
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецДня(ТекущаяДата()) + 86400;
	КонецЕсли;
	
	ТекстЗапроса = "exec sp_get_requests_BUDGET_99
	| @s_division = 'All',
	| @d_begin 		= '" + Формат(ДатаНачала, "ДФ=ггггММдд") + "',
	| @d_end 		= '" + Формат(ДатаОкончания, "ДФ=ггггММдд") + "'";
	
	СтрокаЗагружаемыхЗаявок = "";
	Если МассивЗаявокДляЗагрузки <> Неопределено Тогда
		
		Для Каждого КлючЗначение Из ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗаявокДляЗагрузки, "НомерЗаявки") Цикл
			
			Если СтрокаЗагружаемыхЗаявок = "" Тогда
				СтрокаЗагружаемыхЗаявок = КлючЗначение.Значение;
			Иначе
				СтрокаЗагружаемыхЗаявок = СтрокаЗагружаемыхЗаявок + "," + КлючЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ", 
			| @d_requests_list = '" + СтрокаЗагружаемыхЗаявок + "'";
		
	КонецЕсли;
 
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	ТаблицаДанных = ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, ТекстЗапроса);
	
	СтрокаID = "";
	Для Каждого СтрокаТЗ Из ТаблицаДанных.НайтиСтроки(Новый Структура("hasChildren", 1)) Цикл
		
		Если СтрокаID <> "" Тогда
			СтрокаID = СтрокаID + ", ";
		КонецЕсли;
		
		СтрокаID = СтрокаID + Формат(СтрокаТЗ.IDRequest, "ЧГ=");
		
	КонецЦикла;
	
	Если СтрокаID <> "" Тогда
		
		СтрЗапроса = "SELECT i_parent_id, i_id idRequest, s_number NumberRequest, m_acc_amount curAmount, IsNull(m_acc_vat, 0) AmountNDS, i_status_id status, 
		|(CASE WHEN gt.i_bill_id is NULL THEN 
		|	(CASE WHEN axo.i_bill_bill_id is NULL THEN '' ELSE 'АХО' END)
		|		ELSE 'GT' END) startBase
		|FROM bills b
		|LEFT JOIN (SELECT distinct i_bill_id FROM bills_gt_deleted) gt ON b.i_id = gt.i_bill_id
		|LEFT JOIN (SELECT distinct i_bill_bill_id FROM bills_axo_detail) axo ON b.i_id = axo.i_bill_bill_id
		|WHERE i_parent_id IN (" + СтрокаID + ")";
		
		ТаблицаПодчиненныхЗаявок = ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, СтрЗапроса);
	Иначе
		ТаблицаПодчиненныхЗаявок = Неопределено;
		
	КонецЕсли;
	
	МассивЗагруженыхЗаявок = Новый Массив;
	
	Если ТаблицаДанных <> Неопределено Тогда
		
		// Ищем уже загруженные документы
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Заявка.Ссылка КАК Заявка,
		|	Заявка.IDЗаявки КАК IDЗаявки
		|ИЗ
		|	Документ.Заявка КАК Заявка
		|ГДЕ
		|	Заявка.IDЗаявки В(&СписокIDЗаявки)");
		
		Запрос.УстановитьПараметр("СписокIDЗаявки", ТаблицаДанных.ВыгрузитьКолонку("IDRequest"));
		
		ВыборкаПоЗагруженнымЗаявкам = Запрос.Выполнить().Выбрать();
		
		мРубли = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		МассивIDЗаявок = Новый Массив;
		
		Для Каждого Стр Из ТаблицаДанных Цикл
			
			текКатОпер = Справочники.КатегорииОпераций.НайтиПоКоду(СокрЛП(стр.codeKatOper));
			
			Если НЕ ЗначениеЗаполнено(текКатОпер) Тогда
				
				сообЦУМ = "";
				
				Если стр.IDBrand = "80000726" ИЛИ стр.IDBrand = "80001149" Тогда
					сообЦУМ = "ЦУМ";
				КонецЕсли;
				
				Сообщить("Для Заявки №"+ СокрЛП(стр.NumberRequest) + " от "
				+ стр.DateRequest
				+ " не найдена категория операции "
				+ сообЦУМ
				+ "! (Значение в системе заявок = '"
				+ СокрЛП(стр.codeKatOper)+"')"
				+ Символы.ПС
				+ "Заявка не будет загружена!", СтатусСообщения.Важное);
				
				Продолжить;
				
			КонецЕсли;
			
			// Если не загружали - создадим новую заявку, иначе используем старую
			ВыборкаПоЗагруженнымЗаявкам.Сбросить();
			
			Если ВыборкаПоЗагруженнымЗаявкам.НайтиСледующий(Новый Структура("IDЗаявки", стр.IDRequest)) Тогда
				
				МассивЗагруженыхЗаявок.Добавить(ВыборкаПоЗагруженнымЗаявкам.Заявка);
				Продолжить;
			
			Иначе
				ЗаявкаОбъект = Документы.Заявка.СоздатьДокумент();
				МассивIDЗаявок.Добавить(стр.IDRequest);
				
			КонецЕсли;
			
			ЗаявкаОбъект.Организация		= Справочники.Организации.НайтиПоРеквизиту("ИНН", Стр.OrgInn);
			ЗаявкаОбъект.IDЗаявки			= СокрЛП(стр.IDRequest);
			ЗаявкаОбъект.НомерЗаявки		= СокрЛП(стр.NumberRequest);
			ЗаявкаОбъект.НачБаза			= стр.startBase;
			ЗаявкаОбъект.Дата				= стр.DateRequest;
			ЗаявкаОбъект.ОплатитьДо			= стр.DatePayDue;
			ЗаявкаОбъект.Казначейство		= стр.nomkazn;
			ЗаявкаОбъект.Сумма				= стр.Amount;
			ЗаявкаОбъект.СуммаНДС			= стр.AmountNDS;
			
			Если стр.codeCurr <> 810 И стр.codeCurr <> 643 Тогда
				ЗаявкаОбъект.ВалютаЗаявки = Справочники.Валюты.НайтиПоКоду(СокрЛП(стр.codeCurr));
			Иначе
				ЗаявкаОбъект.ВалютаЗаявки = мРубли;
			КонецЕсли;
			
			Если стр.codeCurrPay <> 810 И стр.codeCurrPay <> 643 Тогда
				ЗаявкаОбъект.Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(стр.codeCurrPay));
			Иначе
				ЗаявкаОбъект.Валюта = мРубли;
			КонецЕсли;
			
			Если ЗаявкаОбъект.Валюта <> ЗаявкаОбъект.ВалютаЗаявки Тогда
				РаботаСКурсамиВалют.ПересчитатьВВалюту(ЗаявкаОбъект.ВалютнаяСумма, ЗаявкаОбъект.ВалютаЗаявки, ЗаявкаОбъект.Валюта, ЗаявкаОбъект.Дата);
			Иначе
				ЗаявкаОбъект.ВалютнаяСумма = ЗаявкаОбъект.Сумма;
			КонецЕсли;
			
			ЗаявкаОбъект.Процент			= стр.percentPay;
			ЗаявкаОбъект.КурсОплатыФиксированный = стр.fixExchPay;
			ЗаявкаОбъект.КатегорияОперации 	= текКатОпер;
			ЗаявкаОбъект.ДолжностьАвтора	= СокрЛП(стр.position);
			ЗаявкаОбъект.Комментарий		= СокрЛП(стр.comment);
			ЗаявкаОбъект.Автор				= СокрЛП(стр.Who);
			ЗаявкаОбъект.Сводная			= Булево(стр.hasChildren);
			
			текНазнПлат		= ЗаменитьНедопустимыеСимволыXML(СокрЛП(стр.objPay), "");
			текДопИнфо		= СокрЛП(стр.S_DOC_INFO); 
			ЗаявкаОбъект.НазначениеПлатежа = текНазнПлат + ?(НЕ(текНазнПлат = "" И текДопИнфо = ""), "; ", "") + текДопИнфо;
			
			ЗаявкаОбъект.УправленческийУчет.Очистить();
			
			// Заполняем из Категории
			ДанныеУУ = УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(ЗаявкаОбъект.КатегорияОперации);
			
			Для Каждого СтрокаПараметры Из ДанныеУУ Цикл
				
				НоваяСтрока = ЗаявкаОбъект.УправленческийУчет.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметры);
				
			КонецЦикла;
			
			//заполняем субконто
			Для т = 0 по 8 Цикл
				
				Параметр = Стр["Параметр" + т];
				
				Если ЗначениеЗаполнено(Параметр) Тогда
					
					ФорматПараметра = Стр["ФорматПараметра" + т];
					ЗначениеПараметра = Стр["s_sub" + (т + 1)];
					
					СтрокиПоиска = ЗаявкаОбъект.УправленческийУчет.НайтиСтроки(Новый Структура("Имя", Параметр));
					Если СтрокиПоиска.Количество() > 0 Тогда
						
						СтрокаОбработки = СтрокиПоиска[0];
						Если СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникЦФУ
							ИЛИ СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникБрэнды Тогда
							
							Продолжить;
							
						ИначеЕсли СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникКонтрагенты Тогда
							СтрокаОбработки.Значение = Справочники.Контрагенты.НайтиПоКоду(ЗначениеПараметра);
							
						ИначеЕсли СтрокаОбработки.ВидПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоУправленческогоУчета") Тогда
							СтрокаОбработки.Значение = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоКоду(ЗначениеПараметра,,, СтрокаОбработки.ВидПараметра);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Для Каждого СтрокаУУ Из ЗаявкаОбъект.УправленческийУчет Цикл
						
						Если ТипЗнч(СтрокаУУ.ВидПараметра) = Тип("ПланВидовХарактеристикСсылка.РеквизитыУправленческогоУчета")
							И СтрокаУУ.ВидПараметра.НаименованиеПараметра = ФорматПараметра Тогда
							
							СтрокаУУ.Значение = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоКоду(ЗначениеПараметра,,, СтрокаУУ.ВидПараметра);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			// Заполним ЦФУ и Брэнд
			СтрокиЦФУ = ЗаявкаОбъект.УправленческийУчет.НайтиСтроки(Новый Структура("Имя", "ЦФУ"));
			СтрокиБренд = ЗаявкаОбъект.УправленческийУчет.НайтиСтроки(Новый Структура("Имя", "Бренд"));
			СтрокиВалютнаяСумма = ЗаявкаОбъект.УправленческийУчет.НайтиСтроки(Новый Структура("Имя", "ВалютнаяСумма"));
			
			Если СтрокиЦФУ.Количество() > 0 Тогда
				СтрокиЦФУ[0].Значение = Справочники.ЦФУ.НайтиПоКоду(СокрЛП(стр.codeCFU));
			КонецЕсли;
			
			Если СтрокиБренд.Количество() > 0 Тогда
				СтрокиБренд[0].Значение = Справочники.Брэнды.НайтиПоКоду(СокрЛП(стр.codeBrand));
			КонецЕсли;
			
			Если СтрокиВалютнаяСумма.Количество() > 0 Тогда
				СтрокиВалютнаяСумма[0].Значение = ЗаявкаОбъект.ВалютнаяСумма;
			КонецЕсли;
			
			// Подчиненные заявки
			Если ТаблицаПодчиненныхЗаявок <> Неопределено Тогда
				
				ЗаявкаОбъект.ПодчиненныеЗаявки.Очистить();
				
				Для Каждого СтрокаПодчиненныхЗаявок Из ТаблицаПодчиненныхЗаявок.НайтиСтроки(Новый Структура("i_parent_id", ЗаявкаОбъект.IDЗаявки)) Цикл
					
					ЗаполнитьЗначенияСвойств(ЗаявкаОбъект.ПодчиненныеЗаявки.Добавить(), Новый Структура("НомерЗаявки, Сумма, НДС, База", СтрокаПодчиненныхЗаявок.NumberRequest, СтрокаПодчиненныхЗаявок.curAmount, СтрокаПодчиненныхЗаявок.AmountNDS, СтрокаПодчиненныхЗаявок.startBase));
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаявкаОбъект.Записать();
			МассивЗагруженыхЗаявок.Добавить(ЗаявкаОбъект.Ссылка);
			
		КонецЦикла;
		
		// Связываем подчиненные заявки
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗаявкаПодчиненныеЗаявки.Ссылка КАК ЗаявкаРодитель,
		|	ЗаявкаПодчиненныеЗаявки.НомерЗаявки КАК НомерЗаявки,
		|	ЗаявкаПоиск.Ссылка КАК ЗаявкаПоиск
		|ИЗ
		|	Документ.Заявка.ПодчиненныеЗаявки КАК ЗаявкаПодчиненныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка КАК ЗаявкаПоиск
		|		ПО ЗаявкаПодчиненныеЗаявки.НомерЗаявки = ЗаявкаПоиск.НомерЗаявки
		|			И (ЗаявкаПоиск.РодительскаяЗаявка <> ЗаявкаПодчиненныеЗаявки.Ссылка)
		|ГДЕ
		|	ЗаявкаПодчиненныеЗаявки.Ссылка В(&МассивЗаявок)
		|	И НЕ ЗаявкаПоиск.Ссылка ЕСТЬ NULL");
		
		Запрос.УстановитьПараметр("МассивЗаявок", МассивЗагруженыхЗаявок);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаявкаПоискОбъект = Выборка.ЗаявкаПоиск.ПолучитьОбъект();
			ЗаявкаПоискОбъект.РодительскаяЗаявка = Выборка.ЗаявкаРодитель;
			ЗаявкаПоискОбъект.Записать();
			
		КонецЦикла;
		
		//ЗагрузитьПрисоединенныеФайлыЗаявок(СоединениеАДО, МассивIDЗаявок);
		
		ОбновитьДанныеКлючевыхРеквизитовЗаявок(МассивЗагруженыхЗаявок);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗапросыЧерезАДО.ЗакрытьСоединениеАДО(СоединениеАДО);
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции

Процедура ОбновитьДанныеКлючевыхРеквизитовЗаявок(МассивЗагруженыхЗаявок)
	
	Если МассивЗагруженыхЗаявок.Количество() > 0 Тогда
		
		РеквизитыЗаявок = РаботаСЗаявкамиСервер.ПолучитьРеквизитыSQLЗаявок(МассивЗагруженыхЗаявок);
		
		Для Каждого Элемент Из МассивЗагруженыхЗаявок Цикл
			
			СтрокиТЧ = РеквизитыЗаявок.НайтиСтроки(Новый Структура("i_id", Элемент.IDЗаявки));
			
			Если СтрокиТЧ.Количество() > 0 Тогда
				СтрокаJSON = РаботаСЗаявкамиСервер.ПолучитьJSONИзРеквизитов(СтрокиТЧ[0]);
				
				ЗаявкаДокумент = Элемент.ПолучитьОбъект();
				ЗаявкаДокумент.ЗначенияРеквизитовЗаявкиSQL = СтрокаJSON;
				ЗаявкаДокумент.ОбменДанными.Загрузка = Истина;
				ЗаявкаДокумент.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПрисоединенныеФайлыЗаявок(СоединениеАДО, МассивIDЗаявок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	Заявка.IDЗаявки КАК IDЗаявки,
	|	ЕСТЬNULL(ЗаявкаПрисоединенныеФайлы.IDФайла, 0) КАК IDФайла,
	|	ЗаявкаПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкаПрисоединенныеФайлы КАК ЗаявкаПрисоединенныеФайлы
	|		ПО (ЗаявкаПрисоединенныеФайлы.ВладелецФайла = Заявка.Ссылка)
	|ГДЕ
	|	Заявка.IDЗаявки В(&IDЗаявки)";
	
	Запрос.УстановитьПараметр("IDЗаявки", МассивIDЗаявок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПрисоединенныеФайлы = РезультатЗапроса.Выбрать();
	
	ШаблонЗапросаSQL = "SELECT i_id, i_bill_id, s_filename, g_file FROM Fin_Request.dbo.bills_files WHERE i_bill_id In (%1)";
	
	СтрокаIDЗаявок = "";
	Для Каждого Элемент Из МассивIDЗаявок Цикл
		СтрокаIDЗаявок = СтрокаIDЗаявок + ?(СтрокаIDЗаявок = "", "", ", ") + Формат(Элемент, "ЧГ=");
	КонецЦикла;
	
	ТекстЗапросаSQL = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапросаSQL, СтрокаIDЗаявок);
	
	Попытка
		
		НаборЗаписей = Новый COMОбъект("ADODB.Recordset");
		НаборЗаписей.Open(ТекстЗапросаSQL, СоединениеАДО);
		
		Пока (НаборЗаписей.EOF = 0) Цикл
			
			IDФайла = НаборЗаписей.Fields("i_id").Value;
			IDЗаявки = НаборЗаписей.Fields("i_bill_id").Value;
			ИмяФайла = НаборЗаписей.Fields("s_filename").Value;
			ДанныеФайла = НаборЗаписей.Fields("g_file").Value;
			
			ПолноеИмяФайла = КаталогВременныхФайлов() + ИмяФайла;
			
			Поток = Новый COMОбъект("ADODB.Stream");
			Поток.Type = 1;
			Поток.Open();
			Поток.Write(ДанныеФайла);
			Поток.SaveToFile(ПолноеИмяФайла, 2); //adSaveCreateOverWrite
			
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				
				ВыборкаПрисоединенныеФайлы.Сбросить(); //Ищем заявку
				Если ВыборкаПрисоединенныеФайлы.НайтиСледующий(Новый Структура("IDЗаявки", IDЗаявки)) Тогда // Заявка
					
					Заявка = ВыборкаПрисоединенныеФайлы.Заявка;
					
					ВыборкаПрисоединенныеФайлы.Сбросить();
					Если ВыборкаПрисоединенныеФайлы.НайтиСледующий(Новый Структура("IDФайла", IDФайла)) Тогда // Нашли файл, обновляем
						
						АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
						АдресВременногоХранилищаТекста = "";
						
						ИнформацияОФайле = Новый Структура;
						ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
						ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
						
						РаботаСФайлами.ОбновитьФайл(ВыборкаПрисоединенныеФайлы.ПрисоединенныйФайл, ИнформацияОФайле);
						
					Иначе
						
						АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
						АдресВременногоХранилищаТекста = "";
						
						ПараметрыФайла = Новый Структура;
						ПараметрыФайла.Вставить("ВладелецФайлов",              Заявка);
						ПараметрыФайла.Вставить("Автор",                       Неопределено);
						ПараметрыФайла.Вставить("ИмяБезРасширения",            Файл.ИмяБезРасширения);
						ПараметрыФайла.Вставить("РасширениеБезТочки",          ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение));
						ПараметрыФайла.Вставить("ВремяИзменения");
						ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
						
						ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(ПараметрыФайла, АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста);
						
						ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
						ФайлОбъект.IDФайла = IDФайла;
						ФайлОбъект.Записать();
						
					КонецЕсли;
					
				КонецЕсли;
				
				УдалитьФайлы(ПолноеИмяФайла);	
				
			КонецЕсли;
			
			
			НаборЗаписей.MoveNext();
			
		КонецЦикла;
		
	Исключение
		
		#Если Клиент Тогда
			Сообщить("Не удалось загрузить файл из хранилища через ADO соединение", СтатусСообщения.Важное); 
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		
	КонецПопытки;
	
КонецПроцедуры


// Заменяет недопустимые символы XML на другой символ
//
// Параметры:
//	Текст - Строка
//	СимволЗамены - Строка
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	
	Позиция = НайтиНедопустимыеСимволыXML(Текст);
	Пока Позиция > 0 Цикл
		Текст = СтрЗаменить(Текст, Сред(Текст, Позиция, 1), СимволЗамены);
		Позиция = НайтиНедопустимыеСимволыXML(Текст);
	КонецЦикла;
	
	Возврат Текст;
КонецФункции
