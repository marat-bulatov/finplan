&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("ДокументДвижений") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументДвижений    = Параметры.ДокументДвижений;
	
	ОбновитьДвиженияНаСервере();

	Если Параметры.Свойство("АдресХранилищаОтложенныеРасчеты") Тогда
		// Адрес может быть передан при вызове, если фоновое задание запущено одновременно с вызовом формы.
		АдресХранилищаОтложенныеРасчеты = Параметры.АдресХранилищаОтложенныеРасчеты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента)

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДвижений, "Проведен");
	Объект.Проведен = РеквизитыДокумента.Проведен;
	
	Объект.ЕстьОрганизация = МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено;
	Объект.ЕстьРучнаяКорректировка = МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено;
	
	ИменаРеквизитов = "Дата,ПометкаУдаления,Организация,РучнаяКорректировка";
	
	Если НЕ Объект.ЕстьОрганизация Тогда
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, ",Организация", "");
	КонецЕсли;
	
	Если НЕ Объект.ЕстьРучнаяКорректировка Тогда
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, ",РучнаяКорректировка", "");
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДвижений, ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыДокумента);
	РучнаяКорректировка = Объект.РучнаяКорректировка;
	
	ДоступныеОрганизации = ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	ЕстьПравоНаРедактирование = ПравоДоступа("Изменение", МетаданныеДокумента)
		И ДоступныеОрганизации.Найти(Объект.Организация) <> Неопределено;
	
	ИнформацияОПроведении = Обработки.КорректировкаДвижений.ИнформацияОПроведенииДокумента(ДокументДвижений);
	
КонецПроцедуры 


&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ Объект.Проведен 
		 И НЕ Объект.РучнаяКорректировка Тогда
		
		Если ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.Операция") Тогда
			ТекстПредупреждения = НСтр("ru='Операция помечена на удаление.
				|Для получения информации о движениях необходимо снять пометку на удаление'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Документ не проведен.
				|Для получения информации о движениях необходимо провести документ.'");
		КонецЕсли;

		ПоказатьПредупреждение( , ТекстПредупреждения);

		Отказ = Истина;
		Возврат;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ОбновитьДвиженияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Сохранить изменения движений?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)

	ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство("НоменклатурнаяГруппа") И Элемент.ТекущиеДанные.Свойство("ХарактерДеятельности") Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = ИПОсновнаяНоменклатурнаяГруппа;
		Элемент.ТекущиеДанные.ХарактерДеятельности = ИПОсновнойХарактерДеятельности;
	КонецЕсли;

КонецПроцедуры

// Общая процедура для всех остаточных регистров накопления. Обеспечивает показ правильной картинки в строке.
//
&НаКлиенте
Процедура Подключаемый_ВидДвиженияПриИзменении(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы")
		И ТекущийЭлемент.ТекущиеДанные.Свойство("КартинкаСтроки") Тогда
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ТекущиеДанные.КартинкаСтроки = 2 + ?(ТекущиеДанные.Активность, 0, 1);
		Иначе
			ТекущиеДанные.КартинкаСтроки = 4 + ?(ТекущиеДанные.Активность, 0, 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИзмененаРучнаяКорректировка = Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка <> РучнаяКорректировка;

	Если Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка
		И НЕ РучнаяКорректировка Тогда
		
		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена.
			|Восстановить движения, сформированные автоматически?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановитьДвиженияЗавершение", ЭтотОбъект, ИзмененаРучнаяКорректировка);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДвижения(Команда)
	
	ОбновитьДвиженияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ПравоНаПросмотр Тогда
			Продолжить;
		КонецЕсли;
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений",  СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КорректировкаДвижений.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиВСписокРегистра(Команда)
	
	ИмяРегистра = СтрЗаменить(Команда.Имя, "ПерейтиВСписок", "");
	
	// Проверим, что таблица регистра добавлена на форму
	Если Элементы.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяРегистра].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	// установим отбор по организации документа (иначе в некоторых формах установится отбор по основной организации)
	Если Объект.ЕстьОрганизация Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора); 
	КонецЕсли;
	
	// Подготовим ключ записи для позиционирования в форме списка
	ПараметрыТекущейЗаписи = Новый Структура;
	ПараметрыТекущейЗаписи.Вставить("ИмяРегистра", ИмяРегистра);
	ПараметрыТекущейЗаписи.Вставить("Регистратор", ДокументДвижений);
	Если Объект.ЕстьОрганизация Тогда
		ПараметрыТекущейЗаписи.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Для Каждого ЭлементФормыТабПоля ИЗ Элементы[ИмяРегистра].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормыТабПоля) = Тип("ПолеФормы") Тогда
			ИмяСвойства = СтрЗаменить(ЭлементФормыТабПоля.Имя, ИмяРегистра, "");
			Если ИмяСвойства = "Регистратор" ИЛИ ИмяСвойства = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыТекущейЗаписи.Вставить(ИмяСвойства, ТекущиеДанные[ИмяСвойства]);			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКлючаЗаписи = ПолучитьПараметрыКлючаЗаписи(ПараметрыТекущейЗаписи);
	Если ПараметрыКлючаЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипРегистра = ПараметрыКлючаЗаписи.ТипРегистра;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыКлючаЗаписи.КлючЗаписи);

	ОткрытьФорму(ТипРегистра + "." + ИмяРегистра + ".ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьНастройкуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СписокРезультат = РезультатЗакрытия;
	
	Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда
		
		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Регистры Цикл
			СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;
		
		Если БылиИзменения Тогда
			
			ВыполнитьДействияПриИзмененииСоставаРегистров();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Корректировка движений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции
 

&НаСервере
Процедура ЗаписатьДвижения(Отказ)

	Если РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если НЕ ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;

			Для каждого СтрокаРегистра Из Регистры Цикл
				Если СтрокаРегистра.ЕстьРеквизит Тогда
					ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
					НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
					НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
					НаборЗаписей.УстановитьАктивность(НЕ Объект.ПометкаУдаления);
					Если НЕ (СтрокаРегистра.ТипРегистра = "РегистрСведений" 
						И (Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений 
						= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический)) Тогда
						Для каждого Запись Из НаборЗаписей Цикл
							Если Запись.Период = '00010101' Тогда
								Запись.Период = Объект.Дата;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			Объект.РучнаяКорректировка = Истина;
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,, 
				ДокументДвижений, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;

	Иначе

		Попытка
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Объект.РучнаяКорректировка = Истина;
		Исключение
			ШаблонОшибки = НСтр("ru='Не удалось перепровести документ по причине %1'") 
					+ Символы.ПС + НСтр("ru='Проведение документа отменено.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, 
					ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, 
					Строка(ДокументДвижений),  
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, ДокументДвижений, 
					ТекстОшибки);
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()
	
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();
	
	УстановитьВозможностьРедактированияЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДвиженияНаСервере()
	
	МетаданныеДокумента = ДокументДвижений.Метаданные();
	ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента);
	
	Элементы.РучнаяКорректировка.Видимость = Объект.ЕстьРучнаяКорректировка;
	ЭтотОбъект.ТолькоПросмотр = НЕ ЕстьПравоНаРедактирование;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПолучитьМассивИспользуемыхРегистров(
		ДокументДвижений, МетаданныеДокумента.Движения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	УстановитьВидимостьПриРучнойКорректировке();
	
	УстановитьВозможностьРедактированияЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Движения документа: %1'"), 
		Строка(ДокументДвижений));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	МетаданныеРегистровНакопления = Метаданные.РегистрыНакопления;
	МетаданныеРегистровСведений   = Метаданные.РегистрыСведений;
	ВидРегистраОстатки            = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	
	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", МетаданныеРегистровНакопления[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", МетаданныеРегистровСведений[СтрокаРегистра.Имя]);
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			СтрокаРегистра.РегистрОстатков = МетаданныеРегистра.ВидРегистра = ВидРегистраОстатки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	ПоказатьХозрасчетный = Ложь;
	ПоказатьКнигаУчетаДоходовИРасходов = Ложь;
	ПоказатьРасшифровкаКУДиР = Ложь;
	ПоказатьЖурналУчетаСчетовФактур = Ложь;

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			ПоказатьХозрасчетный = СтрокаРегистра.Отображение;
			Элементы.ГруппаХозрасчетный.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "КнигаУчетаДоходовИРасходов" Тогда
			ПоказатьКнигаУчетаДоходовИРасходов = СтрокаРегистра.Отображение;
			Элементы.ГруппаКнигаУчетаДоходовИРасходов.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "РасшифровкаКУДиР" Тогда
			ПоказатьРасшифровкаКУДиР = СтрокаРегистра.Отображение;
			Элементы.ГруппаРасшифровкаКУДиР.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "ЖурналУчетаСчетовФактур" Тогда
			ПоказатьЖурналУчетаСчетовФактур = СтрокаРегистра.Отображение;
			Элементы.ГруппаЖурналУчетаСчетовФактур.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
			КонецЕсли;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			ТекТаблица.КартинкаСтрок = КартинкаАктивности;
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				ТекТаблица.ПутьКДаннымКартинкиСтроки = ПутьКДаннымТаблицы + ".КартинкаСтроки";
			Иначе
				ТекТаблица.ПутьКДаннымКартинкиСтроки = ПутьКДаннымТаблицы + ".Активность";
			КонецЕсли;
			
			ИмяКоманды   = ИмяТаблицы + "ПерейтиВСписок";
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Картинка  = БиблиотекаКартинок.НайтиВСписке;
			НоваяКоманда.Заголовок = НСтр("ru='Перейти в список движений'");
			НоваяКоманда.Подсказка = НСтр("ru='Перейти в список движений регистра'");
			НоваяКоманда.Действие  = "Подключаемый_ПерейтиВСписокРегистра";
			НоваяКнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ТекТаблица.КоманднаяПанель);
			НоваяКнопка.ИмяКоманды = ИмяКоманды;
			НоваяКнопка.ТолькоВоВсехДействиях = Истина;
			
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			//Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
			//	РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			//КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			Если РеквизитыНабораЗаписей.Колонки.Найти("КартинкаСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("КартинкаСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				Если КолонкаРеквизита.Имя = "ВидДвижения"
					И СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
					И СтрокаРегистра.РегистрОстатков Тогда
					ТекКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВидДвиженияПриИзменении");
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Элементы.ГруппаХозрасчетный.Видимость = ПоказатьХозрасчетный;
	//Элементы.ГруппаКнигаУчетаДоходовИРасходов.Видимость = ПоказатьКнигаУчетаДоходовИРасходов;
	//Элементы.ГруппаРасшифровкаКУДиР.Видимость = ПоказатьРасшифровкаКУДиР;
	//Элементы.ГруппаЖурналУчетаСчетовФактур.Видимость = ПоказатьЖурналУчетаСчетовФактур;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()
	
	Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Объект.ЕстьРучнаяКорректировка;
	Для каждого СтраницаРегистра Из Элементы.ПанельРегистров.ПодчиненныеЭлементы Цикл
		ВозможностьРедактированияЗаписей = РучнаяКорректировка;
		СтраницаРегистра.ТолькоПросмотр = НЕ ВозможностьРедактированияЗаписей;
		ИмяРегистра = СтрЗаменить(СтраницаРегистра.Имя, "Группа", "");
		ТаблицаРегистра = Элементы[ИмяРегистра];
		ТаблицаРегистра.ИзменятьСоставСтрок  = ВозможностьРедактированияЗаписей;
		ТаблицаРегистра.ИзменятьПорядокСтрок = ВозможностьРедактированияЗаписей;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		СтрокаРегистра.ЕстьДвижения = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено;
		СтрокаРегистра.Отображение  = СтрокаРегистра.ЕстьДвижения И СтрокаРегистра.ПравоНаПросмотр;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	ЭлементПатент             = Элементы.Найти(ИмяРегистра + "Патент");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

	Если ЭлементПатент <> Неопределено Тогда
		СвязиПараметровПатент = Новый Массив;
		СвязиПараметровПатент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементПатент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровПатент);
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьРеквизитыФормы()

	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Хозрасчетный"
			ИЛИ СтрокаРегистра.Имя = "КнигаУчетаДоходовИРасходов"
			ИЛИ СтрокаРегистра.Имя = "РасшифровкаКУДиР"
			ИЛИ СтрокаРегистра.Имя = "ЖурналУчетаСчетовФактур" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				КартинкаСтроки = Новый РеквизитФормы("КартинкаСтроки", Новый ОписаниеТипов("Число"), ИмяРеквизита);
				ДобавляемыеРеквизиты.Добавить(КартинкаСтроки);
			КонецЕсли;
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				Для каждого СтрокаЗаписи Из ЭтотОбъект[ИмяРеквизита] Цикл
					Если СтрокаЗаписи.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						СтрокаЗаписи.КартинкаСтроки = 2 + ?(СтрокаЗаписи.Активность, 0, 1);
					Иначе
						СтрокаЗаписи.КартинкаСтроки = 4 + ?(СтрокаЗаписи.Активность, 0, 1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
			Если СтрокаРегистра.Записывать Тогда
				АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()
	
	Если РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		ОбновитьДвиженияНаСервере();
		ЭтаФорма.Модифицированность = Ложь;
	Иначе
		УстановитьВидимостьПриРучнойКорректировке();
		УстановитьВозможностьРедактированияЗаписей();
		ВключитьАктивностьДвиженийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПриРучнойКорректировке()
	
	Если РучнаяКорректировка Тогда
		
		СтрокиСОтображение = Регистры.НайтиСтроки(Новый Структура("Отображение", Истина));
		Если СтрокиСОтображение.Количество() = 0 Тогда
			
			Хозрасчетный = Регистры.НайтиСтроки(Новый Структура("Имя", "Хозрасчетный"));
			Если Хозрасчетный.Количество() > 0 Тогда
				Хозрасчетный[0].Отображение = Истина;
				Элементы.ГруппаХозрасчетный.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИнформацияОПроведении.Видимость = ЗначениеЗаполнено(ИнформацияОПроведении)
												И РучнаяКорректировка = Ложь;

	МоментДокумента = Новый МоментВремени(Объект.Дата, ДокументДвижений);

	Элементы.ТребуетсяАктуализация.Видимость = НЕ РучнаяКорректировка
		И ИспользуетсяОтложенноеПроведение
		И МоментАктуальностиОтложенныхРасчетов <> Неопределено
		И МоментАктуальностиОтложенныхРасчетов.Сравнить(МоментДокумента) <= 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКлючаЗаписи(ПараметрыЗаписи)
	
	ПараметрыКлючаЗаписи = Новый Структура("КлючЗаписи, ТипРегистра");
	
	ИмяРегистра = ПараметрыЗаписи.ИмяРегистра;
	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрБухгалтерии";

		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыБухгалтерии[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрНакопления";
		
		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыНакопления[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрСведений";
		
		ЗначениеКлючаЗаписи = Новый Структура;
		Если НЕ Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
			И ПараметрыЗаписи.Свойство("Период") Тогда
			ЗначениеКлючаЗаписи.Вставить("Период", 		ПараметрыЗаписи.Период); 	
		КонецЕсли;
		Если Метаданные.РегистрыСведений[ИмяРегистра].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору
			И ПараметрыЗаписи.Свойство("Регистратор") Тогда
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор); 	
		КонецЕсли;
		Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
			Если ПараметрыЗаписи.Свойство(ИзмерениеРегистра.Имя) Тогда
				ЗначениеКлючаЗаписи.Вставить(ИзмерениеРегистра.Имя, ПараметрыЗаписи[ИзмерениеРегистра.Имя]); 		
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыКлючаЗаписи;

КонецФункции

&НаКлиенте
Процедура ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	
	Отказ = Ложь;
	ЗаписатьДвижения(Отказ);
	Если НЕ Отказ Тогда
		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументДвижений);
		КонецЕсли;
		ЭтаФорма.Модифицированность = Ложь;
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", ДокументДвижений));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановитьДвиженияЗавершение(Ответ, ИзмененаРучнаяКорректировка) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	Иначе
		РучнаяКорректировка = Истина;
		УстановитьВидимостьПриРучнойКорректировке();
		УстановитьВозможностьРедактированияЗаписей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ЗаписатьДвижения(Отказ);
		Если НЕ Отказ Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
	Проводка.НадписьПР = НСтр("ru = 'ПР:'");
	Проводка.НадписьВР = НСтр("ru = 'ВР:'");
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаСервере
Процедура ВключитьАктивностьДвиженийНаСервере()
	
	Если РучнаяКорректировка И НЕ АктивностьДвижений Тогда
		
		АктивностьДвижений = Истина;
		
		Для каждого СтрокаРегистра Из Регистры Цикл
			Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
				Продолжить;
			КонецЕсли;
			
			ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.ЖурналПроводок;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПриНеобходимостиАктуализацииНажатие(Элемент)

	// Пользователь хочет скрыть данные по актуализации, сбрасываем соответствующие признаки.
	МоментАктуальностиОтложенныхРасчетов = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания)

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//  Регистратор  - ДокументСсылка - документ, движения которого анализируются.
//  Движения     - КоллекцияЗначенийСвойстваОбъектаМетаданных - список регистров, для которых документ-регистратор.
//  ИсключаемыеРегистры - Структура, Массив - список имен регистров, которые не требуется проверять.
//
// Возвращаемое значение:
//   Массив      - список имен регистров, имеющих хотя бы одно движение.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, ИсключаемыеРегистры = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ИсключаемыеРегистры)
	   И ТипЗнч(ИсключаемыеРегистры) <> Тип("Структура") Тогда
	   
		ИсключаемыеРегистрыСтруктура = Новый Структура;
		Для каждого ИмяРегистра Из ИсключаемыеРегистры Цикл
			ИсключаемыеРегистрыСтруктура.Вставить(ИмяРегистра);
		КонецЦикла;

	Иначе
		
		ИсключаемыеРегистрыСтруктура = ИсключаемыеРегистры;
		
	КонецЕсли;
	
	РегистрыТребующиеОчистки = НовыеРегистрыТребующиеОчистки();
	РегистрыТребующиеОчистки.Регистратор = Регистратор;
	РегистрыТребующиеОчистки.ПроверяемыеРегистры = ИменаПроверяемыхРегистров(Движения, , ИсключаемыеРегистрыСтруктура);
	
	ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки);
	
	Результат = РегистрыТребующиеОчистки.ПроверяемыеРегистры.ВыгрузитьКолонку("ИмяРегистра");
	
	Возврат Результат;

КонецФункции

Функция НовыеРегистрыТребующиеОчистки()
	
	РегистрыТребующиеОчистки = Новый Структура;
	
	// Хранит список регистров, которые можно проанализировать на наличие записанных движений.
	РегистрыТребующиеОчистки.Вставить("ПроверяемыеРегистры", НовыеИменаРегистровДляПроверки());
	
	РегистрыТребующиеОчистки.Вставить("ДатаНачала",    '00010101');
	РегистрыТребующиеОчистки.Вставить("ДатаОкончания", '00010101');
	РегистрыТребующиеОчистки.Вставить("Организация",   Справочники.Организации.ПустаяСсылка());
	РегистрыТребующиеОчистки.Вставить("ИмяДокумента",  "");
	РегистрыТребующиеОчистки.Вставить("Регистратор",   Неопределено);
	
	Возврат РегистрыТребующиеОчистки;
	
КонецФункции

// Создает таблицу для хранения информации, необходимой алгоритму очистки движений.
//
Функция НовыеИменаРегистровДляПроверки()
	
	ПроверяемыеРегистры = Новый ТаблицаЗначений;
	
	// Бухгалтерии, Сведений, Накопления
	ПроверяемыеРегистры.Колонки.Добавить("ВидРегистра",     ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ПроверяемыеРегистры.Колонки.Добавить("ИмяРегистра",     Новый ОписаниеТипов("Строка"));
	ПроверяемыеРегистры.Колонки.Добавить("ЕстьОрганизация", Новый ОписаниеТипов("Булево"));
	ПроверяемыеРегистры.Колонки.Добавить("ЕстьПериод",      Новый ОписаниеТипов("Булево"));
	
	Возврат ПроверяемыеРегистры;
	
КонецФункции

Функция ИменаПроверяемыхРегистров(Движения, ПроверяемыеРегистры = Неопределено, ИсключаемыеРегистры = Неопределено)
	
	ИменаПроверяемыхПоТипу = НовыеИменаРегистровДляПроверки();
	
	Если ПроверяемыеРегистры = Неопределено Тогда // вернуть список имен всех регистров.
		
		Если ИсключаемыеРегистры = Неопределено Тогда
			ИсключаемыеРегистры = Новый Структура;
		КонецЕсли;
		
		НепериодическийРегистр = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	    		
		Для каждого ПроверяемыйРегистр Из Движения Цикл
			
			Если ИсключаемыеРегистры.Свойство(ПроверяемыйРегистр.Имя)
			 Или Лев(ПроверяемыйРегистр.Имя, 7) = "Удалить" Тогда
				Продолжить;
			КонецЕсли;
			
			ПризнакГруппыРегистров = ПроверяемыйРегистр.ПолноеИмя();
			ПризнакГруппыРегистров = Лев(ПризнакГруппыРегистров, СтрНайти(ПризнакГруппыРегистров, ".") - 1);
			ПризнакГруппыРегистров = ВРег(ПризнакГруппыРегистров);
			ЭтоРегистрСведений = (ПризнакГруппыРегистров = "РЕГИСТРСВЕДЕНИЙ" Или ПризнакГруппыРегистров = "INFORMATIONREGISTER");
			
			НовыйПроверяемыйРегистр = ИменаПроверяемыхПоТипу.Добавить();
			Если ЭтоРегистрСведений Тогда
				НовыйПроверяемыйРегистр.ВидРегистра = "Сведений";
			ИначеЕсли ПризнакГруппыРегистров = "РЕГИСТРБУХГАЛТЕРИИ" Или ПризнакГруппыРегистров = "ACCOUNTINGREGISTER" Тогда
				НовыйПроверяемыйРегистр.ВидРегистра = "Бухгалтерии";
			Иначе
				НовыйПроверяемыйРегистр.ВидРегистра = "Накопления";
			КонецЕсли;
			НовыйПроверяемыйРегистр.ИмяРегистра = ПроверяемыйРегистр.Имя;
			НовыйПроверяемыйРегистр.ЕстьОрганизация = (ПроверяемыйРегистр.Измерения.Найти("Организация") <> Неопределено
				Или ПроверяемыйРегистр.Реквизиты.Найти("Организация") <> Неопределено
				Или ЭтоРегистрСведений И ПроверяемыйРегистр.Ресурсы.Найти("Организация") <> Неопределено);
			НовыйПроверяемыйРегистр.ЕстьПериод = (Не ЭтоРегистрСведений
				Или ПроверяемыйРегистр.ПериодичностьРегистраСведений <> НепериодическийРегистр);
			
		КонецЦикла;

	Иначе // вернуть список с ограничением
		
		Для каждого ПроверяемыйРегистр Из Движения Цикл
			
			ИмяПроверяемогоРегистра = ПроверяемыеРегистры.Найти(ПроверяемыйРегистр.Имя, "ИмяРегистра");
			Если ИмяПроверяемогоРегистра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйПроверяемыйРегистр = ИменаПроверяемыхПоТипу.Добавить();
			НовыйПроверяемыйРегистр.ВидРегистра     = ИмяПроверяемогоРегистра.ВидРегистра;
			НовыйПроверяемыйРегистр.ИмяРегистра     = ИмяПроверяемогоРегистра.ИмяРегистра;
			НовыйПроверяемыйРегистр.ЕстьОрганизация = ИмяПроверяемогоРегистра.ЕстьОрганизация;
			НовыйПроверяемыйРегистр.ЕстьПериод      = ИмяПроверяемогоРегистра.ЕстьПериод;
			
		КонецЦикла;

	КонецЕсли;
	
	Возврат ИменаПроверяемыхПоТипу;
	
КонецФункции

Процедура ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки)
	
	// Отсюда будем удалять пустые регистры.
	ИменаПроверяемыхРегистров = РегистрыТребующиеОчистки.ПроверяемыеРегистры;
	Если ИменаПроверяемыхРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// Сюда будем переносить найденные пустые регистры.
	РегистрыНеТребующиеОчистки = Новый Структура;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(РегистрыТребующиеОчистки.Регистратор) Тогда
		
		ВариантОтбора = "Документ";
		
		Запрос.УстановитьПараметр("Регистратор", РегистрыТребующиеОчистки.Регистратор);
		
	Иначе
		
		ВариантОтбора = ?(ПустаяСтрока(РегистрыТребующиеОчистки.ИмяДокумента), "Организация", "Тип");
		
		Запрос.УстановитьПараметр("Организация",   РегистрыТребующиеОчистки.Организация);
		Запрос.УстановитьПараметр("ДатаНачала",    РегистрыТребующиеОчистки.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", РегистрыТребующиеОчистки.ДатаОкончания);
		
	КонецЕсли;
	
	ШаблонПроверяющегоЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Хозрасчетный"" КАК ИмяРегистра
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	&ОтборПоРегистру";
	
	// Порциями делаем запросы к информационной базе за период.
	МаксимумПодзапросовВПорции = 50;
	ИменаРегистровТекущейПорции = Новый Массив;
	ОстатокПроверок = МаксимумПодзапросовВПорции + 1; // инициализируем значение для входа в алгоритм
	ТекстПроверяющегоЗапроса = "";
	Для каждого ПроверяемыйРегистр Из ИменаПроверяемыхРегистров Цикл
		
		ОстатокПроверок = ОстатокПроверок - 1;
		Если ОстатокПроверок = 0 Тогда
			
			Если Не ПустаяСтрока(ТекстПроверяющегоЗапроса) Тогда
				// Выполняем проверку, используя собранный запрос.
				Запрос.Текст = ТекстПроверяющегоЗапроса;
				РегистрыСДвижениями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				РегистрыБезДвижений = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИменаРегистровТекущейПорции, РегистрыСДвижениями);
				Для каждого ИмяРегистра Из РегистрыБезДвижений Цикл
					РегистрыНеТребующиеОчистки.Вставить(ИмяРегистра);
				КонецЦикла;
				
				ТекстПроверяющегоЗапроса = "";
				ИменаРегистровТекущейПорции.Очистить();
				
			КонецЕсли;
			
			// Инициализируем значением, которое, с одной стороны, скорее всего превышает количество регистров, где данный
			// документ является регистратором, с другой стороны, позволяет при необходимости большой список регистров
			// анализировать порциями.
			ОстатокПроверок = МаксимумПодзапросовВПорции;
			
		КонецЕсли;
		
		ИменаРегистровТекущейПорции.Добавить(ПроверяемыйРегистр.ИмяРегистра);
		
		ТекстПодзапроса = ШаблонПроверяющегоЗапроса;
		Если ОстатокПроверок < МаксимумПодзапросовВПорции Тогда // убираем имя поля из всех подзапросов кроме первого
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, " КАК ИмяРегистра", "");
		КонецЕсли;
		Если ВариантОтбора = "Документ" Тогда // конкретный документ
			
			ОтборПоРегистру = "Хозрасчетный.Регистратор = &Регистратор";
			
		Иначе // за период по организации
			
			ОтборПоРегистру = "";
			
			Если ПроверяемыйРегистр.ЕстьПериод Тогда
				
				ОтборПоРегистру = "Хозрасчетный.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
				
			КонецЕсли;
			
			Если ВариантОтбора = "Тип" Тогда
				
				Если Не ПустаяСтрока(ОтборПоРегистру) Тогда
					ОтборПоРегистру = ОтборПоРегистру + Символы.ПС + Символы.Таб + "И ";
				КонецЕсли;
				ОтборПоРегистру = ОтборПоРегистру + "Хозрасчетный.Регистратор ССЫЛКА Документ."
					+ РегистрыТребующиеОчистки.ИмяДокумента;
				
			КонецЕсли;
			
			Если ПроверяемыйРегистр.ЕстьОрганизация Тогда
				
				Если Не ПустаяСтрока(ОтборПоРегистру) Тогда
					ОтборПоРегистру = ОтборПоРегистру + Символы.ПС + Символы.Таб + "И ";
				КонецЕсли;
				ОтборПоРегистру = ОтборПоРегистру + "Хозрасчетный.Организация = &Организация";
				
			КонецЕсли;
			
			Если ПустаяСтрока(ОтборПоРегистру) Тогда
				ОтборПоРегистру = "ИСТИНА";
			КонецЕсли;
				
		КонецЕсли; 
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ОтборПоРегистру", ОтборПоРегистру);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Бухгалтерии", ПроверяемыйРегистр.ВидРегистра);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Хозрасчетный", ПроверяемыйРегистр.ИмяРегистра);
		
		ТекстПроверяющегоЗапроса = ?(ПустаяСтрока(ТекстПроверяющегоЗапроса), "", ТекстПроверяющегоЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|") + ТекстПодзапроса;
	
	КонецЦикла;
	Если Не ПустаяСтрока(ТекстПроверяющегоЗапроса) Тогда
		// Выполняем проверку, используя собранный запрос.
		Запрос.Текст = ТекстПроверяющегоЗапроса;
		РегистрыСДвижениями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
		РегистрыБезДвижений = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИменаРегистровТекущейПорции, РегистрыСДвижениями);
		Для каждого ИмяРегистра Из РегистрыБезДвижений Цикл
			РегистрыНеТребующиеОчистки.Вставить(ИмяРегистра);
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим из общего списка те регистры, чья пустота подтверждена.
	УдалитьНепроверяемыеРегистры(ИменаПроверяемыхРегистров, РегистрыНеТребующиеОчистки);
	
КонецПроцедуры

// Удаляет из списка УменьшаемыйНабор те, чьи имена есть в ВычитаемыйНабор.
//
// Параметры:
//  УменьшаемыйНабор - ТаблицаЗначений - см. НовыеИменаРегистровДляПроверки().
//  ВычитаемыйНабор - Структура - вычитаемый список.
//
Процедура УдалитьНепроверяемыеРегистры(УменьшаемыйНабор, ВычитаемыйНабор)
	
	Если ВычитаемыйНабор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиПроверки = 0;
	КоличествоПроверяемыхСтрок = УменьшаемыйНабор.Количество();
	Пока НомерСтрокиПроверки < КоличествоПроверяемыхСтрок Цикл
		Если ВычитаемыйНабор.Свойство(УменьшаемыйНабор[НомерСтрокиПроверки].ИмяРегистра) Тогда
			УменьшаемыйНабор.Удалить(НомерСтрокиПроверки);
			КоличествоПроверяемыхСтрок = КоличествоПроверяемыхСтрок - 1;
		Иначе
			НомерСтрокиПроверки = НомерСтрокиПроверки + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция возвращает фиксированный массив организаций, к данным бухгалтерского учета которых
// у текущего пользователя разрешено требуемое право доступа по RLS.
//
// Функцию можно использовать, если требуется выполнять запросы к данным бухгалтерского учета (регистру Хозрасчетный)
// в привилегированном режиме, но чтобы при этом учитывались настройки доступа по RLS:
// 	1. с помощью текущей функции определяется список доступных организаций
//	2. в текстах запросов к самим данных (регистрам, документам) 
//		устанавливаются отборы по этим организациям
//	3. перед выполнением запроса к данным включается привилегированный режим.
//
// Если аналогичную проверку нужно провести в отношении иных данных, чем регистр Хозрасчетный, следует использовать
// ОрганизацииДанныеКоторыхДоступныПользователю().
//
// Не следует (запрещается) вызывать эти функции из кода, который может выполняться в привилегированном режиме,
// так как это приведет к последующей неверной ее работе вне привилегированного режима:
// может повторно использоваться значение, вычисленное в привилегированном режиме.
//
// Параметры:
//	ПравоНаИзменение - Булево
//		- Истина - если после выполнения запроса данные бухгалтерии предполагается менять
//					и нужно проверить, что у пользователя есть право на изменение;
//		- Ложь - если данные бухгалтерии только отображаются пользователю на чтение,
//					и нужно проверить что у него есть соответствующее право.
// 
Функция ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение) Экспорт
	
	Возврат ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрНакопления.ДенежныеСредства",
		ПравоНаИзменение);
	
КонецФункции
	
// Определяет перечень организаций, чтение данных которых, размещенных в конкретном объекте метаданных,
// разрешено пользователю настройками прав доступа.
//
// Функцию можно использовать, если требуется получать данные в привилегированном режиме для предоставления их пользователю - 
// она позволяет ограничить эти данные в соответствии с настройками.
//
// Функцию можно использовать только в тех случаях (для тех объектов),
// когда применяется стандартное ограничение доступа к запрашиваемому объекту метаданных - 
// то есть, аналогичное ограничению, применяемому для регистру бухгалтерии Хозрасчетный
// роли ДобавлениеИзменениеДанныхБухгалтерии.
//
// Порядок использования:
//  1. с помощью функции определяется список доступных организаций
//  2. в текстах запросов к самим данных (регистрам, документам) 
//     устанавливаются отборы по этим организациям
//  3. перед выполнением запроса к данным включается привилегированный режим.
//
// При использовании функции следует иметь в виду, что в общем случае ограничить выбираемые данные
// в соответствии с ОДД по Организации недостаточно:
// 1. в прикладном решении могут использоваться и иные виды доступа, не только Организации
// 2. перед установкой привилегированного режима в вызывающем коде следует проверить наличие прав
//    на чтение запрашиваемой таблицы (регистра, документов) в целом.
//
// Не следует (запрещается) вызывать эту функцию из кода, который может выполняться в привилегированном режиме,
// так как это приведет к последующей неверной ее работе вне привилегированного режима:
// может повторно использоваться значение, вычисленное в привилегированном режиме.
//
// Возвращаемое значение:
//  ФиксированныйМассив - содержит СправочникСсылка.Организации
//
// См. также ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS()
//
// Параметры:
//  ИмяОбъектаДанных - Строка - полное имя объекта данных, доступ к которым проверяется, например, "РегистрБухгалтерии.Хозрасчетный"
//  ПравоНаИзменение - Булево - Истина, если после выполнения запроса данные предполагается менять
//               и нужно проверить, что у пользователя есть право на изменение
//  Пользователь     - СправочникСсылка.Пользователи - Ссылка на пользователя, для которого нужно получить список организаций.
// 
Функция ОрганизацииДанныеКоторыхДоступныПользователю(ИмяОбъектаДанных, ПравоНаИзменение = Ложь, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		Или Пользователи.ЭтоПолноправныйПользователь(Пользователь , , Ложь) Тогда
		
		// Ограничений по RLS нет, возвращаем все организации из справочника
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
	Иначе
	
		// Запрос взят из шаблона #ПоЗначениям роли ДобавлениеИзменениеДанныхБухгалтерии
		// с теми параметрами, с которыми он применяется для регистра бухгалтерии Хозрасчетный.
		Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
		Запрос.УстановитьПараметр("Изменение", ПравоНаИзменение);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.ИдентификаторыОбъектовМетаданных КАК СвойстваТекущейТаблицы
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|					ПО
		|						СвойстваТекущейТаблицы.ПолноеИмя = &ИмяОбъектаДанных
		|							И ИСТИНА В
		|								(ВЫБРАТЬ ПЕРВЫЕ 1
		|									ИСТИНА
		|								ИЗ
		|									РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
		|								ГДЕ
		|									ТаблицыГруппДоступа.Таблица = СвойстваТекущейТаблицы.Ссылка
		|									И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка
		|									И ТаблицыГруппДоступа.Изменение = &Изменение)
		|							И ГруппыДоступа.Ссылка В
		|								(ВЫБРАТЬ
		|									ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|								ИЗ
		|									Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|										ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|										ПО
		|											СоставыГруппПользователей.Пользователь = &Пользователь
		|												И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			ГДЕ
		|				ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
		|									ПО
		|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
		|											И Значения.ЗначениеДоступа = Организации.Ссылка
		|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ = ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|							ГДЕ
		|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
		|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(Организации.Ссылка)
		|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)";
		
		Запрос.Текст = ?(ПравоНаИзменение,
			ТекстЗапроса,
			СтрЗаменить(ТекстЗапроса, "И ТаблицыГруппДоступа.Изменение = &Изменение", ""));
			
		Запрос.УстановитьПараметр("ИмяОбъектаДанных", ИмяОбъектаДанных);
			
	КонецЕсли;
	
	// Доступ к настройкам RLS выполняется в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Новый ФиксированныйМассив(МассивОрганизаций);
	
КонецФункции	