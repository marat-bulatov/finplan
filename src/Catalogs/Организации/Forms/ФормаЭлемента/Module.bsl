
#Область ОписаниеПеременных
&НаКлиенте
Перем ОтключитьАвтоЗаполнениеРеквизитов;

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.ЮрЛицо = Истина;
		КонецЕсли;
		ЗаполнитьЗаголовокРуководитель(ЭтотОбъект, Объект);
		// Отображение данных государственных органов для режима копирования.
		ДанныеГосударственныхОргановПриЧтенииНаСервере(Объект);
	КонецЕсли;
	
	РазместитьКонтактнуюИнформацию();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	//РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";

	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
	Если Параметры.Ключ.Пустая() Тогда
		// Если это копирование, то использовать ИНН, а не ссылку для получения индексов.
		СПАРКРиски.ПриСозданииНаСервере(
		    ЭтаФорма,
			ЭтотОбъект,
			Объект,
			Объект.ИНН,
			ПараметрыПроцедуры);
	Иначе
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтаФорма,
			ЭтотОбъект,
			Объект,
			Объект.Ссылка,
			ПараметрыПроцедуры);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	ПрочитатьИнформациюОбответственныхЛицах();
	
	Если Параметры.Ключ.Пустая() Тогда
		СписокБанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Справочники.Организации.ПустаяСсылка());
		СписокУчредительныеДокументы.Параметры.УстановитьЗначениеПараметра("Владелец", Справочники.Организации.ПустаяСсылка());
		СписокРазрешительныеДокументы.Параметры.УстановитьЗначениеПараметра("Владелец", Справочники.Организации.ПустаяСсылка());
		СписокДоговоры.Параметры.УстановитьЗначениеПараметра("Организация", Справочники.Организации.ПустаяСсылка());
	Иначе
		СписокБанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
		СписокУчредительныеДокументы.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
		СписокРазрешительныеДокументы.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
		СписокДоговоры.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Ссылка);
	КонецЕсли;
	
	КоличествоУчредительныхДокументов = КоличествоЗаписейВСписке("СписокУчредительныеДокументы");
	КоличествоРазрешительныхДокументов = КоличествоЗаписейВСписке("СписокРазрешительныеДокументы");
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()
	
	ИсторияЮрАдреса = НСтр("ru = 'История'");
	ИсторияФактАдреса = НСтр("ru = 'История'");
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = СтатическиеРеквизиты();
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	
	//УстановитьДополнительныеСвойстваКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияФактАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактическийАдресОрганизации"));
	
КонецПроцедуры

&НаСервере
Функция СтатическиеРеквизиты()
	
	СтатическиеРеквизиты = Новый Массив();
	
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ФактическийАдресОрганизации);
	//СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	//СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	//СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
	Возврат СтатическиеРеквизиты;

КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьЗаголовокРуководитель(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Отображение данных государственных органов.
	ДанныеГосударственныхОргановПриЧтенииНаСервере(ТекущийОбъект);
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеПечатью
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УправлениеПечатью
	
	//ПодключитьОбработчикОжидания("ОбработкаОтображенияНадписейФормы", 1, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		ПрочитатьИнформациюОбответственныхЛицах();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЮрЛицоПриИзменении(Элемент)
	
	Если Не Объект.ЮрЛицо Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = Объект.ЮрЛицо;
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	ОбновитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ФамилияРуководителяПриИзменении(Элемент)
	
	ЗаполнитьЗаголовокРуководитель(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРуководителяПриИзменении(Элемент)
	
	ЗаполнитьЗаголовокРуководитель(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоРуководителяПриИзменении(Элемент)
	
	ЗаполнитьЗаголовокРуководитель(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрЛП(Объект.ИНН);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	Объект.КПП = СокрЛП(Объект.КПП);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#Область ИндексыСПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КодНалоговогоОрганаПриИзмененииНаСервере();
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПолноеНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(НалоговыйОрган) Тогда
		ПоказатьЗначение(, НалоговыйОрган);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаПФРПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КодОрганаПФРПриИзмененииНаСервере();
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганПФРПолноеНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ОрганПФР) Тогда
		ПоказатьЗначение(, ОрганПФР);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодчиненностиФССПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КодПодчиненностиФССПриИзмененииНаСервере();
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганФССПолноеНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ОрганФСС) Тогда
		ПоказатьЗначение(, ОрганФСС);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область РаботаСКонтрагентами
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура ПроверитьОрганизацию(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""ИНН"" не заполнено'"), , "Объект.ИНН");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКоду(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Код налогового органа"" не заполнено.'"),
			,
			"Объект.КодНалоговогоОргана");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыНалоговогоОрганаПоКодуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПФРПоКоду(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Код территориального органа ПФР"" не заполнено.'"),
			,
			"Объект.КодОрганаПФР");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПФРПоКодуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФССПоКоду(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Код подчиненности"" не заполнено.'"),
			,
			"Объект.КодПодчиненностиФСС");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыФССПоКодуНаКлиенте();
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовокРуководитель(Форма, Объект)
	
	Если ЗначениеЗаполнено(Объект.ФамилияРуководителя) Тогда
		Форма.Элементы.ГруппаРуководительФИО.ЗаголовокСвернутогоОтображения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Руководитель: %1%2%3'"),
				Объект.ФамилияРуководителя,
				?(ЗначениеЗаполнено(Объект.ИмяРуководителя), " " + ВРег(Лев(Объект.ИмяРуководителя, 1)) + ".", ""),
				?(ЗначениеЗаполнено(Объект.ОтчествоРуководителя), " " + ВРег(Лев(Объект.ОтчествоРуководителя, 1)) + ".", ""));
	Иначе
		Форма.Элементы.ГруппаРуководительФИО.ЗаголовокСвернутогоОтображения =
			НСтр("ru = 'Руководитель: <не заполнено>'");
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#Область ИндексыСПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
// Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
// Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДанныеГосударственныхОргановПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодобратьДанныеГосударственныхОрганов(
		ТекущийОбъект.КодНалоговогоОргана,
		ТекущийОбъект.КодОрганаПФР,
		ТекущийОбъект.КодПодчиненностиФСС);
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДанныеГосударственныхОрганов(КодНалоговогоОргана, КодОрганаПФР, КодПодчиненностиФСС)
	
	ГосударственныйОрганПустаяСсылка = Справочники.ГосударственныеОрганы.ПустаяСсылка();
	НалоговыйОрган = ГосударственныйОрганПустаяСсылка;
	ОрганПФР = ГосударственныйОрганПустаяСсылка;
	ОрганФСС = ГосударственныйОрганПустаяСсылка;
	
	ВидыГосОрганов = Перечисления.ВидыГосударственныхОрганов;
	КодыГосударственныхОрганов = Новый ТаблицаЗначений;
	КодыГосударственныхОрганов.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыГосударственныхОрганов"));
	КодыГосударственныхОрганов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(7)));
	
	Если ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		НоваяСтрока = КодыГосударственныхОрганов.Добавить();
		НоваяСтрока.Вид = ВидыГосОрганов.НалоговыйОрган;
		НоваяСтрока.Код = КодНалоговогоОргана;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодОрганаПФР) Тогда
		НоваяСтрока = КодыГосударственныхОрганов.Добавить();
		НоваяСтрока.Вид = ВидыГосОрганов.ОрганПФР;
		НоваяСтрока.Код = КодОрганаПФР;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодПодчиненностиФСС) Тогда
		НоваяСтрока = КодыГосударственныхОрганов.Добавить();
		НоваяСтрока.Вид = ВидыГосОрганов.ОрганФСС;
		НоваяСтрока.Код = КодПодчиненностиФСС;
	КонецЕсли;
	
	Если КодыГосударственныхОрганов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КодыГосударственныхОрганов.Вид КАК Вид,
		|	КодыГосударственныхОрганов.Код КАК Код
		|ПОМЕСТИТЬ ВТ_КодыОрганов
		|ИЗ
		|	&КодыГосударственныхОрганов КАК КодыГосударственныхОрганов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГосударственныеОрганы.Ссылка КАК Ссылка,
		|	ГосударственныеОрганы.ПолноеНаименование КАК ПолноеНаименование,
		|	ГосударственныеОрганы.Код КАК Код,
		|	ГосударственныеОрганы.Наименование КАК Наименование,
		|	ГосударственныеОрганы.Вид КАК Вид
		|ИЗ
		|	ВТ_КодыОрганов КАК ВТ_КодыОрганов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГосударственныеОрганы КАК ГосударственныеОрганы
		|		ПО ВТ_КодыОрганов.Вид = ГосударственныеОрганы.Вид
		|			И ВТ_КодыОрганов.Код = ГосударственныеОрганы.Код
		|ГДЕ
		|	НЕ ГосударственныеОрганы.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("КодыГосударственныхОрганов", КодыГосударственныхОрганов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Вид = ВидыГосОрганов.НалоговыйОрган Тогда
				УстановитьДанныеНалоговогоОргана(Выборка);
			ИначеЕсли Выборка.Вид = ВидыГосОрганов.ОрганПФР Тогда
				УстановитьДанныеПФР(Выборка);
			ИначеЕсли Выборка.Вид = ВидыГосОрганов.ОрганФСС Тогда
				УстановитьДанныеФСС(Выборка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НалоговыйОрган.Пустая() Тогда
		Элементы.ГруппаНалоговаяИнспекция.ЗаголовокСвернутогоОтображения =
			?(ПустаяСтрока(Объект.КодНалоговогоОргана),
				"",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Налоговая инспекция: %1'"),
					Объект.КодНалоговогоОргана));
	КонецЕсли;
	
	Если ОрганПФР.Пустая() Тогда
		Элементы.ГруппаПФР.ЗаголовокСвернутогоОтображения =
			?(ПустаяСтрока(Объект.КодОрганаПФР),
				"",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пенсионный фонд: %1'"),
					Объект.КодОрганаПФР));
	КонецЕсли;
	
	Если ОрганФСС.Пустая() Тогда
		Элементы.ГруппаФСС.ЗаголовокСвернутогоОтображения =
			?(ПустаяСтрока(Объект.КодПодчиненностиФСС),
				"",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Фонд социального страхования: %1'"),
					Объект.КодПодчиненностиФСС));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйДополнительныеПараметрыОбработкиОшибки(ПредставлениеДействия)
	
	Результат = РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
	Результат.ПредставлениеДействия = ПредставлениеДействия;
	Результат.ИдентификаторМестаВызова = "OrganizationCard";
	Результат.Форма = ЭтотОбъект;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйДанныеГосударственногоОргана()
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка" , Справочники.ГосударственныеОрганы.ПустаяСсылка());
	Результат.Вставить("Код" , "");
	Результат.Вставить("Наименование" , "");
	Результат.Вставить("ПолноеНаименование", "");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеГосударственногоОргана(Код, Вид)
	
	Результат = НовыйДанныеГосударственногоОргана();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГосударственныеОрганы.Ссылка КАК Ссылка,
	|	ГосударственныеОрганы.ПолноеНаименование КАК ПолноеНаименование,
	|	ГосударственныеОрганы.Код КАК Код,
	|	ГосударственныеОрганы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ГосударственныеОрганы КАК ГосударственныеОрганы
	|ГДЕ
	|	ГосударственныеОрганы.Код = &Код
	|	И ГосударственныеОрганы.Вид = &Вид
	|	И НЕ ГосударственныеОрганы.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаГосударственногоОргана(Код, Вид)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГосударственныеОрганы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГосударственныеОрганы КАК ГосударственныеОрганы
	|ГДЕ
	|	ГосударственныеОрганы.Код = &Код
	|	И ГосударственныеОрганы.Вид = &Вид
	|	И НЕ ГосударственныеОрганы.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Вид", Вид);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ГосударственныеОрганы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Запись данных государственного органа в информационную базу.
// Необходимо в конфигурации-потребителе библиотеки
// заменить на запись в справочники в соответствии со структурой
// хранения данные о государственных органах в конфигурации.
//
&НаСервереБезКонтекста
Функция ЗаписатьДанныеГосударственногоОргана(ДанныеОргана, Вид, Код)
	
	УстановитьПривилегированныйРежим(Истина);
	ГосОрганСсылка = СсылкаГосударственногоОргана(Код, Вид);
	Если ГосОрганСсылка.Пустая() Тогда
		ГосОрганОбъект = Справочники.ГосударственныеОрганы.СоздатьЭлемент();
		ГосОрганОбъект.Код = Код;
		ГосОрганОбъект.Вид = Вид;
	Иначе
		ГосОрганОбъект = ГосОрганСсылка.ПолучитьОбъект();
		ГосОрганОбъект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ГосОрганОбъект,
		ДанныеОргана,
		"Наименование, ПолноеНаименование, ИНН, КПП, Адрес, Телефон, ЭлектроннаяПочта, ИнтернетСайт");
	
	// В демонстрационной конфигурации платежные реквизиты и данные регистрирующего органа не обрабатываются,
	// поэтому записываются в ИБ виде строкового представления.
	// В конфигурации-потребителе необходимо записывать данные в соответствующие справочники: банки, банковские счета и др.
	ГосОрганОбъект.ПлатежныеРеквизитыСтрокой = ПлатежныеРеквизитыСтрокой(ДанныеОргана.ПлатежныеРеквизиты);
	ГосОрганОбъект.РегистрирующийОрганИПСтрокой = РегистрирующийОрганСтрокой(ДанныеОргана.РегистрирующийОрганИП);
	ГосОрганОбъект.РегистрирующийОрганЮЛСтрокой = РегистрирующийОрганСтрокой(ДанныеОргана.РегистрирующийОрганЮЛ);
	
	ГосОрганОбъект.Записать();
	
	Результат = НовыйДанныеГосударственногоОргана();
	ЗаполнитьЗначенияСвойств(Результат, ГосОрганОбъект);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПлатежныеРеквизитыСтрокой(ПлатежныеРеквизиты)
	
	Если ЗначениеЗаполнено(ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получатель: %1;
				|Р. сч.: %2; Кор. сч.: %3; БИК: %4'"),
			ПлатежныеРеквизиты.ПолучательПлатежа,
			ПлатежныеРеквизиты.РасчетныйСчет,
			ПлатежныеРеквизиты.КоррСчет,
			ПлатежныеРеквизиты.БИК);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция РегистрирующийОрганСтрокой(РегистрирующийОрган)
	
	Если ЗначениеЗаполнено(РегистрирующийОрган.Код) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2;
				|Адрес: %3; Тел.: %4'"),
			РегистрирующийОрган.Код,
			РегистрирующийОрган.Наименование,
			РегистрирующийОрган.Адрес,
			РегистрирующийОрган.Телефон);
		Если ЗначениеЗаполнено(РегистрирующийОрган.Информация) Тогда
			Возврат Результат + Символы.ПС + РегистрирующийОрган.Информация;
		Иначе
			Возврат Результат;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#Область ЗаполнениеРеквизитовНалоговогоОргана

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКодуНаКлиенте()
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыНалоговогоОрганаПоКодуНаСервере(ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыНалоговогоОрганаПоКодуЗавершение",
			ЭтотОбъект);
		ДополнительныеПараметрыОбработкиОшибки =
			НовыйДополнительныеПараметрыОбработкиОшибки(
				НСтр("ru = 'Заполнение реквизитов налогового органа'"));
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКодуНаСервере(ОписаниеОшибки)
	
	Реквизиты = РаботаСКонтрагентами.РеквизитыНалоговогоОрганаПоКоду(Объект.КодНалоговогоОргана);
	ОписаниеОшибки = Реквизиты.ОписаниеОшибки;
	Если Не ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		ДанныеОргана = ЗаписатьДанныеГосударственногоОргана(
			Реквизиты,
			Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
			Объект.КодНалоговогоОргана);
		УстановитьДанныеНалоговогоОргана(ДанныеОргана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КодНалоговогоОрганаПриИзмененииНаСервере()
	
	ДанныеОргана = ДанныеГосударственногоОргана(
		Объект.КодНалоговогоОргана,
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	УстановитьДанныеНалоговогоОргана(ДанныеОргана);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеНалоговогоОргана(ДанныеОргана)
	
	НалоговыйОрган = ДанныеОргана.Ссылка;
	
	Элементы.ГруппаНалоговаяИнспекция.ЗаголовокСвернутогоОтображения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Налоговая инспекция: %1, %2'"),
			ДанныеОргана.Код,
			ДанныеОргана.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыНалоговогоОрганаПоКодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыНалоговогоОрганаПоКодуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовПФР

&НаКлиенте
Процедура ЗаполнитьРеквизитыПФРПоКодуНаКлиенте()
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПФРПоКодуНаСервере(ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыПФРПоКодуЗавершение",
			ЭтотОбъект);
		ДополнительныеПараметрыОбработкиОшибки =
			НовыйДополнительныеПараметрыОбработкиОшибки(
				НСтр("ru = 'Заполнение реквизитов пенсионного фонда'"));
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПФРПоКодуНаСервере(ОписаниеОшибки)
	
	Реквизиты = РаботаСКонтрагентами.РеквизитыОтделенияПФРПоКоду(Объект.КодОрганаПФР);
	ОписаниеОшибки = Реквизиты.ОписаниеОшибки;
	Если Не ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		ДанныеОргана = ЗаписатьДанныеГосударственногоОргана(
			Реквизиты,
			Перечисления.ВидыГосударственныхОрганов.ОрганПФР,
			Объект.КодОрганаПФР);
		УстановитьДанныеПФР(ДанныеОргана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КодОрганаПФРПриИзмененииНаСервере()
	
	ДанныеОргана = ДанныеГосударственногоОргана(
		Объект.КодНалоговогоОргана,
		Перечисления.ВидыГосударственныхОрганов.ОрганПФР);
	УстановитьДанныеПФР(ДанныеОргана);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПФР(ДанныеОргана)
	
	ОрганПФР = ДанныеОргана.Ссылка;
	
	Элементы.ГруппаПФР.ЗаголовокСвернутогоОтображения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пенсионный фонд: %1, %2'"),
			ДанныеОргана.Код,
			ДанныеОргана.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыПФРПоКодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыПФРПоКодуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовФСС

&НаКлиенте
Процедура ЗаполнитьРеквизитыФССПоКодуНаКлиенте()
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыФССПоКодуНаСервере(ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыФССПоКодуЗавершение",
			ЭтотОбъект);
		ДополнительныеПараметрыОбработкиОшибки =
			НовыйДополнительныеПараметрыОбработкиОшибки(
				НСтр("ru = 'Заполнение реквизитов фонда социального страхования'"));
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФССПоКодуНаСервере(ОписаниеОшибки)
	
	Реквизиты = РаботаСКонтрагентами.РеквизитыОтделенияФССПоКоду(Объект.КодПодчиненностиФСС);
	ОписаниеОшибки = Реквизиты.ОписаниеОшибки;
	Если Не ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		ДанныеОргана = ЗаписатьДанныеГосударственногоОргана(
			Реквизиты,
			Перечисления.ВидыГосударственныхОрганов.ОрганФСС,
			Объект.КодПодчиненностиФСС);
		УстановитьДанныеФСС(ДанныеОргана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КодПодчиненностиФССПриИзмененииНаСервере()
	
	ДанныеОргана = ДанныеГосударственногоОргана(
		Объект.КодНалоговогоОргана,
		Перечисления.ВидыГосударственныхОрганов.ОрганФСС);
	УстановитьДанныеФСС(ДанныеОргана);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеФСС(ДанныеОргана)
	
	ОрганФСС = ДанныеОргана.Ссылка;
	Элементы.ГруппаФСС.ЗаголовокСвернутогоОтображения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Фонд социального страхования: %1, %2'"),
			ДанныеОргана.Код,
			ДанныеОргана.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыФССПоКодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыФССПоКодуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовПоИНН

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ИНН)

	Если ПустаяСтрока(ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьАвтоЗаполнениеРеквизитов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьАвтоЗаполнениеРеквизитов = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьАвтоЗаполнениеРеквизитов", 0.1, Истина);
	
	СтрокаИНН = СокрЛП(ИНН);
	
	Если ЗначениеЗаполнено(Объект.Наименование)
		Или ЗначениеЗаполнено(Объект.КПП)
		Или ЗначениеЗаполнено(Объект.ОГРН)
		Или ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
		Или ЗначениеЗаполнено(Объект.КодОрганаПФР)
		Или ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение",
			ЭтотОбъект,
			ИНН);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(КодВозвратаДиалога.Да, ИНН);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(Ответ, ИНН) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(ИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН)
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение",
			ЭтотОбъект,
			СтрокаИНН);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия = НСтр("ru = 'Автоматическое заполнение реквизитов организации'");
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "OrganizationCard";
		ДополнительныеПараметрыОбработкиОшибки.Форма = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	КонецЕсли;
	
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(Знач СтрокаИНН, ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = Объект.ЮрЛицо;
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(СтрокаИНН);
	Иначе
		РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыОрганизации);
	Объект.ОГРН = РеквизитыОрганизации.РегистрационныйНомер;
	
	Если РеквизитыОрганизации.РегистрацияВНалоговомОргане = Неопределено Тогда
		Объект.КодНалоговогоОргана = "";
	Иначе
		Объект.КодНалоговогоОргана = РеквизитыОрганизации.РегистрацияВНалоговомОргане.Код;
	КонецЕсли;
	
	Если РеквизитыОрганизации.РегистрацияВПенсионномФонде = Неопределено Тогда
		Объект.КодОрганаПФР = "";
	Иначе
		Объект.КодОрганаПФР = РеквизитыОрганизации.РегистрацияВПенсионномФонде.КодОрганаПФР;
	КонецЕсли;
	
	Если РеквизитыОрганизации.РегистрацияВФСС = Неопределено Тогда
		Объект.КодПодчиненностиФСС = "";
	Иначе
		Объект.КодПодчиненностиФСС = РеквизитыОрганизации.РегистрацияВФСС.КодПодчиненности;
	КонецЕсли;
	
	Если РеквизитыОрганизации.Свойство("Руководитель") И РеквизитыОрганизации.Руководитель <> Неопределено Тогда
		Объект.ФамилияРуководителя = РеквизитыОрганизации.Руководитель.Фамилия;
		Объект.ИмяРуководителя = РеквизитыОрганизации.Руководитель.Имя;
		Объект.ОтчествоРуководителя = РеквизитыОрганизации.Руководитель.Отчество;
	Иначе
		Объект.ФамилияРуководителя = "";
		Объект.ИмяРуководителя = "";
		Объект.ОтчествоРуководителя = "";
	КонецЕсли;
	ЗаполнитьЗаголовокРуководитель(ЭтотОбъект, Объект);
	
	// Подобрать данные государственных органов по новым кодам.
	ПодобратьДанныеГосударственныхОрганов(
		Объект.КодНалоговогоОргана,
		Объект.КодОрганаПФР,
		Объект.КодПодчиненностиФСС);
	
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации,
			РеквизитыОрганизации.ЮридическийАдрес);
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
			РеквизитыОрганизации.Телефон);
	Иначе
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации,
			Неопределено);
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
			Неопределено);
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных = Неопределено Или Не ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.ЗначенияПолей = Неопределено;
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = "";
		
	Иначе
		
		ДанныеСтроки.Представление = СтруктураДанных.Представление;
		ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьАвтоЗаполнениеРеквизитов()

	ОтключитьАвтоЗаполнениеРеквизитов = Неопределено;	

КонецПроцедуры 

#КонецОбласти

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
#КонецОбласти

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#Область ОтветственныеЛица

&НаКлиенте
Процедура ДекорацияИсторияРуководительНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие("Руководитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияЗаместительРуководителяНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие("ЗаместительРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияГлавныйБухгалтерНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие("ГлавныйБухгалтер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюОтветственныхЛицНажатие(Роль)

	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций." + Роль);
	
	Отбор	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияИсторияПодписиНажатиеЗавершение", ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",	Отбор);
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
		
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.Форма.ФормаИстории", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РуководительФИОПриИзменении(Элемент)
	
	ИзмененРуководитель = Истина;
	
	ЭтотОбъект.Модифицированность = Истина;
	
	//Если ЗначениеЗаполнено(РуководительФизЛицо) тогда
	//	
	//	РуководительДолжность= ПрочитатьДолжность(Объект.Ссылка,РуководительФизЛицо,"Руководитель");
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьПриИзменении(Элемент)
	
	ИзмененРуководитель = Истина;
	
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаместительРуководителяФИОПриИзменении(Элемент)
	
	ИзмененЗаместительРуководителя = Истина;
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаместительРуководителяДолжностьПриИзменении(Элемент)
	
	ИзмененЗаместительРуководителя = Истина;
	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	//РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерФИОПриИзменении(Элемент)
		
	ИзмененГлавныйБухгалтер = Истина;
	
	ЭтотОбъект.Модифицированность = Истина;
	
	//Если ЗначениеЗаполнено(ГлавныйБухгалтерФизЛицо) тогда
	//	
	//	ГлавныйБухгалтерДолжность= ПрочитатьДолжность(Объект.Ссылка,ГлавныйБухгалтерФизЛицо,"ГлавныйБухгалтер");
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьПриИзменении(Элемент)
	
	ИзмененГлавныйБухгалтер = Истина;
	
	ЭтотОбъект.Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	//РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОтветственныйПриЗаписиНаСервере(Отказ, ТекущийОбъект);
	СписокБанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	СписокУчредительныеДокументы.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	СписокРазрешительныеДокументы.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	СписокДоговоры.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Ссылка);
	
	КоличествоУчредительныхДокументов = КоличествоЗаписейВСписке("СписокУчредительныеДокументы");
	КоличествоРазрешительныхДокументов = КоличествоЗаписейВСписке("СписокРазрешительныеДокументы");
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриЗаписиНаСервере(Отказ, ТекущийОбъект)
	
	МассивИзмененныхРеквизитов = Новый Массив;
		
	Если ИзмененРуководитель Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ОтветственноеЛицо",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		СтруктураРеквизитов.Вставить("ФизическоеЛицо",	РуководительФизЛицо);
		СтруктураРеквизитов.Вставить("Должность",РуководительДолжность);
		СтруктураРеквизитов.Вставить("Период",	РуководительКлючЗаписи.Период);
		
		МассивИзмененныхРеквизитов.Добавить(СтруктураРеквизитов);
	 		
	КонецЕсли;
	
	Если ИзмененГлавныйБухгалтер Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ОтветственноеЛицо",	Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		СтруктураРеквизитов.Вставить("ФизическоеЛицо",	ГлавныйБухгалтерФизЛицо);
		СтруктураРеквизитов.Вставить("Должность",ГлавныйБухгалтерДолжность);
		СтруктураРеквизитов.Вставить("Период",	ГлавныйБухгалтерКлючЗаписи.Период);
		
		МассивИзмененныхРеквизитов.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	Если ИзмененЗаместительРуководителя Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ОтветственноеЛицо",	Перечисления.ОтветственныеЛицаОрганизаций.ЗаместительРуководителя);
		СтруктураРеквизитов.Вставить("ФизическоеЛицо",	ЗаместительРуководителяФизЛицо);
		СтруктураРеквизитов.Вставить("Должность",ЗаместительРуководителяДолжность);
		СтруктураРеквизитов.Вставить("Период",	ЗаместительРуководителяКлючЗаписи.Период);
		
		МассивИзмененныхРеквизитов.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	Для Каждого РеквизитыПодписи из МассивИзмененныхРеквизитов Цикл
		
		РегистрыСведений.ОтветственныеЛицаОрганизаций.ЗаписатьНаборЗаписейИсторииОтветственныеЛицаОрганизаций(ТекущийОбъект.Ссылка, РеквизитыПодписи);
		
	КонецЦикла;
	
	ИзмененГлавныйБухгалтер = Ложь;
	ИзмененРуководитель = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюОбответственныхЛицах()
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК ПРЕДСТАВЛЕНИЕДолжность,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ПРЕДСТАВЛЕНИЕФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ЗаместительРуководителя)
	|			ТОГДА ""ЗаместительРуководителя""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ЗаместительРуководителя))";
	
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтотОбъект.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица] = НаименованиеОтветственногоЛица(Выборка.ПРЕДСТАВЛЕНИЕФизическоеЛицо, Выборка.ПРЕДСТАВЛЕНИЕДолжность);
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица + "Должность"] = Выборка.Должность;
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица + "ФизЛицо"] = Выборка.ФизическоеЛицо;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция НаименованиеОтветственногоЛица(ФамилияИмяОтчество, Должность)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ФамилияИмяОтчество, Должность);
	
КонецФункции

&НаКлиенте
Процедура ДекорацияИсторияПодписиНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПрочитатьИнформациюОбответственныхЛицах();
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Форма = ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлемента", Новый Структура("Владелец", Объект.Ссылка));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция КоличествоЗаписейВСписке(ИмяТекущегоСписка)
	
	Схема = Элементы[ИмяТекущегоСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[ИмяТекущегоСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КМ = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КМ.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПК = Новый ПроцессорКомпоновкиДанных;
	ПК.Инициализировать(Макет);
	
	ТЗ = Новый ТаблицаЗначений;
	
	ПВ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПВ.УстановитьОбъект(ТЗ);
	ПВ.Вывести(ПК);
	
	Возврат ТЗ.Количество();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОтображенияНадписейФормы()
	
	КоличествоРазрешительныхДокументов = КоличествоЗаписейВСписке("СписокРазрешительныеДокументы");
	КоличествоУчредительныхДокументов = КоличествоЗаписейВСписке("СписокУчредительныеДокументы");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРазрешительныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОткрытьФорму("Справочник.ДокументыОрганизаций.Форма.ФормаЭлемента", Новый Структура("Владелец, Тип", Объект.Ссылка, "РазрешительныеДокументы"));
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУчредительныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОткрытьФорму("Справочник.ДокументыОрганизаций.Форма.ФормаЭлемента", Новый Структура("Владелец, Тип", Объект.Ссылка, "УчредительныеДокументы"));
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеФактАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		
		ПриИзмененииЮрАдресаОрганизации();
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(
			ЭтотОбъект,
			Элементы.КонтактнаяИнформацияПолеЮридическийАдресОрганизации);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресОрганизации" Тогда
		
		//ПриИзмененииФактАдресаОрганизации();
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(
			ЭтотОбъект,
			Элементы.КонтактнаяИнформацияПолеФактическийАдресОрганизации);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаОрганизации()

	//Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеФактАдресОрганизации) Тогда
	//	СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	//КонецЕсли;
	//
	//Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации) Тогда
	//	СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	//КонецЕсли;
	
	ДанныеСтрокиКИ = УправлениеКонтактнойИнформациейКлиентБП.ПолучитьСтрокуДополнительныхЗначений(
		ЭтотОбъект,
		Элементы.КонтактнаяИнформацияПолеЮридическийАдресОрганизации);
	
	Если ДанныеСтрокиКИ <> Неопределено Тогда
	
		ЗначенияПолей = ДанныеСтрокиКИ.ЗначенияПолей;
		//УстановитьКодРосстатаПоАдресу(ЗначенияПолей);
				
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации") Тогда
		
		Если ВыбранноеЗначение.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации") Тогда
		
			УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
				ЭтотОбъект,
				ВыбранноеЗначение.ИсторияИзмененийАдреса,
				Элементы.КонтактнаяИнформацияПолеЮридическийАдресОрганизации, ВыбранноеЗначение.Вид);
			
		ИначеЕсли ВыбранноеЗначение.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактическийАдресОрганизации") Тогда
			
			УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
				ЭтотОбъект,
				ВыбранноеЗначение.ИсторияИзмененийАдреса,
				Элементы.КонтактнаяИнформацияПолеФактическийАдресОрганизации, ВыбранноеЗначение.Вид);
				
		КонецЕсли;
		
		ПриИзмененииЮрАдресаОрганизации();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	// Группа Адрес и телефоны
	
	ДоступностьКонтактнойИнформации = НЕ Форма.ТолькоПросмотр;
	
	// Группа подписи
	Элементы.Руководитель.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.РуководительДолжность.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.ГлавныйБухгалтер.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.ГлавныйБухгалтерДолжность.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	
	ЭлементыФизическоеЛицо = Новый Массив;
	ЭлементыЮридическоеЛицо = Новый Массив;
	
	ЭлементыФизическоеЛицо.Добавить(Элементы.ГруппаДанныеФизическогоЛица);

	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаУчредители);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаБанковскиеСчета);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаУчредительныеДокументыОрганизаций);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаРазрешительныеДокументыОрганизаций);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаДополнительнаяИнформация);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.Деятельность);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаВидОрганизации);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаИндексыСПАРКРиски);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаОГРНОКАТО);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаМРП);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаОГРН);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаОсновнойБанковскийСчет);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ГруппаНалоговаяРуководители);
	ЭлементыЮридическоеЛицо.Добавить(Элементы.ЗаполнитьРеквизитыПоИНН);
	
	Для Каждого Элемент Из ЭлементыФизическоеЛицо Цикл
		Элемент.Видимость = НЕ Объект.ЮрЛицо;
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыЮридическоеЛицо Цикл
		Элемент.Видимость = Объект.ЮрЛицо;
	КонецЦикла;
	
КонецПроцедуры