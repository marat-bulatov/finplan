
Функция ПолучитьСтруктуруДанных(НачалоПериода, ОкончаниеПериода, НаименованиеПодразделения = "")
	
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	//|	СписаниеСРасчетногоСчета.Заявка КАК Заявка,
	//|	СписаниеСРасчетногоСчета.Заявка.Сводная КАК ЗаявкаСводная,
	//|	ПодчиненнаяЗаявка.Ссылка КАК ПодчиненнаяЗаявка,
	//|	ПодчиненнаяЗаявка.НачБаза КАК НачБаза,
	//|	ПодчиненнаяЗаявка.Сумма КАК Сумма,
	//|	ПодчиненнаяЗаявка.СуммаНДС КАК СуммаНДС,
	//|	ПодчиненнаяЗаявка.Валюта КАК Валюта
	//|ПОМЕСТИТЬ ВТ_СписанияПодчиненныеЗаявки
	//|ИЗ
	//|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка КАК ПодчиненнаяЗаявка
	//|		ПО СписаниеСРасчетногоСчета.Заявка = ПодчиненнаяЗаявка.РодительскаяЗаявка
	//|			И (ПодчиненнаяЗаявка.РодительскаяЗаявка <> ЗНАЧЕНИЕ(Документ.Заявка.ПустаяСсылка))
	//|ГДЕ
	//|	СписаниеСРасчетногоСчета.Заявка.Сводная
	//|	И СписаниеСРасчетногоСчета.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	//|	И СписаниеСРасчетногоСчета.Ссылка.Проведен
	//|	И (&ПоПодразделениям = ЛОЖЬ
	//|			ИЛИ СписаниеСРасчетногоСчета.Ссылка.Организация.Подразделение В (&Подразделения))
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПривязкиДоговоровЦФУ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//|	МАКСИМУМ(ПривязкиДоговоровЦФУ.Период) КАК Период
	//|ПОМЕСТИТЬ ВТ_ПериодыПривязок
	//|ИЗ
	//|	РегистрСведений.ПривязкиДоговоровЦФУ КАК ПривязкиДоговоровЦФУ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПривязкиДоговоровЦФУ.ДоговорКонтрагента
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	//|	СписаниеСРасчетногоСчета.Заявка КАК Заявка,
	//|	СписаниеСРасчетногоСчета.Сумма КАК Сумма,
	//|	СписаниеСРасчетногоСчета.СуммаНДС КАК СуммаНДС,
	//|	СписаниеСРасчетногоСчета.Валюта КАК Валюта,
	//|	ПривязкиДоговоровЦФУ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//|	ПривязкиДоговоровЦФУ.ЦФУ КАК ЦФУ,
	//|	ПривязкиДоговоровЦФУ.Процент КАК Процент
	//|ПОМЕСТИТЬ ВТ_СписанияПривязкиЦФУ
	//|ИЗ
	//|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкиДоговоровЦФУ КАК ПривязкиДоговоровЦФУ
	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПривязок КАК ВТ_ПериодыПривязок
	//|			ПО ПривязкиДоговоровЦФУ.Период = ВТ_ПериодыПривязок.Период
	//|				И ПривязкиДоговоровЦФУ.ДоговорКонтрагента = ВТ_ПериодыПривязок.ДоговорКонтрагента
	//|		ПО СписаниеСРасчетногоСчета.Договор = ПривязкиДоговоровЦФУ.ДоговорКонтрагента
	//|ГДЕ
	//|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	//|	И СписаниеСРасчетногоСчета.Ссылка.Проведен
	//|	И (&ПоПодразделениям = ЛОЖЬ
	//|			ИЛИ СписаниеСРасчетногоСчета.Ссылка.Организация.Подразделение В (&Подразделения))
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_СписанияПривязкиЦФУ.Ссылка КАК Ссылка,
	//|	ВТ_СписанияПривязкиЦФУ.Заявка КАК Заявка,
	//|	ВТ_СписанияПривязкиЦФУ.Сумма КАК Сумма,
	//|	ВТ_СписанияПривязкиЦФУ.СуммаНДС КАК СуммаНДС,
	//|	ВТ_СписанияПривязкиЦФУ.Валюта КАК Валюта,
	//|	ВТ_СписанияПривязкиЦФУ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//|	ВТ_СписанияПривязкиЦФУ.ЦФУ КАК ЦФУ,
	//|	ВТ_СписанияПривязкиЦФУ.Процент КАК Процент,
	//|	ВТ_СписанияПодчиненныеЗаявки.ПодчиненнаяЗаявка КАК ПодчиненнаяЗаявка,
	//|	ВТ_СписанияПодчиненныеЗаявки.НачБаза КАК КодБазы,
	//|	ЕСТЬNULL(ВТ_СписанияПодчиненныеЗаявки.Сумма, 0) КАК СуммаПодчиненнойЗаявки,
	//|	ЕСТЬNULL(ВТ_СписанияПодчиненныеЗаявки.СуммаНДС, 0) КАК СуммаНДСПодчиненнойЗаявки,
	//|	ЕСТЬNULL(ВТ_СписанияПодчиненныеЗаявки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаПодчиненнойЗаявки
	//|ПОМЕСТИТЬ ВТ_ОбъединениеСписаний
	//|ИЗ
	//|	ВТ_СписанияПривязкиЦФУ КАК ВТ_СписанияПривязкиЦФУ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписанияПодчиненныеЗаявки КАК ВТ_СписанияПодчиненныеЗаявки
	//|		ПО ВТ_СписанияПривязкиЦФУ.Ссылка = ВТ_СписанияПодчиненныеЗаявки.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
	//|	НАЧАЛОПЕРИОДА(ПоступлениеНаРасчетныйСчет.Ссылка.Дата, ДЕНЬ) КАК ДатаОперации,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.Организация.НаименованиеСокращенное КАК НаименованиеОрганизации,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.Организация.ИНН КАК ОрганизацияИНН,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.Организация.КПП КАК ОрганизацияКПП,
	//|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчет.Ссылка.СчетОрганизации.Банк.Код, """") КАК БанкБИК,
	//|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчет.Ссылка.СчетОрганизации.НомерСчета, """") КАК БанковскийСчетНомерСчета,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.КатегорияОперации.Код КАК КатегорияОперацииКод,
	//|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчет.Ссылка.Плательщик.НаименованиеСокращенное, """") КАК КонтрагентНаименование,
	//|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчет.Ссылка.Плательщик.ИНН, """") КАК КонтрагентИНН,
	//|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчет.Ссылка.Плательщик.КПП, """") КАК КонтрагентКПП,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.СчетОрганизации.Банк.Код КАК КонтрагентБанкКод,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.СчетОрганизации.НомерСчета КАК КонтрагентНомерСчета,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.Сумма КАК СуммаПриход,
	//|	0 КАК СуммаРасход,
	//|	ПоступлениеНаРасчетныйСчет.СуммаНДС КАК СуммаНДС,
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.СтатьяДДС КАК СтатьяДДС,
	//|	ЗНАЧЕНИЕ(Документ.Заявка.Пустаяссылка) КАК ПодчиненнаяЗаявка,
	//|	0 КАК СуммаПодчиненнойЗаявки,
	//|	"""" КАК НомерЗаявки,
	//|	"""" КАК ПодчиненнаяЗаявкаНомерЗаявки,
	//|	"""" КАК КодБазы,
	//|	ЗНАЧЕНИЕ(Справочник.ЦФУ.ПустаяСсылка) КАК ЦФУ,
	//|	0 КАК Процент,
	//|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчет.Договор.Наименование, """") КАК НаименованиеДоговора,
	//|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК НазначениеПлатежа
	//|ПОМЕСТИТЬ ВТ_ДокументыИСуммы
	//|ИЗ
	//|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	//|ГДЕ
	//|	ПоступлениеНаРасчетныйСчет.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	//|	И ПоступлениеНаРасчетныйСчет.Ссылка.Проведен
	//|	И (&ПоПодразделениям = ЛОЖЬ
	//|			ИЛИ ПоступлениеНаРасчетныйСчет.Ссылка.Организация.Подразделение В (&Подразделения))
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ВТ_ОбъединениеСписаний.Ссылка,
	//|	НАЧАЛОПЕРИОДА(ВТ_ОбъединениеСписаний.Ссылка.Дата, ДЕНЬ),
	//|	ВТ_ОбъединениеСписаний.Ссылка.Организация.НаименованиеСокращенное,
	//|	ВТ_ОбъединениеСписаний.Ссылка.Организация.ИНН,
	//|	ВТ_ОбъединениеСписаний.Ссылка.Организация.КПП,
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.Ссылка.СчетОрганизации.Банк.Код, """"),
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.Ссылка.СчетОрганизации.НомерСчета, """"),
	//|	ВТ_ОбъединениеСписаний.Ссылка.КатегорияОперации.Код,
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.Ссылка.Получатель.НаименованиеСокращенное, """"),
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.Ссылка.Получатель.ИНН, """"),
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.Ссылка.Получатель.КПП, """"),
	//|	ВТ_ОбъединениеСписаний.Ссылка.СчетОрганизации.Банк.Код,
	//|	ВТ_ОбъединениеСписаний.Ссылка.СчетОрганизации.НомерСчета,
	//|	0,
	//|	ВЫБОР
	//|		КОГДА ВТ_ОбъединениеСписаний.ПодчиненнаяЗаявка ЕСТЬ NULL
	//|			ТОГДА ВТ_ОбъединениеСписаний.Сумма
	//|		ИНАЧЕ ЕСТЬNULL(ВТ_ОбъединениеСписаний.СуммаПодчиненнойЗаявки, 0)
	//|	КОНЕЦ,
	//|	ВТ_ОбъединениеСписаний.СуммаНДС,
	//|	ВТ_ОбъединениеСписаний.Ссылка.СтатьяДДС,
	//|	ВТ_ОбъединениеСписаний.ПодчиненнаяЗаявка,
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.СуммаПодчиненнойЗаявки, 0),
	//|	ВТ_ОбъединениеСписаний.Заявка.НомерЗаявки,
	//|	ВТ_ОбъединениеСписаний.ПодчиненнаяЗаявка.НомерЗаявки,
	//|	ВТ_ОбъединениеСписаний.КодБазы,
	//|	ВТ_ОбъединениеСписаний.ЦФУ,
	//|	ВТ_ОбъединениеСписаний.Процент,
	//|	ЕСТЬNULL(ВТ_ОбъединениеСписаний.ДоговорКонтрагента.Наименование, """"),
	//|	ВТ_ОбъединениеСписаний.Ссылка.НазначениеПлатежа
	//|ИЗ
	//|	ВТ_ОбъединениеСписаний КАК ВТ_ОбъединениеСписаний
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_ДокументыИСуммы.ДатаОперации КАК ДатаОперации,
	//|	ВТ_ДокументыИСуммы.НаименованиеОрганизации КАК НаименованиеОрганизации,
	//|	ВТ_ДокументыИСуммы.ОрганизацияИНН КАК ОрганизацияИНН,
	//|	ВТ_ДокументыИСуммы.ОрганизацияКПП КАК ОрганизацияКПП,
	//|	ВТ_ДокументыИСуммы.БанкБИК КАК БанкБИК,
	//|	ВТ_ДокументыИСуммы.БанковскийСчетНомерСчета КАК БанковскийСчетНомерСчета,
	//|	ВТ_ДокументыИСуммы.КатегорияОперацииКод КАК КатегорияОперацииКод,
	//|	ВТ_ДокументыИСуммы.КонтрагентНаименование КАК КонтрагентНаименование,
	//|	ВТ_ДокументыИСуммы.КонтрагентИНН КАК КонтрагентИНН,
	//|	ВТ_ДокументыИСуммы.КонтрагентКПП КАК КонтрагентКПП,
	//|	ВТ_ДокументыИСуммы.КонтрагентБанкКод КАК КонтрагентБанкКод,
	//|	ВТ_ДокументыИСуммы.КонтрагентНомерСчета КАК КонтрагентНомерСчета,
	//|	ЕСТЬNULL(ВТ_ДокументыИСуммы.СуммаПриход, 0) КАК СуммаПриход,
	//|	ЕСТЬNULL(ВТ_ДокументыИСуммы.СуммаРасход, 0) КАК СуммаРасход,
	//|	ЕСТЬNULL(ВТ_ДокументыИСуммы.СуммаНДС, 0) КАК СуммаНДС,
	//|	ВТ_ДокументыИСуммы.СтатьяДДС КАК СтатьяДДС,
	//|	ВТ_ДокументыИСуммы.НомерЗаявки КАК НомерЗаявки,
	//|	ВТ_ДокументыИСуммы.ПодчиненнаяЗаявкаНомерЗаявки КАК ПодчиненнаяЗаявкаНомерЗаявки,
	//|	ВТ_ДокументыИСуммы.КодБазы КАК КодБазы,
	//|	ВТ_ДокументыИСуммы.Документ КАК ДокументДвижения,
	//|	ВЫБОР
	//|		КОГДА ВТ_ДокументыИСуммы.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	//|			ТОГДА """"
	//|		ИНАЧЕ ЕСТЬNULL(ВТ_ДокументыИСуммы.ЦФУ.Код, """")
	//|	КОНЕЦ КАК КодЦФУРаспределения,
	//|	ВЫБОР
	//|		КОГДА ВТ_ДокументыИСуммы.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	//|			ТОГДА 0
	//|		ИНАЧЕ ЕСТЬNULL(ВТ_ДокументыИСуммы.Процент, 0)
	//|	КОНЕЦ КАК ПроцентРаспределения,
	//|	ВТ_ДокументыИСуммы.НаименованиеДоговора КАК НаименованиеДоговора,
	//|	ВТ_ДокументыИСуммы.НазначениеПлатежа КАК НазначениеПлатежа,
	//|	ВЫБОР
	//|		КОГДА ВТ_ДокументыИСуммы.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	//|			ТОГДА ПоступлениеНаРасчетныйСчетУправленческийУчет.Имя
	//|		ИНАЧЕ СписаниеСРасчетногоСчетаУправленческийУчет.Имя
	//|	КОНЕЦ КАК ТаблицаИмя,
	//|	ЕСТЬNULL(ВЫБОР
	//|			КОГДА ВТ_ДокументыИСуммы.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	//|				ТОГДА ПоступлениеНаРасчетныйСчетУправленческийУчет.Значение
	//|			ИНАЧЕ ВЫБОР
	//|					КОГДА СписаниеСРасчетногоСчетаУправленческийУчет.Имя = ""ВалютнаяСумма""
	//|							И ВТ_ДокументыИСуммы.ПодчиненнаяЗаявка <> ЗНАЧЕНИЕ(Документ.Заявка.ПустаяСсылка)
	//|						ТОГДА ВТ_ДокументыИСуммы.СуммаРасход
	//|					ИНАЧЕ СписаниеСРасчетногоСчетаУправленческийУчет.Значение
	//|				КОНЕЦ
	//|		КОНЕЦ, """") КАК ТаблицаЗначение,
	//|	ЕСТЬNULL(ВЫБОР
	//|			КОГДА ВТ_ДокументыИСуммы.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	//|				ТОГДА ПоступлениеНаРасчетныйСчетУправленческийУчет.ВидПараметра.ТипСтрокой
	//|			ИНАЧЕ СписаниеСРасчетногоСчетаУправленческийУчет.ВидПараметра.ТипСтрокой
	//|		КОНЕЦ, 0) КАК ТаблицаТипЗначение
	//|ИЗ
	//|	ВТ_ДокументыИСуммы КАК ВТ_ДокументыИСуммы
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.УправленческийУчет КАК ПоступлениеНаРасчетныйСчетУправленческийУчет
	//|		ПО ВТ_ДокументыИСуммы.Документ = ПоступлениеНаРасчетныйСчетУправленческийУчет.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.УправленческийУчет КАК СписаниеСРасчетногоСчетаУправленческийУчет
	//|		ПО ВТ_ДокументыИСуммы.Документ = СписаниеСРасчетногоСчетаУправленческийУчет.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДатаОперации,
	//|	НаименованиеОрганизации,
	//|	БанкБИК,
	//|	КонтрагентНаименование
	//|ИТОГИ ПО
	//|	ДатаОперации,
	//|	НаименованиеОрганизации,
	//|	ОрганизацияИНН,
	//|	ОрганизацияКПП,
	//|	БанкБИК,
	//|	БанковскийСчетНомерСчета,
	//|	КатегорияОперацииКод,
	//|	КонтрагентНаименование,
	//|	КонтрагентИНН,
	//|	КонтрагентКПП,
	//|	КонтрагентБанкКод,
	//|	КонтрагентНомерСчета,
	//|	ДокументДвижения,
	//|	СуммаПриход,
	//|	СуммаРасход,
	//|	СуммаНДС,
	//|	СтатьяДДС,
	//|	КодЦФУРаспределения,
	//|	ПроцентРаспределения,
	//|	НаименованиеДоговора,
	//|	НазначениеПлатежа,
	//|	НомерЗаявки,
	//|	ПодчиненнаяЗаявкаНомерЗаявки,
	//|	КодБазы";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	СписокПодразделений = Новый Массив;
	
	Если НаименованиеПодразделения = "" Тогда
		Запрос.УстановитьПараметр("ПоПодразделениям", Ложь);
		Запрос.УстановитьПараметр("Подразделения", СписокПодразделений);
		
	Иначе
		Запрос.УстановитьПараметр("ПоПодразделениям", Истина);
		
		СписокПодразделений = Новый Массив;
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоНаименованию(НаименованиеПодразделения, Истина));
		
		Если НаименованиеПодразделения = "Mercury" Тогда 
			СписокПодразделений.Добавить(Справочники.Подразделения.ПустаяСсылка());
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Подразделения", СписокПодразделений);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("Код", "00001");
	СтруктураВыгрузки.Вставить("Имя", "Движения по р/сч");
	СтруктураВыгрузки.Вставить("Данные", Новый Массив);
	
	ВыборкаДатаОперации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВыборкаДатаОперации.Следующий() Цикл
//	
//		ВыборкаНаименованиеОрганизации = ВыборкаДатаОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока ВыборкаНаименованиеОрганизации.Следующий() Цикл
//			
//			ВыборкаОрганизацияИНН = ВыборкаНаименованиеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			Пока ВыборкаОрганизацияИНН.Следующий() Цикл
//				
//				ВыборкаОрганизацияКПП = ВыборкаОрганизацияИНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//				Пока ВыборкаОрганизацияКПП.Следующий() Цикл
//					
//					ВыборкаБанкБИК = ВыборкаОрганизацияКПП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//					Пока ВыборкаБанкБИК.Следующий() Цикл
//	
//						ВыборкаБанковскийСчетНомерСчета = ВыборкаБанкБИК.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//						Пока ВыборкаБанковскийСчетНомерСчета.Следующий() Цикл
//	
//							ВыборкаКатегорияОперацииКод = ВыборкаБанковскийСчетНомерСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//							Пока ВыборкаКатегорияОперацииКод.Следующий() Цикл
//								
//								СтруктураДанные = Новый Структура;
//								СтруктураДанные.Вставить("ДатаОперации", ВыборкаБанковскийСчетНомерСчета.ДатаОперации);
//								СтруктураДанные.Вставить("НаименованиеОрганизации", СокрЛП(ВыборкаБанковскийСчетНомерСчета.НаименованиеОрганизации));
//								СтруктураДанные.Вставить("ИНН", СокрЛП(ВыборкаБанковскийСчетНомерСчета.ОрганизацияИНН));
//								СтруктураДанные.Вставить("КПП", СокрЛП(ВыборкаБанковскийСчетНомерСчета.ОрганизацияКПП));
//								СтруктураДанные.Вставить("БИКБанка", ВыборкаБанковскийСчетНомерСчета.БанкБИК);
//								СтруктураДанные.Вставить("НомерСчета", СокрЛП(ВыборкаБанковскийСчетНомерСчета.БанковскийСчетНомерСчета));
//								СтруктураДанные.Вставить("КодКатегорииОперации", СокрЛП(ВыборкаКатегорияОперацииКод.КатегорияОперацииКод));
//								СтруктураДанные.Вставить("Выписки", Новый Массив);
//								
//								СтруктураВыгрузки.Данные.Добавить(СтруктураДанные);
//	
//								ВыборкаКонтрагентНаименование = ВыборкаКатегорияОперацииКод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//								Пока ВыборкаКонтрагентНаименование.Следующий() Цикл
//	
//									ВыборкаКонтрагентИНН = ВыборкаКонтрагентНаименование.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//									Пока ВыборкаКонтрагентИНН.Следующий() Цикл
//	
//										ВыборкаКонтрагентКПП = ВыборкаКонтрагентИНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//										Пока ВыборкаКонтрагентКПП.Следующий() Цикл
//	
//											ВыборкаКонтрагентБанкКод = ВыборкаКонтрагентКПП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//											Пока ВыборкаКонтрагентБанкКод.Следующий() Цикл
//	
//												ВыборкаКонтрагентНомерСчета = ВыборкаКонтрагентБанкКод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//												Пока ВыборкаКонтрагентНомерСчета.Следующий() Цикл
//													
//													ВыборкаДокументДвижения = ВыборкаКонтрагентНомерСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//													Пока ВыборкаДокументДвижения.Следующий() Цикл
//														
//														ВыборкаСуммаПриход = ВыборкаДокументДвижения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//														Пока ВыборкаСуммаПриход.Следующий() Цикл
//															
//															ВыборкаСуммаРасход = ВыборкаСуммаПриход.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//															Пока ВыборкаСуммаРасход.Следующий() Цикл
//																
//																ВыборкаСуммаНДС = ВыборкаСуммаРасход.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																Пока ВыборкаСуммаНДС.Следующий() Цикл
//																	
//																	ВыборкаСтатьяДДС = ВыборкаСуммаНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																	Пока ВыборкаСтатьяДДС.Следующий() Цикл
//																		
//																		ВыборкаКодЦФУРаспределения = ВыборкаСтатьяДДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																		Пока ВыборкаКодЦФУРаспределения.Следующий() Цикл
//																			
//																			ВыборкаПроцентРаспределения = ВыборкаКодЦФУРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																			Пока ВыборкаПроцентРаспределения.Следующий() Цикл
//																				
//																				ВыборкаНаименованиеДоговора = ВыборкаПроцентРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																				Пока ВыборкаНаименованиеДоговора.Следующий() Цикл
//																					
//																					ВыборкаНазначениеПлатежа = ВыборкаНаименованиеДоговора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																					Пока ВыборкаНазначениеПлатежа.Следующий() Цикл
//																						
//																						ВыборкаНомерЗаявки = ВыборкаНазначениеПлатежа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																						Пока ВыборкаНомерЗаявки.Следующий() Цикл
//																							
//																							ВыборкаНомерПодчиненнойЗаявки = ВыборкаНомерЗаявки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																							Пока ВыборкаНомерПодчиненнойЗаявки.Следующий() Цикл
//																								
//																								ВыборкаКодБазы = ВыборкаНомерПодчиненнойЗаявки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//																								Пока ВыборкаКодБазы.Следующий() Цикл
//																									
//																									СтруктураСтрокаВыписки = Новый Структура;
//																									СтруктураДанные.Выписки.Добавить(СтруктураСтрокаВыписки);
//																									
//																									СтруктураСтрокаВыписки.Вставить("КодКатегорииОперации", ВыборкаКодБазы.КатегорияОперацииКод);
//																									СтруктураСтрокаВыписки.Вставить("КлиентНаименование", 	СокрЛП(ВыборкаКодБазы.КонтрагентНаименование));
//																									СтруктураСтрокаВыписки.Вставить("КлиентИНН", 			СокрЛП(ВыборкаКодБазы.КонтрагентИНН));
//																									СтруктураСтрокаВыписки.Вставить("КлиентКПП", 			СокрЛП(ВыборкаКодБазы.КонтрагентКПП));
//																									СтруктураСтрокаВыписки.Вставить("КлиентБИКБанка", 		СокрЛП(ВыборкаКодБазы.КонтрагентБанкКод));
//																									СтруктураСтрокаВыписки.Вставить("КлиентНомерСчета", 	СокрЛП(ВыборкаКодБазы.КонтрагентНомерСчета));
//																									СтруктураСтрокаВыписки.Вставить("СуммаПриход", 			ВыборкаКодБазы.СуммаПриход);
//																									СтруктураСтрокаВыписки.Вставить("СуммаРасход", 			ВыборкаКодБазы.СуммаРасход);
//																									СтруктураСтрокаВыписки.Вставить("СуммаНДС", 			ВыборкаКодБазы.СуммаНДС);
//																									СтруктураСтрокаВыписки.Вставить("ТипДвижения", 			СокрЛП(ВыборкаКодБазы.СтатьяДДС));
//																									СтруктураСтрокаВыписки.Вставить("НомерЗаявки", 			?(НЕ ЗначениеЗаполнено(ВыборкаКодБазы.ПодчиненнаяЗаявкаНомерЗаявки), СокрЛП(ВыборкаКодБазы.НомерЗаявки), СокрЛП(ВыборкаКодБазы.ПодчиненнаяЗаявкаНомерЗаявки)));
//																									СтруктураСтрокаВыписки.Вставить("КодБазы", 				СокрЛП(ВыборкаКодБазы.КодБазы));
//																									СтруктураСтрокаВыписки.Вставить("КодЦФУРаспределения", 	ВыборкаКодБазы.КодЦФУРаспределения);
//																									СтруктураСтрокаВыписки.Вставить("ПроцентРаспределения",	ВыборкаКодБазы.ПроцентРаспределения);
//																									СтруктураСтрокаВыписки.Вставить("НаименованиеДоговора",	ВыборкаКодБазы.НаименованиеДоговора);
//																									СтруктураСтрокаВыписки.Вставить("НазначениеПлатежа",	ВыборкаКодБазы.НазначениеПлатежа);
//																									
//																									Если СокрЛП(СтруктураСтрокаВыписки.КодБазы) = "GT" Тогда
//																										
//																										МассивДанныхКомандировок = Новый Массив;
//																										
//																										Соединение = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("GlobalTravelling");
//																										Для Каждого СтрокаТЗ Из ЗапросыЧерезАДО.ВыполнитьЗапросАДО(Соединение, "dbo.comp_PaymentByCFU '" + СтруктураСтрокаВыписки.НомерЗаявки + "'") Цикл
//																											
//																											СтруктураКомандировки = Новый Структура;
//																											
//																											СтруктураКомандировки.Вставить("КодБренда", СтрокаТЗ.Brand);
//																											СтруктураКомандировки.Вставить("НаименованиеВалюты", СтрокаТЗ.Currency);
//																											СтруктураКомандировки.Вставить("ВалютнаяСумма", СтрокаТЗ.Amount);
//																											СтруктураКомандировки.Вставить("КодВидаКомандировочных", СтрокаТЗ.ExpenseType);
//																											СтруктураКомандировки.Вставить("КодКатегорииОперации", СтрокаТЗ.Category);
//																											СтруктураКомандировки.Вставить("Комментарий", СтрокаТЗ.Comment);
//																											СтруктураКомандировки.Вставить("НомерКомандировки", СтрокаТЗ.TripNum);
//																											СтруктураКомандировки.Вставить("КодСезона", СтрокаТЗ.SeasonStart);
//																											СтруктураКомандировки.Вставить("КодЦФУ", СтрокаТЗ.CFU);
//																											СтруктураКомандировки.Вставить("КодЦелиПоездки", СтрокаТЗ.sqlrefCode);
//																											
//																											МассивДанныхКомандировок.Добавить(СтруктураКомандировки);
//																											
//																										КонецЦикла;
//																										
//																										СтруктураСтрокаВыписки.Вставить("ДанныеКомандировок", МассивДанныхКомандировок);
//																										
//																									КонецЕсли;
//																									
//																									СтруктураСтрокаВыписки.Вставить("Параметры", Новый Массив);
//																									
//																									
//																									// Обработка параметров
//																									ВыборкаДетальныеЗаписи = ВыборкаКодБазы.Выбрать();
//																									
//																									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//																										
//																										СтруктураДанныеПараметры = Новый Структура;
//																										СтруктураДанныеПараметры.Вставить("Имя", ВыборкаДетальныеЗаписи.ТаблицаИмя);
//																										СтруктураДанныеПараметры.Вставить("ТипЗначения", "Неопределено");
//																										СтруктураДанныеПараметры.Вставить("Значение", "");
//																										
//																										Значение = ВыборкаДетальныеЗаписи.ТаблицаЗначение;
//																										
//																										Если ТипЗнч(Значение) = Тип("Строка") Тогда
//																											СтруктураДанныеПараметры.Вставить("Значение", СокрЛП(СтрПолучитьСтроку(Значение, 1)));
//																											
//																										ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
//																											СтруктураДанныеПараметры.Вставить("Значение", Значение);
//																											
//																										ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
//																											СтруктураДанныеПараметры.Вставить("Значение", ?(Значение, "Да", "Нет"));
//																											
//																										ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ЦФУ")
//																											ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.Брэнды")
//																											ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.ЗначенияСубконтоУправленческогоУчета") Тогда
//																											
//																											СтруктураДанныеПараметры.Вставить("Значение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "Код"));	
//																											
//																										ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Валюты") Тогда
//																											
//																											КодВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "Код");
//																											Если КодВалюты = "643" Тогда
//																												КодВалюты = "810";
//																											КонецЕсли;
//																											
//																											СтруктураДанныеПараметры.Вставить("Значение", КодВалюты);
//																											
//																										ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
//																											
//																											ЗапросДанных = Новый Запрос("ВЫБРАТЬ
//																											|	БанковскиеСчета.НомерСчета КАК НомерСчета,
//																											|	БанковскиеСчета.Банк.Код КАК БИК
//																											|ИЗ
//																											|	Справочник.БанковскиеСчета КАК БанковскиеСчета
//																											|ГДЕ
//																											|	БанковскиеСчета.Ссылка = &Ссылка");
//																											
//																											ЗапросДанных.УстановитьПараметр("Ссылка", Значение);
//																											ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
//																											Если ВыборкаДанных.Следующий() Тогда
//																												СтруктураДанныеПараметры.Вставить("Значение", СокрЛП(ВыборкаДанных.НомерСчета) + "@" + СокрЛП(ВыборкаДанных.БИК));
//																												СтруктураДанныеПараметры.Вставить("ТипЗначения", "СправочникСсылка.Счета");
//																											КонецЕсли;
//																											
//																										Иначе
//																											
//																											СтруктураДанныеПараметры.Вставить("Значение", "");
//																											
//																										КонецЕсли;
//																										
//																										СтруктураСтрокаВыписки.Параметры.Добавить(СтруктураДанныеПараметры);
//																										
//																									КонецЦикла;
//																								КонецЦикла;
//																							КонецЦикла;
//																						КонецЦикла;
//																					КонецЦикла;	
//																				КонецЦикла;
//																			КонецЦикла;	
//																		КонецЦикла;
//																	КонецЦикла;
//																КонецЦикла;
//															КонецЦикла;
//														КонецЦикла;
//													КонецЦикла;
//												КонецЦикла;
//											КонецЦикла;
//										КонецЦикла;
//									КонецЦикла;
//								КонецЦикла;
//							КонецЦикла;
//						КонецЦикла;
//					КонецЦикла;
//				КонецЦикла;
//			КонецЦикла;
//		КонецЦикла;
//	КонецЦикла;
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

Функция Get(FromDate, ToDate, SubdivisionName)
	
	СтруктураВыгрузки = ПолучитьСтруктуруДанных(НачалоДня(FromDate), КонецДня(ToDate), SubdivisionName);
	
	ТипОбъектаДокументы = ФабрикаXDTO.Тип("http://www.mercury.org", "Документы");
	ТипОбъектаДанные = ФабрикаXDTO.Тип("http://www.mercury.org", "Данные");
	ТипОбъектаПараметры = ФабрикаXDTO.Тип("http://www.mercury.org", "Параметры");
	ТипОбъектаВыписки = ФабрикаXDTO.Тип("http://www.mercury.org", "Выписки");
	ТипОбъектаДанныеКомандировок = ФабрикаXDTO.Тип("http://www.mercury.org", "ДанныеКомандировок");
	
	ЗначениеДокументы = ФабрикаXDTO.Создать(ТипОбъектаДокументы);
	ЗначениеДокументы.Код = "00001";
	ЗначениеДокументы.Имя = "Движения по р/сч";
	
	Для Каждого ЭлементМассиваДанные Из СтруктураВыгрузки.Данные Цикл
		
		ЗначениеДанные = ФабрикаXDTO.Создать(ТипОбъектаДанные);
		ЗаполнитьЗначенияСвойств(ЗначениеДанные, ЭлементМассиваДанные);
		
		Для Каждого ЭлементМассиваСтрокаВыписки Из ЭлементМассиваДанные.Выписки Цикл
			
			ЗначениеВыписка = ФабрикаXDTO.Создать(ТипОбъектаВыписки);
			ЗаполнитьЗначенияСвойств(ЗначениеВыписка, ЭлементМассиваСтрокаВыписки);
			
			Если ЭлементМассиваСтрокаВыписки.Свойство("ДанныеКомандировок") Тогда
				
				Для Каждого ЭлементДанныеКомандировки Из ЭлементМассиваСтрокаВыписки.ДанныеКомандировок Цикл
					
					ДанныеКомандировки = ФабрикаXDTO.Создать(ТипОбъектаДанныеКомандировок);
					ЗаполнитьЗначенияСвойств(ДанныеКомандировки, ЭлементДанныеКомандировки);
					ЗначениеВыписка.ДанныеКомандировок.Добавить(ДанныеКомандировки);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ЭлементМассиваПараметры Из ЭлементМассиваСтрокаВыписки.Параметры Цикл
				
				ЗначениеПараметр = ФабрикаXDTO.Создать(ТипОбъектаПараметры);
				ЗначениеПараметр.Имя = ЭлементМассиваПараметры.Имя;
				ЗначениеПараметр.Значение = ?(ЭлементМассиваПараметры.Значение = Неопределено, "", ЭлементМассиваПараметры.Значение);
				ЗначениеПараметр.ТипЗначения = ЭлементМассиваПараметры.ТипЗначения;
				
				ЗначениеВыписка.ПараметрыУправленческогоУчета.Добавить(ЗначениеПараметр);
				
			КонецЦикла;
			
			ЗначениеДанные.Выписки.Добавить(ЗначениеВыписка);
			
		КонецЦикла;
		
		ЗначениеДокументы.Данные.Добавить(ЗначениеДанные);
			
	КонецЦикла;
	
	Возврат ЗначениеДокументы;
	
КонецФункции

