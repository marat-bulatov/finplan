&НаКлиенте
Процедура ПланированиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьСтрокуРегистра(Элемент.ТекущаяСтрока);
	КонецЕсли;

	ПеренумероватьСтрокиНаСервере();
		
КонецПроцедуры


&НаСервере
Процедура ОбновитьСтрокуРегистра(ИдентификаторСтрокиТаблицы)
	
	СтрокаТаблицы = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	ЗаписьРегистра = РегистрыСведений.ТабличнаяЧастьФинансовогоПлана.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаТаблицы);
	ЗаписьРегистра.ФинансовыйПлан = Объект.Ссылка;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуРегистра(ИдентификаторСтрокиТаблицы)
	
	СтрокаТаблицы = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	
	ЗаписьРегистра = РегистрыСведений.ТабличнаяЧастьФинансовогоПлана.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.GUIDСтрокиФинансовогоПлана = СтрокаТаблицы.GUIDСтрокиФинансовогоПлана;
	ЗаписьРегистра.ФинансовыйПлан = Объект.Ссылка;
	ЗаписьРегистра.Удалить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока И ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
		ТекущиеДанные.АвторСтроки = ПользователиКлиентСервер.ТекущийПользователь();
		ТекущиеДанные.НомерСтроки = Элемент.ТекущаяСтрока + 1;
	КонецЕсли;
	
	ПеренумероватьСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабличнаяЧастьФинансовогоПлана.ФинансовыйПлан КАК ФинансовыйПлан,
		|	ТабличнаяЧастьФинансовогоПлана.GUIDСтрокиФинансовогоПлана КАК GUIDСтрокиФинансовогоПлана,
		|	ТабличнаяЧастьФинансовогоПлана.Организация КАК Организация,
		|	ТабличнаяЧастьФинансовогоПлана.СчетОрганизации КАК СчетОрганизации,
		|	ТабличнаяЧастьФинансовогоПлана.СтатьяДДС КАК СтатьяДДС,
		|	ТабличнаяЧастьФинансовогоПлана.Контрагент КАК Контрагент,
		|	ТабличнаяЧастьФинансовогоПлана.СчетКонтрагента КАК СчетКонтрагента,
		|	ТабличнаяЧастьФинансовогоПлана.НазначениеПлатежа КАК НазначениеПлатежа,
		|	ТабличнаяЧастьФинансовогоПлана.Валюта КАК Валюта,
		|	ТабличнаяЧастьФинансовогоПлана.ВалютаЗаявки КАК ВалютаЗаявки,
		|	ТабличнаяЧастьФинансовогоПлана.Сумма КАК Сумма,
		|	ТабличнаяЧастьФинансовогоПлана.СуммаНДС КАК СуммаНДС,
		|	ТабличнаяЧастьФинансовогоПлана.ВалютнаяСумма КАК ВалютнаяСумма,
		|	ТабличнаяЧастьФинансовогоПлана.КатегорияОперации КАК КатегорияОперации,
		|	ТабличнаяЧастьФинансовогоПлана.Процент КАК Процент,
		|	ТабличнаяЧастьФинансовогоПлана.КурсОплатыФиксированный КАК КурсОплатыФиксированный,
		|	ТабличнаяЧастьФинансовогоПлана.Договор КАК Договор,
		|	ТабличнаяЧастьФинансовогоПлана.ОтменаПлатежа КАК ОтменаПлатежа,
		|	ТабличнаяЧастьФинансовогоПлана.ОплатаВыполнена КАК ОплатаВыполнена,
		|	ТабличнаяЧастьФинансовогоПлана.АвторСтроки КАК АвторСтроки,
		|	ТабличнаяЧастьФинансовогоПлана.Комментарий КАК Комментарий,
		|	ТабличнаяЧастьФинансовогоПлана.НомерЗаявки КАК НомерЗаявки,
		|	ТабличнаяЧастьФинансовогоПлана.IDЗаявки КАК IDЗаявки,
		|	ТабличнаяЧастьФинансовогоПлана.ЗаявкаВзятаВРаботу КАК ЗаявкаВзятаВРаботу
		|ИЗ
		|	РегистрСведений.ТабличнаяЧастьФинансовогоПлана КАК ТабличнаяЧастьФинансовогоПлана
		|ГДЕ
		|	ТабличнаяЧастьФинансовогоПлана.ФинансовыйПлан = &ФинансовыйПлан";
	
	Запрос.УстановитьПараметр("ФинансовыйПлан", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	ТаблицаДокумента.Очистить();
	т = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		т = т + 1;
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.НомерСтроки = т;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПередУдалением(Элемент, Отказ)
	Для Каждого СтрокаТЗ Из Элемент.ВыделенныеСтроки Цикл
		УдалитьСтрокуРегистра(СтрокаТЗ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиНаСервере()
	
	т = 0;
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		т = т + 1;
		СтрокаТЧ.НомерСтроки = т;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПослеУдаления(Элемент)
	ПеренумероватьСтрокиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Перед редактированием необходимо записать Финансовый план!");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборЗаявок(Команда)
		
	ОткрытьФорму("ОбщаяФорма.ЗагрузкаЗаявок",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ПодборЗаявокОкончание", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаявокОкончание(Результат, ДополнительныеПараметы) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПодборЗаявокОкончаниеСервер(Результат);
		//ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборЗаявокОкончаниеСервер(Результат)
	
	МассивСтрокНаОбработку = Новый Массив;
	
	// Проверяем - есть ли в документе такие заявки
	
	МассивНомеровЗаявок = Новый Массив;
	Для Каждого Элемент Из Результат Цикл
		МассивНомеровЗаявок.Добавить(Элемент.НомерЗаявки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧастьФинансовогоПлана.ФинансовыйПлан КАК ФинансовыйПлан,
	|	ТабличнаяЧастьФинансовогоПлана.НомерЗаявки КАК НомерЗаявки
	|ИЗ
	|	РегистрСведений.ТабличнаяЧастьФинансовогоПлана КАК ТабличнаяЧастьФинансовогоПлана
	|ГДЕ
	|	ТабличнаяЧастьФинансовогоПлана.НомерЗаявки В(&НомераЗаявок)";
	
	Запрос.УстановитьПараметр("НомераЗаявок", МассивНомеровЗаявок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоНомерамИспользованныхЗаявок = РезультатЗапроса.Выбрать();
	
	Для Каждого ИнформацияОЗаявке Из Результат Цикл
		
		Если ТаблицаДокумента.НайтиСтроки(Новый Структура("НомерЗаявки", ИнформацияОЗаявке.НомерЗаявки)).Количество() > 0 Тогда
			Сообщить("Заявка " + ИнформацияОЗаявке.НомерЗаявки + " не перенесена, дубль");
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоНомерамИспользованныхЗаявок.Сбросить();
		Если ВыборкаПоНомерамИспользованныхЗаявок.НайтиСледующий(Новый Структура("НомерЗаявки", ИнформацияОЗаявке.НомерЗаявки)) Тогда
			Сообщить("Заявка " + ИнформацияОЗаявке.НомерЗаявки + " не перенесена, она уже присутствует в документе " + ВыборкаПоНомерамИспользованныхЗаявок.ФинансовыйПлан);
			Продолжить;
		КонецЕсли;
		
		// РаботаСЗаявкамиСервер.SQL_ЗаблокироватьЗаявку(СоединениеАДО, ИнформацияОЗаявке.IDЗаявки);
		
		GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
		
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.НомерСтроки = ТаблицаДокумента.Количество();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИнформацияОЗаявке);
		НоваяСтрока.АвторСтроки = ПользователиКлиентСервер.ТекущийПользователь();
		НоваяСтрока.ВалютаЗаявки = ИнформацияОЗаявке.Валюта;
		НоваяСтрока.Валюта = ИнформацияОЗаявке.ВалютаОплаты;
		
		Если НоваяСтрока.ВалютаЗаявки = НоваяСтрока.Валюта И НоваяСтрока.ВалютаЗаявки = ПараметрыСеанса.ВалютаРегламентированногоУчета Тогда
			НоваяСтрока.Сумма = ?(ИнформацияОЗаявке.Сумма < 0, 0, ИнформацияОЗаявке.Сумма);
			НоваяСтрока.ВалютнаяСумма = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.ВалютнаяСумма = ?(ИнформацияОЗаявке.Сумма < 0, 0, ИнформацияОЗаявке.Сумма);

			Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", НоваяСтрока.ВалютнаяСумма, НоваяСтрока.ВалютаЗаявки, НоваяСтрока.Валюта, Объект.Дата, НоваяСтрока.КурсОплатыФиксированный, НоваяСтрока.Процент);
			НоваяСтрока.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
			
			Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", НоваяСтрока.СуммаНДС, НоваяСтрока.ВалютаЗаявки, НоваяСтрока.Валюта, Объект.Дата, НоваяСтрока.КурсОплатыФиксированный, НоваяСтрока.Процент);
			НоваяСтрока.СуммаНДС = РасчитатьВалютнуюСуммуСУсловиями(Данные);			
			
		КонецЕсли;
		
		НоваяСтрока.СтатьяДДС = Справочники.СтатьиДДС.Расход;
		НоваяСтрока.GUIDСтрокиФинансовогоПлана = GUIDСтрокиФинансовогоПлана;
		НоваяСтрока.ЗаявкаВзятаВРаботу = Истина;
		
		МассивУправленческогоУчета = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ИнформацияОЗаявке.ТаблицаУправленческогоУчета Цикл
			
			СтруктураУправленческогоУчета = Новый Структура("GUIDСтрокиФинансовогоПлана, Имя, Значение, Значение, ЗапретРедактирования, Необязательный, ВидПараметра, Формула");
			ЗаполнитьЗначенияСвойств(СтруктураУправленческогоУчета, СтрокаТЧ);
			СтруктураУправленческогоУчета.GUIDСтрокиФинансовогоПлана = GUIDСтрокиФинансовогоПлана;
			
			МассивУправленческогоУчета.Добавить(СтруктураУправленческогоУчета);
			
		КонецЦикла;
		
		НоваяСтрока.ХранилищеИнформацииУправленческогоУчета = Новый ХранилищеЗначения(МассивУправленческогоУчета);
		ОбновитьСтрокуРегистра(НоваяСтрока.ПолучитьИдентификатор());
		
		МассивСтрокНаОбработку.Добавить(НоваяСтрока);
		
	КонецЦикла;

	//ОбработатьСтрокиТаблицыПланирования(МассивСтрокНаОбработку, Результат);
	
КонецПроцедуры

&НаСервере
//Функция РасчитатьВалютнуюСуммуСУсловиями(Знач Сумма, Знач ВалютаИсходная, Знач ВалютаКонечная, Знач ДатаКурса, КурсФиксированный = 0, ПроцентНадбавкиКурса = 0)
Функция РасчитатьВалютнуюСуммуСУсловиями(Данные)
	Возврат РаботаСЗаявкамиСервер.РасчитатьВалютнуюСуммуСУсловиями(Данные);
КонецФункции


#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработатьСодержимоеТекущейСтроки(ИмяКолонки = Неопределено, ЭтоНоваяСтрока = Ложь)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, "", ЭтоНоваяСтрока);
	
	Если ИмяКолонки = "ПланированиеОплатаВыполнена" Тогда
		
	ИначеЕсли ИмяКолонки = "ПланированиеОрганизация" Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.СчетОрганизации) Тогда
			ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетОрганизации" Тогда

		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСтатьяДДС" Тогда	

		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеКонтрагент" Тогда

		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		ТекущиеДанные.СчетКонтрагента = "";
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, "ПланированиеКонтрагент", ЭтоНоваяСтрока);
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, "ПланированиеСчетОрганизации", ЭтоНоваяСтрока);

		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетКонтрагента" Тогда

		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеНазначениеПлатежа" Тогда

		
	ИначеЕсли ИмяКолонки = "ПланированиеВалютнаяСумма" Тогда

		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеКурсОплатыФиксированный" Тогда

		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеПроцент" Тогда

		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаОплаты" Тогда
		
		Если ТекущиеДанные.СтатьяДДС <> ПредопределенноеЗначение("Справочник.СтатьиДДС.Налог")
			И ТекущиеДанные.СтатьяДДС <> ПредопределенноеЗначение("Справочник.СтатьиДДС.Зарплата")
			И ТекущиеДанные.СтатьяДДС <> ПредопределенноеЗначение("Справочник.СтатьиДДС.ЗарплатаНаКК") Тогда
			
			ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
			
		Иначе
			ТекущиеДанные.СуммаНДС = 0;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаНДС" Тогда

	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработатьСодержимоеТекущейСтрокиНаСервере(ИдентификаторСтроки, ИмяКолонки = Неопределено, ЭтоНоваяСтрока = Ложь)
	
	СтрокаОбработки = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторСтроки);
		
	Если СтрокаОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНоваяСтрока Тогда
		СтрокаОбработки.АвторСтроки = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаОбработки.СтатьяДДС) Тогда
		СтрокаОбработки.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.Расход");
	КонецЕсли;
	
	Если ИмяКолонки = "ПланированиеОплатаВыполнена" Тогда
		// Обработка колонки "ОплатаВыполнена"
		
	ИначеЕсли ИмяКолонки = "ПланированиеОрганизация" Тогда
		// Обработка колонки "Организация"
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
		|	Организации.ОсновнойБанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация");
		
		Запрос.УстановитьПараметр("Организация", СтрокаОбработки.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СтрокаОбработки.СчетОрганизации = Выборка.ОсновнойБанковскийСчет;
		СтрокаОбработки.Валюта = Выборка.ВалютаДенежныхСредств;
		
		Если ЗначениеЗаполнено(СтрокаОбработки.Валюта) Тогда	
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ОрганизацииОсновныеБанковскиеСчета.БанковскийСчет КАК БанковскийСчет
			|ИЗ
			|	Справочник.Организации.ОсновныеБанковскиеСчета КАК ОрганизацииОсновныеБанковскиеСчета
			|ГДЕ
			|	ОрганизацииОсновныеБанковскиеСчета.Ссылка = &Организация
			|	И ОрганизацииОсновныеБанковскиеСчета.Валюта = &Валюта");
			
			Запрос.УстановитьПараметр("Организация", СтрокаОбработки.Организация);
			Запрос.УстановитьПараметр("Валюта", СтрокаОбработки.Валюта);
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				СтрокаОбработки.СчетОрганизации = Выборка.БанковскийСчет;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетОрганизации" Тогда
		// Обработка колонки "СчетОрганизации"
		
		ЗаполнитьЗначенияСвойств(СтрокаОбработки, ОпределениеВалют(СтрокаОбработки));
		
		Если ЗначениеЗаполнено(СтрокаОбработки.СтатьяДДС)
			И СтрокаОбработки.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.КомиссияБанка") Тогда
			
			СтрокаОбработки.Контрагент = ПолучитьКонтрагентаБанкаИзСчетаОрганизации(СтрокаОбработки.СчетОрганизации);
			
		КонецЕсли;
	
		
	ИначеЕсли ИмяКолонки = "ПланированиеСтатьяДДС" Тогда
		// Обработка колонки "СтатьяДДС"
		
		Если ЗначениеЗаполнено(СтрокаОбработки.СтатьяДДС) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СтатьиДДС.Ссылка КАК СтатьяДДС,
			|	СтатьиДДС.РасчитыватьСуммуНДС КАК РасчитыватьСуммуНДС,
			|	СтатьиДДС.НазначениеПлатежаПоУмолчанию КАК НазначениеПлатежаПоУмолчанию,
			|	СтатьиДДС.КатегорияОперацииПоУмолчанию КАК КатегорияОперацииПоУмолчанию,
			|	СтатьиДДС.УстанавливатьНазначениеПлатежа КАК УстанавливатьНазначениеПлатежа,
			|	СтатьиДДС.УстанавливатьКатегориюОперации КАК УстанавливатьКатегориюОперации,
			|	БанковскиеСчета.Банк.Контрагент КАК БанкКонтрагент,
			|	СтатьиДДС.КонтрагентПоУмолчанию КАК КонтрагентПоУмолчанию
			|ИЗ
			|	Справочник.СтатьиДДС КАК СтатьиДДС
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
			|		ПО (БанковскиеСчета.Ссылка = &СчетОрганизации)
			|ГДЕ
			|	СтатьиДДС.Ссылка = &СтатьяДДС");
			
			Запрос.УстановитьПараметр("СтатьяДДС", СтрокаОбработки.СтатьяДДС); 
			Запрос.УстановитьПараметр("СчетОрганизации", СтрокаОбработки.СчетОрганизации);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			//Если Выборка.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.ЗарплатаНаКК") Тогда
			//	СтрокаОбработки.Контрагент = Выборка.БанкКонтрагент;
			//КонецЕсли;
			
			Если СтрокаОбработки.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.КомиссияБанка")
				И ЗначениеЗаполнено(СтрокаОбработки.СчетОрганизации) Тогда
				СтрокаОбработки.Контрагент = ПолучитьКонтрагентаБанкаИзСчетаОрганизации(СтрокаОбработки.СчетОрганизации);
			КонецЕсли;
			
			Если Выборка.УстанавливатьНазначениеПлатежа Тогда
				СтрокаОбработки.НазначениеПлатежа = Выборка.НазначениеПлатежаПоУмолчанию;
			КонецЕсли;
			
			Если Выборка.УстанавливатьКатегориюОперации Тогда
				СтрокаОбработки.КатегорияОперации = Выборка.КатегорияОперацииПоУмолчанию;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КонтрагентПоУмолчанию) И НЕ ЗначениеЗаполнено(СтрокаОбработки.Контрагент) Тогда
				СтрокаОбработки.Контрагент = Выборка.КонтрагентПоУмолчанию;
			КонецЕсли;
			
			Если НЕ Выборка.РасчитыватьСуммуНДС Тогда
				СтрокаОбработки.СуммаНДС = 0;
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеКонтрагент" Тогда
		
		Если ЗначениеЗаполнено(СтрокаОбработки.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаОбработки.СчетКонтрагента) Тогда
			ДанныеСчетов = ПолучитьСписокБанковскихСчетов(Объект.Дата, СтрокаОбработки.Контрагент);
			Если ДанныеСчетов.Количество() > 0 Тогда
				СтрокаОбработки.СчетКонтрагента = ДанныеСчетов[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетКонтрагента" Тогда
		// Обработка колонки "СчетКонтрагента"
		ЗаполнитьЗначенияСвойств(СтрокаОбработки, ОпределениеВалют(СтрокаОбработки));
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
	ИначеЕсли ИмяКолонки = "ПланированиеНазначениеПлатежа" Тогда
		// Обработка колонки "НазначениеПлатежа"
		
	ИначеЕсли ИмяКолонки = "ПланированиеВалютнаяСумма" Тогда
		// Обработка колонки "ВалютнаяСумма"
		//СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.Валюта, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		//Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, ПараметрыСеанса.ВалютаРегламентированногоУчета, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
	ИначеЕсли ИмяКолонки = "ПланированиеКурсОплатыФиксированный" Тогда
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
		
	ИначеЕсли ИмяКолонки = "ПланированиеПроцент" Тогда
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаОплаты" Тогда
		// Обработка колонки "Сумма"
		
		Если ЗначениеЗаполнено(СтрокаОбработки.НомерЗаявки) Тогда
			Если СтрокаОбработки.Валюта = ПараметрыСеанса.ВалютаРегламентированногоУчета
				И СтрокаОбработки.Валюта <> СтрокаОбработки.ВалютаЗаявки Тогда
				
				Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.Сумма, ПараметрыСеанса.ВалютаРегламентированногоУчета, СтрокаОбработки.ВалютаЗаявки, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
				СтрокаОбработки.ВалютнаяСумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
				
				СтрокаОбработки.СуммаНДС = СтрокаОбработки.Сумма * 20 / 120;
				
			КонецЕсли;
		Иначе
			
			//Если СтрокаОбработки.Валюта <> ПараметрыСеанса.ВалютаРегламентированногоУчета
			//	И СтрокаОбработки.Валюта <> СтрокаОбработки.Валюта Тогда
				
				Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.Сумма, СтрокаОбработки.Валюта, СтрокаОбработки.ВалютаЗаявки, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
				СтрокаОбработки.ВалютнаяСумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
				
			//КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаНДС" Тогда
		// Обработка колонки "НДС"
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиДоступностиРеквизитов(ИдентификаторСтроки = Неопределено)
	
	// Подготовка таблицы
	
	ТаблицаПланирование = Новый ТаблицаЗначений;
	ТаблицаПланирование.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПланирование.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПланирование.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаПланирование.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПланирование.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаПланирование.Колонки.Добавить("СтатьяДДС", Новый ОписаниеТипов("СправочникСсылка.СтатьиДДС"));
	ТаблицаПланирование.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		СтрокаТЧ = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ТаблицаПланирование.Добавить(), СтрокаТЧ);
		
	Иначе
		
		Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПланирование.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаПланирование.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.Организация КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.СчетОрганизации КАК Справочник.БанковскиеСчета) КАК СчетОрганизации,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.СчетКонтрагента КАК Справочник.БанковскиеСчета) КАК СчетКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.СтатьяДДС КАК Справочник.СтатьиДДС) КАК СтатьяДДС,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.Валюта КАК Справочник.Валюты) КАК Валюта
	|ПОМЕСТИТЬ ВТ_ТаблицаПланирование
	|ИЗ
	|	&ТаблицаПланирование КАК ТаблицаПланирование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПланирование.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаПланирование.Организация.Ссылка КАК Организация,
	|	ВТ_ТаблицаПланирование.СчетОрганизации КАК СчетОрганизации,
	|	ВТ_ТаблицаПланирование.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПланирование.СчетКонтрагента КАК СчетКонтрагента,
	|	ВТ_ТаблицаПланирование.СтатьяДДС КАК СтатьяДДС,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаПланирование.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.РоссийскийРубль)
	|		ИНАЧЕ ВТ_ТаблицаПланирование.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.Контрагент.ВнутренняяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ВнутренняяОрганизацияКонтрагента,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СтатьяДДС.РасчитыватьСуммуНДС, ЛОЖЬ) КАК РасчитыватьСуммуНДС,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СтатьяДДС.ВидимостьКонтрагента, ЛОЖЬ) КАК ВидимостьКонтрагента,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СтатьяДДС.ВидимостьСчетаКонтрагента, ЛОЖЬ) КАК ВидимостьСчетаКонтрагента,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СчетОрганизации.ВалютаДенежныхСредств, ЗНАЧЕНИЕ(Справочник.Валюты.РоссийскийРубль)) КАК ВалютаСчетаОрганизации,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СчетКонтрагента.ВалютаДенежныхСредств, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаСчетаКонтрагента
	|ИЗ
	|	ВТ_ТаблицаПланирование КАК ВТ_ТаблицаПланирование");
	
	Запрос.УстановитьПараметр("ТаблицаПланирование", ТаблицаПланирование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого СтрокаТЧ Из ТаблицаДокумента.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки)) Цикл
			
			СтруктураРезультат = Новый Структура;
			//СтруктураРезультат.Вставить("НедоступностьПоляКонтрагент", ?(Выборка.ВидимостьКонтрагента, Ложь, Истина));
			//СтруктураРезультат.Вставить("НедоступностьПоляСумма", Выборка.ВалютаСчетаОрганизации <> ПараметрыСеанса.ВалютаРегламентированногоУчета И Выборка.ВалютаСчетаКонтрагента <> ПараметрыСеанса.ВалютаРегламентированногоУчета);
			СтруктураРезультат.Вставить("НедоступностьПоляСумма", Ложь);
			//СтруктураРезультат.Вставить("НедоступностьПоляВалютнаяСумма", Выборка.ВалютаСчетаОрганизации = ПараметрыСеанса.ВалютаРегламентированногоУчета);
			СтруктураРезультат.Вставить("НедоступностьПоляВалютнаяСумма", Ложь);
			СтруктураРезультат.Вставить("НедоступностьПоляСуммаНДС", НЕ Выборка.РасчитыватьСуммуНДС ИЛИ Выборка.ВалютаСчетаОрганизации <> ПараметрыСеанса.ВалютаРегламентированногоУчета);
			СтруктураРезультат.Вставить("НедоступностьПоляСчетКонтрагента", ?(Выборка.ВидимостьСчетаКонтрагента И ЗначениеЗаполнено(Выборка.ВнутренняяОрганизацияКонтрагента), Ложь, Истина));
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеОрганизацияПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
	ОбработатьСодержимоеТекущейСтроки("ПланированиеСчетОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСчетОрганизацииПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКонтрагентПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСчетКонтрагентаПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеНазначениеПлатежаПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеВалютнаяСуммаПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры


&НаКлиенте
Процедура ПланированиеКурсОплатыФиксированныйПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПроцентПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммаПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммаНДСПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСтатьяДДСПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры



#КонецОбласти


Функция ОпределениеВалют(Данные)
	
	СтруктураВозврата = Новый Структура("Валюта, ВалютаЗаявки");
	
	// Определение валют счетов
	Если ЗначениеЗаполнено(Данные.СчетОрганизации) Тогда
		СтруктураВозврата.Валюта = ВалютаБанковскогоСчета(Данные.СчетОрганизации);
	Иначе
		СтруктураВозврата.Валюта = Справочники.Валюты.РоссийскийРубль;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.НомерЗаявки) Тогда
		СтруктураВозврата.Валюта = Данные.ВалютаЗаявки;
	Иначе
		
		Если ЗначениеЗаполнено(Данные.СчетКонтрагента) Тогда
			СтруктураВозврата.ВалютаЗаявки = ВалютаБанковскогоСчета(Данные.СчетКонтрагента);
		Иначе
			СтруктураВозврата.ВалютаЗаявки = СтруктураВозврата.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьКонтрагентаБанкаИзСчетаОрганизации(БанковскийСчет)

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Банк.Контрагент КАК БанкКонтрагент
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет");
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.БанкКонтрагент;
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьСписокБанковскихСчетов(Дата, Владелец)
	Возврат РаботаСФормамиДокументов.ПолучитьСписокБанковскихСчетов(Дата, Владелец);
КонецФункции

&НаСервере
Функция ВалютаБанковскогоСчета(Счет)
	Возврат БанковскиеСчетаВызовСервера.ВалютаБанковскогоСчета(Счет);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИнформациюПоОстаткамНаСчетах() Экспорт
	ЗаполнитьИнформациюПоОстаткамНаСчетахНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоОстаткамНаСчетахНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//ОбновитьДанныеФормыНаСервере();
	
	МассивСчетов = Новый Массив;
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаСчетов.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаСчетов.Колонки.Добавить("ВалютаСписания", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСчетов.Колонки.Добавить("ВалютаПоступления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСчетов.Колонки.Добавить("СуммаСписания", Новый ОписаниеТипов("Число"));
	ТаблицаСчетов.Колонки.Добавить("СуммаПоступления", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		
		Если СтрокаТЧ.ОтменаПлатежа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.СчетОрганизации = СтрокаТЧ.СчетОрганизации;
		НоваяСтрока.СчетКонтрагента = СтрокаТЧ.СчетКонтрагента;
		НоваяСтрока.ВалютаСписания = СтрокаТЧ.Валюта;
		НоваяСтрока.ВалютаПоступления = СтрокаТЧ.Валюта;
		
		Если НоваяСтрока.ВалютаСписания = ПараметрыСеанса.ВалютаРегламентированногоУчета Тогда
			НоваяСтрока.СуммаСписания = СтрокаТЧ.Сумма;
		Иначе
			НоваяСтрока.СуммаСписания = СтрокаТЧ.ВалютнаяСумма;
		КонецЕсли;
		
		Если НоваяСтрока.ВалютаПоступления = ПараметрыСеанса.ВалютаРегламентированногоУчета Тогда
			НоваяСтрока.СуммаПоступления = СтрокаТЧ.Сумма;
		Иначе
			НоваяСтрока.СуммаПоступления = СтрокаТЧ.ВалютнаяСумма;
		КонецЕсли;
			
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_ДвиженияДокумента.СчетОрганизации КАК Справочник.БанковскиеСчета) КАК СчетОтправителя,
	|	ВТ_ДвиженияДокумента.СуммаСписания КАК СуммаОтправителя,
	|	ВЫРАЗИТЬ(ВТ_ДвиженияДокумента.СчетКонтрагента КАК Справочник.БанковскиеСчета) КАК СчетПолучателя,
	|	ВТ_ДвиженияДокумента.СуммаПоступления КАК СуммаПолучателя
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	&ТаблицаСчетов КАК ВТ_ДвиженияДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.СчетОтправителя КАК СчетОрганизации,
	|	-ВТ_ДанныеДокумента.СуммаОтправителя КАК Сумма
	|ПОМЕСТИТЬ ВТ_ИнформацияПоСчетам
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.СчетПолучателя.ПарныйБанковскийСчет,
	|	ВТ_ДанныеДокумента.СуммаПолучателя
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|ГДЕ
	|	ВТ_ДанныеДокумента.СчетПолучателя.ПарныйБанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|	И ВТ_ДанныеДокумента.СчетПолучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИнформацияПоСчетам.СчетОрганизации КАК СчетОрганизации,
	|	СУММА(ВТ_ИнформацияПоСчетам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Планирование
	|ИЗ
	|	ВТ_ИнформацияПоСчетам КАК ВТ_ИнформацияПоСчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИнформацияПоСчетам.СчетОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланируемыеДвиженияОбороты.СчетОрганизации КАК СчетОрганизации,
	|	ПланируемыеДвиженияОбороты.СуммаОборот КАК Сумма,
	|	ПланируемыеДвиженияОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_ПредварительноеПланирование
	|ИЗ
	|	РегистрНакопления.ПланируемыеДвижения.Обороты(
	|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаАнализа, ДЕНЬ), ДЕНЬ, -15),
	|			ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ДатаАнализа, ДЕНЬ), ДЕНЬ, -1),
	|			,
	|			СчетОрганизации В
	|				(ВЫБРАТЬ
	|					ВТ_Планирование.СчетОрганизации КАК СчетОрганизации
	|				ИЗ
	|					ВТ_Планирование КАК ВТ_Планирование)) КАК ПланируемыеДвиженияОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланируемыеДвиженияОбороты.СчетОрганизации КАК СчетОрганизации,
	|	ПланируемыеДвиженияОбороты.СуммаОборот КАК Сумма,
	|	ПланируемыеДвиженияОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТ_ТекущееПланирование
	|ИЗ
	|	РегистрНакопления.ПланируемыеДвижения.Обороты(
	|			НАЧАЛОПЕРИОДА(&ДатаАнализа, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&ДатаАнализа, ДЕНЬ),
	|			Регистратор,
	|			СчетОрганизации В
	|				(ВЫБРАТЬ
	|					ВТ_Планирование.СчетОрганизации КАК СчетОрганизации
	|				ИЗ
	|					ВТ_Планирование КАК ВТ_Планирование)) КАК ПланируемыеДвиженияОбороты
	|ГДЕ
	|	ПланируемыеДвиженияОбороты.Регистратор <> &ЭтотДокумент
	|	И ПланируемыеДвиженияОбороты.Регистратор ССЫЛКА Документ.ФинансовыйПлан
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.БанковскийСчет КАК СчетОрганизации,
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОстаткиДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			НАЧАЛОПЕРИОДА(&ДатаАнализа, ДЕНЬ),
	|			БанковскийСчет В
	|				(ВЫБРАТЬ
	|					ВТ_Планирование.СчетОрганизации КАК СчетОрганизации
	|				ИЗ
	|					ВТ_Планирование КАК ВТ_Планирование)) КАК ДенежныеСредстваОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Планирование.СчетОрганизации КАК СчетОрганизации,
	|	ВТ_Планирование.Сумма КАК СуммаДокумента,
	|	ЕСТЬNULL(ВТ_ПредварительноеПланирование.Сумма, 0) КАК СуммаПредварительноеПланирование,
	|	ЕСТЬNULL(ВТ_ПредварительноеПланирование.ВалютнаяСумма, 0) КАК ВалютнаяСуммаПредварительноеПланирование,
	|	ЕСТЬNULL(ВТ_ТекущееПланирование.Сумма, 0) КАК СуммаТекущееПланирование,
	|	ЕСТЬNULL(ВТ_ТекущееПланирование.ВалютнаяСумма, 0) КАК ВалютнаяСуммаТекущееПланирование,
	|	ЕСТЬNULL(ВТ_ОстаткиДенежныхСредств.Сумма, 0) КАК СуммаОстатокДенежныхСредств,
	|	ВТ_Планирование.СчетОрганизации.НомерСчета КАК НомерСчета,
	|	ВТ_Планирование.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаСчетаОрганизации
	|ИЗ
	|	ВТ_Планирование КАК ВТ_Планирование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредварительноеПланирование КАК ВТ_ПредварительноеПланирование
	|		ПО ВТ_Планирование.СчетОрганизации = ВТ_ПредварительноеПланирование.СчетОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущееПланирование КАК ВТ_ТекущееПланирование
	|		ПО ВТ_Планирование.СчетОрганизации = ВТ_ТекущееПланирование.СчетОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиДенежныхСредств КАК ВТ_ОстаткиДенежныхСредств
	|		ПО ВТ_Планирование.СчетОрганизации = ВТ_ОстаткиДенежныхСредств.СчетОрганизации";
	
	Запрос.УстановитьПараметр("ТаблицаСчетов", ТаблицаСчетов);
	Запрос.УстановитьПараметр("ДатаАнализа", Объект.Дата);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	// Предварительно очищаем остаток
	Для Каждого СтрокаТаблицыПланирование Из ТаблицаДокумента Цикл
		СтрокаТаблицыПланирование.ОстатокНаСчете = 0;
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СчетОрганизации) Тогда
			
			СтрокиТЧ = ТаблицаДокумента.НайтиСтроки(Новый Структура("СчетОрганизации", Выборка.СчетОрганизации));
			Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
				
				Если Выборка.ВалютаСчетаОрганизации = ПараметрыСеанса.ВалютаРегламентированногоУчета Тогда
					СтрокаТЧ.ОстатокНаСчете = Выборка.СуммаОстатокДенежныхСредств + Выборка.СуммаДокумента - Выборка.СуммаПредварительноеПланирование - Выборка.СуммаТекущееПланирование;
					
					//Расшифровка
					СтрокаТЧ.РасшифровкаОстатокДенежныхСредств = Выборка.СуммаОстатокДенежныхСредств;
					СтрокаТЧ.РасшифровкаСуммаДокумента = Выборка.СуммаДокумента;
					СтрокаТЧ.РасшифровкаСуммаПредварительноеПланирование = -Выборка.СуммаПредварительноеПланирование;
					СтрокаТЧ.РасшифровкаСуммаТекущееПланирование = -Выборка.СуммаТекущееПланирование;
					
				Иначе
					СтрокаТЧ.ОстатокНаСчете = Выборка.СуммаОстатокДенежныхСредств + Выборка.СуммаДокумента - Выборка.ВалютнаяСуммаПредварительноеПланирование - Выборка.ВалютнаяСуммаТекущееПланирование;
					
					//Расшифровка
					СтрокаТЧ.РасшифровкаОстатокДенежныхСредств = Выборка.СуммаОстатокДенежныхСредств;
					СтрокаТЧ.РасшифровкаСуммаДокумента = Выборка.СуммаДокумента;
					СтрокаТЧ.РасшифровкаСуммаПредварительноеПланирование = -Выборка.ВалютнаяСуммаПредварительноеПланирование;
					СтрокаТЧ.РасшифровкаСуммаТекущееПланирование = -Выборка.ВалютнаяСуммаТекущееПланирование;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ОбновитьИнформациюОКурсахВалют();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьИнформациюОКурсахВалют()
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период КАК Период,
		|	""$"" КАК Валюта,
		|	ВЫРАЗИТЬ(КурсыВалютСрезПоследних.Курс КАК ЧИСЛО(10, 4)) КАК Курс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАнализа, Валюта.Код = ""840"") КАК КурсыВалютСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период,
		|	""EUR"",
		|	ВЫРАЗИТЬ(КурсыВалютСрезПоследних.Курс КАК ЧИСЛО(10, 4))
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАнализа, Валюта.Код = ""978"") КАК КурсыВалютСрезПоследних");
		
		Запрос.УстановитьПараметр("ДатаАнализа", Объект.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтекИнформации = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Если СтекИнформации.Количество() <> 0 Тогда
				СтекИнформации.Добавить(", ");
			КонецЕсли;
			
			СтекИнформации.Добавить(Новый ФорматированнаяСтрока(Выборка.Валюта, Новый Шрифт(,, Истина,), WebЦвета.ТемноЗеленый));
			СтекИнформации.Добавить(" (");
			СтекИнформации.Добавить(Новый ФорматированнаяСтрока(Формат(Выборка.Период, "ДФ=dd.MM"),, WebЦвета.Синий));
			СтекИнформации.Добавить(") ");
			СтекИнформации.Добавить(Новый ФорматированнаяСтрока("" + Формат(Выборка.Курс, "ЧДЦ=4"), Новый Шрифт(,, Истина,)));
			
		КонецЦикла;
		
		СтрокаИнформации = Новый ФорматированнаяСтрока("");
		
		Для Каждого Элемент Из СтекИнформации Цикл
			СтрокаИнформации = Новый ФорматированнаяСтрока(СтрокаИнформации, Элемент);
		КонецЦикла;
			
		Элементы.ДекорацияКурсыВалют.Заголовок = СтрокаИнформации;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьИнформациюОКурсахВалют();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьИнформациюОКурсахВалют();
КонецПроцедуры
