#Область ОписаниеПеременных
&НаСервере
Перем ВыборкаПоУправленческомуУчету;
&НаСервере
Перем МассивСтатейПриход;
&НаСервере
Перем МассивСтатейРасход;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда	
		Объект.Автор = Пользователи.ТекущийПользователь();
		Объект.Валюта = ПараметрыСеанса.ВалютаРегламентированногоУчета;
		Объект.Курс = 1;
		Объект.Кратность = 1;
	Иначе
		ЭтоВалютныйСчет = Объект.Валюта <> ПараметрыСеанса.ВалютаРегламентированногоУчета;	
	КонецЕсли;
	
	УстановкаВидимостиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	СчетОрганизацииПриИзмененииНаСервере();
	УстановкаВидимостиРеквизитов();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеВыписки

&НаКлиенте
Процедура ДанныеВыпискиВалютнаяСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.Приход") Тогда
			ТекущиеДанные.СуммаПриход = ТекущиеДанные.ВалютнаяСумма * Объект.Курс / Объект.Кратность;
			ТекущиеДанные.СуммаРасход = 0;
		Иначе
			ТекущиеДанные.СуммаРасход = ТекущиеДанные.ВалютнаяСумма * Объект.Курс / Объект.Кратность;
			ТекущиеДанные.СуммаПриход = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьИзФинансовогоПлана(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьИзФинансовогоПланаЗавершение", ЭтотОбъект), "Заполнить выписку на основании финансового плана?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммы(Команда)
	РассчитатьСуммыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ДополнительныеПараметры = Новый Структура("Дата, Организация, СчетОрганизации", Объект.Дата, Объект.Организация, Объект.СчетОрганизации);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОкончание", ЭтотОбъект);
	ОткрытьФорму("Документ.Выписка.Форма.ФормаЗагрузкиИзФайла", ДополнительныеПараметры, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура РассчитатьСуммыНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.Организация КАК Организация,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	БанковскиеСчета.Валютный КАК Валютный,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(&МоментВремени, ) КАК ДенежныеСредстваОстатки
	|		ПО (ДенежныеСредстваОстатки.БанковскийСчет = БанковскиеСчета.Ссылка)
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет");

	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Объект.Дата));
	//Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.СчетОрганизации);

	СуммаОстаток = 0;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СуммаОстаток = Выборка.СуммаОстаток;
		
	КонецЕсли;
	
	ТаблицаДанныхВыписки = Объект.ДанныеВыписки.Выгрузить();
		
	Если НЕ Выборка.Валютный Тогда
		
		ИнформацияПоступило = ТаблицаДанныхВыписки.Итог("СуммаПриход");
		ИнформацияСписано = ТаблицаДанныхВыписки.Итог("СуммаРасход");
		
		ИнформацияОстатокНаНачало = СуммаОстаток;
		ИнформацияОстатокНаКонец = СуммаОстаток + ИнформацияПоступило - ИнформацияСписано;	
		
	Иначе
		
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаДенежныхСредств, Объект.Дата);
		ИнформацияОстатокНаНачало = СуммаОстаток * КурсВалюты.Курс / КурсВалюты.Кратность;
		ИнформацияОстатокНаНачалоВалюта = СуммаОстаток;
		
		ИнформацияПоступило = 0;
		ИнформацияПоступилоВалюта = 0;
		ИнформацияСписано = 0;
		ИнформацияСписаноВалюта = 0;
		
		ИнформацияОстатокНаКонец = 0;	
		
		Для Каждого СтрокаТЧ Из Объект.ДанныеВыписки Цикл
			
			Если СтрокаТЧ.СуммаПриход > 0 Тогда
				ИнформацияПоступилоВалюта = ИнформацияПоступилоВалюта + СтрокаТЧ.ВалютнаяСумма;
			Иначе
				ИнформацияСписаноВалюта = ИнформацияСписаноВалюта + СтрокаТЧ.ВалютнаяСумма;
			КонецЕсли;
			
		КонецЦикла;
		
		ИнформацияПоступило = ИнформацияПоступилоВалюта * КурсВалюты.Курс / КурсВалюты.Кратность;
		ИнформацияСписано = ИнформацияСписаноВалюта * КурсВалюты.Курс / КурсВалюты.Кратность;
		
		ИнформацияОстатокНаКонец = ИнформацияОстатокНаНачало + ИнформацияПоступило - ИнформацияСписано;
		ИнформацияОстатокНаКонецВалюта = ИнформацияОстатокНаНачалоВалюта + ИнформацияПоступилоВалюта - ИнформацияСписаноВалюта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзФинансовогоПланаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИзФинансовогоПланаЗавершениеНаСервере();
		Элементы.УправленческийУчет.ОтборСтрок = Новый ФиксированнаяСтруктура("GUIDСтрокиВыписки", СокрЛП(Новый УникальныйИдентификатор));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзФинансовогоПланаЗавершениеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинансовыйПланПланирование.СтатьяДДС КАК СтатьяДДС,
	|	ФинансовыйПланПланирование.Контрагент КАК Контрагент,
	|	ФинансовыйПланПланирование.СчетКонтрагента КАК СчетКонтрагента,
	|	ФинансовыйПланПланирование.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ФинансовыйПланПланирование.Валюта КАК Валюта,
	|	ФинансовыйПланПланирование.ВалютаЗаявки КАК ВалютаЗаявки,
	|	ФинансовыйПланПланирование.Сумма КАК ВалютнаяСумма,
	|	ФинансовыйПланПланирование.Сумма КАК СуммаРасход,
	|	ФинансовыйПланПланирование.СуммаНДС КАК СуммаНДС,
	|	ФинансовыйПланПланирование.КатегорияОперации КАК КатегорияОперации,
	|	ФинансовыйПланПланирование.Процент КАК Процент,
	|	ФинансовыйПланПланирование.КурсОплатыФиксированный КАК КурсОплатыФиксированный,
	|	ФинансовыйПланПланирование.Договор КАК Договор,
	|	ФинансовыйПланПланирование.ОтменаПлатежа КАК ОтменаПлатежа,
	|	ФинансовыйПланПланирование.ОплатаВыполнена КАК ОплатаВыполнена,
	|	ФинансовыйПланПланирование.АвторСтроки КАК АвторСтроки,
	|	ФинансовыйПланПланирование.Комментарий КАК Комментарий,
	|	ФинансовыйПланПланирование.НомерЗаявки КАК НомерЗаявки,
	|	ФинансовыйПланПланирование.GUIDСтрокиФинансовогоПлана КАК GUIDСтрокиФинансовогоПлана,
	|	ФинансовыйПланПланирование.IDЗаявки КАК IDЗаявки,
	|	ФинансовыйПланПланирование.Организация КАК Организация,
	|	ФинансовыйПланПланирование.СчетОрганизации КАК СчетОрганизации
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	ФинансовыйПланПланирование.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ФинансовыйПланПланирование.Организация = &Организация
	|	И ФинансовыйПланПланирование.СчетОрганизации = &СчетОрганизации
	|	И НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйПланПланирование.СтатьяДДС КАК СтатьяДДС,
	|	ФинансовыйПланПланирование.Организация.ВнутреннийКонтрагент КАК Контрагент,
	|	ФинансовыйПланПланирование.СчетОрганизации.ПарныйБанковскийСчет КАК СчетКонтрагента,
	|	ФинансовыйПланПланирование.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ФинансовыйПланПланирование.Валюта КАК Валюта,
	|	ФинансовыйПланПланирование.ВалютаЗаявки КАК ВалютаЗаявки,
	|	ФинансовыйПланПланирование.Сумма КАК СуммаРасход,
	|	ФинансовыйПланПланирование.СуммаНДС КАК СуммаНДС,
	|	ФинансовыйПланПланирование.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ФинансовыйПланПланирование.КатегорияОперации КАК КатегорияОперации,
	|	ФинансовыйПланПланирование.Процент КАК Процент,
	|	ФинансовыйПланПланирование.КурсОплатыФиксированный КАК КурсОплатыФиксированный,
	|	ФинансовыйПланПланирование.Договор КАК Договор,
	|	ФинансовыйПланПланирование.ОтменаПлатежа КАК ОтменаПлатежа,
	|	ФинансовыйПланПланирование.ОплатаВыполнена КАК ОплатаВыполнена,
	|	ФинансовыйПланПланирование.АвторСтроки КАК АвторСтроки,
	|	ФинансовыйПланПланирование.Комментарий КАК Комментарий,
	|	ФинансовыйПланПланирование.НомерЗаявки КАК НомерЗаявки,
	|	ФинансовыйПланПланирование.GUIDСтрокиФинансовогоПлана КАК GUIDСтрокиФинансовогоПлана,
	|	ФинансовыйПланПланирование.IDЗаявки КАК IDЗаявки,
	|	ФинансовыйПланПланирование.Организация КАК Организация,
	|	ФинансовыйПланПланирование.СчетОрганизации КАК СчетОрганизации
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	ФинансовыйПланПланирование.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления
	|	И ФинансовыйПланПланирование.Контрагент.ВнутренняяОрганизация = &Организация
	|	И ФинансовыйПланПланирование.СчетКонтрагента.ПарныйБанковскийСчет = &СчетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйПланУправленческийУчетЗаявок.НомерСтроки КАК НомерСтроки,
	|	ФинансовыйПланУправленческийУчетЗаявок.GUIDСтрокиФинансовогоПлана КАК GUIDСтрокиФинансовогоПлана,
	|	ФинансовыйПланУправленческийУчетЗаявок.Имя КАК Имя,
	|	ФинансовыйПланУправленческийУчетЗаявок.Значение КАК Значение,
	|	ФинансовыйПланУправленческийУчетЗаявок.ТипРеквизита КАК ТипРеквизита,
	|	ФинансовыйПланУправленческийУчетЗаявок.ЗапретРедактирования КАК ЗапретРедактирования,
	|	ФинансовыйПланУправленческийУчетЗаявок.Необязательный КАК Необязательный,
	|	ФинансовыйПланУправленческийУчетЗаявок.ВидПараметра КАК ВидПараметра,
	|	ФинансовыйПланУправленческийУчетЗаявок.Формула КАК Формула
	|ИЗ
	|	Документ.ФинансовыйПлан.УправленческийУчетЗаявок КАК ФинансовыйПланУправленческийУчетЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|		ПО ФинансовыйПланУправленческийУчетЗаявок.Ссылка = ФинансовыйПланПланирование.Ссылка
	|			И ФинансовыйПланУправленческийУчетЗаявок.GUIDСтрокиФинансовогоПлана = ФинансовыйПланПланирование.GUIDСтрокиФинансовогоПлана
	|			И (ФинансовыйПланУправленческийУчетЗаявок.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ФинансовыйПланПланирование.Организация = &Организация)
	|			И (ФинансовыйПланПланирование.СчетОрганизации = &СчетОрганизации)
	|ГДЕ
	|	НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СчетОрганизации", Объект.СчетОрганизации);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПланированиеРасход = РезультатЗапроса[0].Выбрать();
	ВыборкаПланированиеПриход = РезультатЗапроса[1].Выбрать();
	ВыборкаУправленческийУчет = РезультатЗапроса[2].Выбрать();

	Объект.ДанныеВыписки.Очистить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
	КурсВалютыДокумента = КурсВалюты.Курс / КурсВалюты.Кратность;
	
	ВыборкаПланированиеРасход.Сбросить();
	
	Пока ВыборкаПланированиеРасход.Следующий() Цикл
		
		НоваяСтрока = Объект.ДанныеВыписки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПланированиеРасход);
		НоваяСтрока.GUIDСтрокиВыписки = СокрЛП(Новый УникальныйИдентификатор());
		
		Если Объект.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			НоваяСтрока.СуммаРасход = НоваяСтрока.ВалютнаяСумма * КурсВалютыДокумента;
		КонецЕсли;
		
		ДанныеУУ = УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(ВыборкаПланированиеРасход.КатегорияОперации);
		
		Для Каждого СтрокаПараметры Из ДанныеУУ Цикл
			
			НоваяСтрокаУУ = Объект.УправленческийУчет.Добавить();
			НоваяСтрокаУУ.GUIDСтрокиВыписки = НоваяСтрока.GUIDСтрокиВыписки;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, СтрокаПараметры);
			
			ВыборкаУправленческийУчет.Сбросить();
			
			Пока ВыборкаУправленческийУчет.НайтиСледующий(Новый Структура("GUIDСтрокиФинансовогоПлана, Имя", ВыборкаПланированиеРасход.GUIDСтрокиФинансовогоПлана, НоваяСтрокаУУ.Имя)) Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, ВыборкаУправленческийУчет, "Значение");
			КонецЦикла;
			
		КонецЦикла;
		
		УправленческийУчетСервер.ОбновитьТаблицуУправленческогоУчета(Объект, Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", НоваяСтрока.GUIDСтрокиВыписки)));
		
	КонецЦикла;
	
	Пока ВыборкаПланированиеПриход.Следующий() Цикл
		
		
		НоваяСтрока = Объект.ДанныеВыписки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПланированиеПриход,, "СтатьяДДС");
		НоваяСтрока.GUIDСтрокиВыписки = СокрЛП(Новый УникальныйИдентификатор());
		НоваяСтрока.СтатьяДДС = Справочники.СтатьиДДС.Приход;
		
		ДанныеУУ = УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(ВыборкаПланированиеПриход.КатегорияОперации);
		
		Для Каждого СтрокаПараметры Из ДанныеУУ Цикл
			
			НоваяСтрокаУУ = Объект.УправленческийУчет.Добавить();
			НоваяСтрокаУУ.GUIDСтрокиВыписки = НоваяСтрока.GUIDСтрокиВыписки;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, СтрокаПараметры);
			
			ВыборкаУправленческийУчет.Сбросить();
			
			Пока ВыборкаУправленческийУчет.НайтиСледующий(Новый Структура("GUIDСтрокиФинансовогоПлана, Имя", ВыборкаПланированиеПриход.GUIDСтрокиФинансовогоПлана, НоваяСтрокаУУ.Имя)) Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, ВыборкаУправленческийУчет, "Значение");
			КонецЦикла;
			
		КонецЦикла;
		
		УправленческийУчетСервер.ОбновитьТаблицуУправленческогоУчета(Объект, Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", НоваяСтрока.GUIDСтрокиВыписки)));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаВидимостиРеквизитов()
	
	ЭтоВалютныйСчет = ЗначениеЗаполнено(Объект.СчетОрганизации) И Объект.СчетОрганизации.Валютный;

	Элементы.ИнформацияПоступилоВалюта.Видимость = ЭтоВалютныйСчет;
	Элементы.ИнформацияСписаноВалюта.Видимость = ЭтоВалютныйСчет;
	Элементы.ИнформацияОстатокНаНачалоВалюта.Видимость = ЭтоВалютныйСчет;
	Элементы.ИнформацияОстатокНаКонецВалюта.Видимость = ЭтоВалютныйСчет;
	
	Элементы.ДанныеВыпискиИтогВалютнаяСумма.Видимость = ЭтоВалютныйСчет;
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере()
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетОрганизации, "Валютный, ВалютаДенежныхСредств");
	Объект.Валюта = РеквизитыСчета.ВалютаДенежныхСредств;
	Если РеквизитыСчета.ВалютаДенежныхСредств <> ПараметрыСеанса.ВалютаРегламентированногоУчета Тогда
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыСчета.ВалютаДенежныхСредств, Объект.Дата);
		Объект.Курс = КурсВалюты.Курс;
		Объект.Кратность = КурсВалюты.Кратность;
	Иначе
		Объект.Курс = 1;
		Объект.Кратность = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОкончание(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Параметры.НеОчищатьТабличнуюЧастьВыписки Тогда
		Объект.ДанныеВыписки.Очистить();
		Объект.УправленческийУчет.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Параметры.Организация) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат.Параметры, "Дата, Организация, СчетОрганизации");
		СчетОрганизацииПриИзмененииНаСервере();
		УстановкаВидимостиРеквизитов();
	КонецЕсли;
	
	Для Каждого Элемент Из Результат.ДанныеВыписок Цикл

		Если Элемент.Значение.СчетОрганизации <> Объект.СчетОрганизации Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ДанныеВыписки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
		НоваяСтрока.GUIDСтрокиВыписки = СокрЛП(Новый УникальныйИдентификатор());
		
		Если ЗначениеЗаполнено(НоваяСтрока.КатегорияОперации)
			И ТипЗнч(Элемент.Значение.УправленческийУчет) = Тип("Массив")
			И Элемент.Значение.УправленческийУчет.Количество() > 0 
			
			Тогда
			
			Для Каждого ЭлементУУ Из Элемент.Значение.УправленческийУчет Цикл
				НоваяСтрокаУУ = Объект.УправленческийУчет.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, ЭлементУУ);
				НоваяСтрокаУУ.GUIDСтрокиВыписки = НоваяСтрока.GUIDСтрокиВыписки;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.КатегорияОперации) Тогда
			
			Для Каждого СтруктураДанных Из УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(НоваяСтрока.КатегорияОперации) Цикл
				НоваяСтрокаУУ = Объект.УправленческийУчет.Добавить();
				НоваяСтрокаУУ.GUIDСтрокиВыписки = НоваяСтрока.GUIDСтрокиВыписки;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, СтруктураДанных);
			КонецЦикла;
			
		Иначе
			
			ДобавлениеКатегории(НоваяСтрока.GUIDСтрокиВыписки);
			
		КонецЕсли;
		
		ОбновитьТаблицуУправленческогоУчетаНаСервере(НоваяСтрока.GUIDСтрокиВыписки);
		Для Каждого ЭлементЗначенийУУ Из Элемент.Значение.ДанныеЗаполненияПоУправленческомуУчету Цикл
			Для Каждого СтрокаОбъектаУправленческийУчет Из Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки, Имя", НоваяСтрока.GUIDСтрокиВыписки, ЭлементЗначенийУУ.Имя)) Цикл
				СтрокаОбъектаУправленческийУчет.Значение = ЭлементЗначенийУУ.Значение;
			КонецЦикла;
		КонецЦикла;
		
		
		ОбработкаСтрокиНаСервере(НоваяСтрока.GUIDСтрокиВыписки);
		
		Модифицированность = Истина;
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСтрокиНаСервере(GUIDСтрокиВыписки)
	
	СтрокиВыписки = Объект.ДанныеВыписки.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки));
	
	Если СтрокиВыписки.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрокаВыписки = СтрокиВыписки[0];
	КонецЕсли;
	
	Если СтрокаВыписки.СтатьяДДС = Справочники.СтатьиДДС.КомиссияБанка И ЗначениеЗаполнено(Объект.СчетОрганизации) И ЗначениеЗаполнено(Объект.СчетОрганизации.Банк) Тогда
		СтрокаВыписки.Контрагент = Объект.СчетОрганизации.Банк.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуУправленческогоУчетаНаСервере(GUIDСтрокиВыписки)
	УправленческийУчетСервер.ОбновитьТаблицуУправленческогоУчета(Объект, Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)));
КонецПроцедуры

#КонецОбласти
























&НаКлиенте
Процедура ДанныеВыпискиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.УправленческийУчет.ОтборСтрок = Новый ФиксированнаяСтруктура("GUIDСтрокиВыписки", ТекущиеДанные.GUIDСтрокиВыписки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегориюОперацииНаСервере(GUIDСтрокиВыписки)
	ЗаполнитьКатегориюОперацииПоСтроке(GUIDСтрокиВыписки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКатегориюОперации(Команда)
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.НомерЗаявки) И Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", ТекущиеДанные.GUIDСтрокиВыписки)).Количество() > 0 Тогда
		Иначе
			ЗаполнитьКатегориюОперацииНаСервере(ТекущиеДанные.GUIDСтрокиВыписки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегорииОперацийНаСервере(GUIDСтрокиВыписки)
	ЗаполнитьКатегориюОперацииПоСтроке(GUIDСтрокиВыписки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКатегорииОпераций(Команда)
	Для Каждого СтрокаТЧ Из Объект.ДанныеВыписки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерЗаявки) И Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", СтрокаТЧ.GUIDСтрокиВыписки)).Количество() > 0 Тогда
		Иначе
			ЗаполнитьКатегориюОперацииНаСервере(СтрокаТЧ.GUIDСтрокиВыписки);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВыпискиПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", ТекущиеДанные.GUIDСтрокиВыписки)) Цикл
			Объект.УправленческийУчет.Удалить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВыпискиКатегорияОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		КатегорияОперацииПриИзмененииНаСервере(ТекущиеДанные.КатегорияОперации, ТекущиеДанные.GUIDСтрокиВыписки);
		ОбновитьТаблицуУправленческогоУчетаСтрокиВыпискиНаСервере(ТекущиеДанные.GUIDСтрокиВыписки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуУправленческогоУчетаСтрокиВыпискиНаСервере(GUIDСтрокиВыписки)
	УправленческийУчетСервер.ОбновитьТаблицуУправленческогоУчета(ЭтаФорма.Объект, Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)));
КонецПроцедуры

&НаСервере
Процедура КатегорияОперацииПриИзмененииНаСервере(КатегорияОперации, GUIDСтрокиВыписки)
	
	Для Каждого СтрокаТЧ Из Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)) Цикл
		Объект.УправленческийУчет.Удалить(СтрокаТЧ);
	КонецЦикла;

		
	
	Для Каждого СтруктураДанных Из УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(КатегорияОперации) Цикл
		
		НоваяСтрока = Объект.УправленческийУчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		НоваяСтрока.GUIDСтрокиВыписки = GUIDСтрокиВыписки;
		
		Если СтруктураДанных.Свойство("ВидПараметра") Тогда
			НоваяСтрока.ТипЗначения = СтруктураДанных.ВидПараметра.ТипЗначения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегориюОперацииПоСтроке(GUIDСтрокиВыписки) 
	
	СтрокиВыписки = Объект.ДанныеВыписки.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки));
	Если СтрокиВыписки.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрокаВыписки = СтрокиВыписки[0];
	КонецЕсли;
	
	ФирмаЦум = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7707073366");

	Если СтрокаВыписки <> Неопределено И ЗначениеЗаполнено(СтрокаВыписки.Контрагент) Тогда
		НаименованиеКонтрагента = СтрокаВыписки.Контрагент.Наименование;
	Иначе
		НаименованиеКонтрагента = "";
	КонецЕсли;
	
	Если СтрокаВыписки.СтатьяДДС = Справочники.СтатьиДДС.КомиссияБанка
		И НЕ ЗначениеЗаполнено(СтрокаВыписки.КатегорияОперации) Тогда
		
		СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду("00200");
		
	ИначеЕсли СтрокаВыписки.СтатьяДДС = Справочники.СтатьиДДС.ПриходПоКК Тогда 		
		
		СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду("00108");
		
	ИначеЕсли СтрокаВыписки.СтатьяДДС = Справочники.СтатьиДДС.Инкассация Тогда
		
		Если Объект.Организация.Наименование = "МБС" Тогда
			СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Приход Х от Отв.Л (Отв.Л => р/сч Х, поступление)", Истина);
		Иначе
			СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду("00101");
		КонецЕсли;
		
	ИначеЕсли RegularExpressions.ТестRegExp(СтрокаВыписки.НазначениеПлатежа, "(Оплата за товары нар)") Тогда
		СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Взаиморасчеты с ЦУМом/ДЛТ, поступление");
		СтрокаВыписки.Контрагент = ФирмаЦум;
		
		Если RegularExpressions.ТестRegExp(СтрокаВыписки.НазначениеПлатежа, "(\s+ндс\s+\d+(\s\d+)+\,\d+)") Тогда
			СтрокаНДС = RegularExpressions.ReplaceRegExp(RegularExpressions.ReplaceRegExp(RegularExpressions.ПодстрокаRegExp(СтрокаВыписки.НазначениеПлатежа, "(\s+ндс\s+\d+(\s\d+)+\,\d+)"), "(\s+ндс\s+)"), "(\s+)");
			
			Попытка
				СтрокаВыписки.СуммаНДС = Число(СтрокаНДС);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
			
		
	ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "(УФК по г.Москве \(ФТС России\))")
		ИЛИ RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "ФТС России") Тогда // RegularExpressions.ТестRegExp(СтрокаОбработки.НазначениеПлатежа, "(Пошлина)")
		СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Платежи по таможне", Истина);
		
	ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "(УФК по г. Москве \(Государственная инспекция пробирного надзора по г. Москве и Московской области\))") Тогда // RegularExpressions.ТестRegExp(СтрокаОбработки.НазначениеПлатежа, "(Госпошлина)")
		СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Сертификация товаров", Истина);
		
		//-mdfc
	ИначеЕсли ТипЗнч(СтрокаВыписки.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		// вставлено из-за проблем с желтым окном
		Если ЗначениеЗаполнено(СтрокаВыписки.КатегорияОперации) Тогда
			ДобавлениеКатегории(GUIDСтрокиВыписки);		
		КонецЕсли; 
		
		Если СтрокаВыписки.СчетКонтрагента.Пустая() Тогда 
			Возврат;
		КонецЕсли;
		
		//Если СтрокаВыписки.СчетКонтрагента.Владелец.ХарактеристикаФирмы = Перечисления.ХарактеристикаФирмы.Банк или
		//	СтрокаВыписки.СчетКонтрагента.Владелец.ХарактеристикаФирмы = Перечисления.ХарактеристикаФирмы.Океан Тогда
		//	Возврат;
		//КонецЕсли;
		
		ГруппаИноФирм = Справочники.Контрагенты.НайтиПоКоду("000000000092");
		
		Если СтрокаВыписки.Контрагент.ПринадлежитЭлементу(ГруппаИноФирм) Тогда
			Возврат
		КонецЕсли;
		
		Если НЕ ФирмаЦум = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Если СтрокаВыписки.Контрагент = ФирмаЦум Тогда
				Возврат;
			КонецЕсли;				
		КонецЕсли;
		
		ГруппаВнешнихФирм = Справочники.Контрагенты.НайтиПоКоду("000000000001"); 
		
		Если СтрокаВыписки.Контрагент.ПринадлежитЭлементу(ГруппаВнешнихФирм) Тогда
			Возврат
		КонецЕсли; 
		
		Если  СтрокаВыписки.Контрагент.ЭтоИностранныйКонтрагент Тогда
			Возврат
		КонецЕсли;	
		
		Если СтрокаВыписки.СтатьяДДС = Справочники.СтатьиДДС.Приход Тогда
			
			СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду("00111");
			
		ИначеЕсли СтрокаВыписки.СтатьяДДС = Справочники.СтатьиДДС.Расход Тогда
			
			СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду("00118");
			
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	ДобавлениеКатегории(GUIDСтрокиВыписки);
	
КонецПроцедуры


&НаСервере
Процедура ДобавлениеКатегории(GUIDСтрокиВыписки) 
	
	СтрокиВыписки = Объект.ДанныеВыписки.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки));
	
	Если СтрокиВыписки.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрокаВыписки = СтрокиВыписки[0];
	КонецЕсли;
	
	НаименованиеОрганизации = Объект.Организация.Наименование;
	НаименованиеСчетаОрганизации = СокрЛП(Объект.СчетОрганизации.Наименование);
	НаименованиеКонтрагента = СокрЛП(СтрокаВыписки.Контрагент.Наименование);
	НаименованиеСчетаКонтрагента = СокрЛП(СтрокаВыписки.СчетКонтрагента.Наименование);
	НаименованиеКатегорииОперации = СокрЛП(СтрокаВыписки.КатегорияОперации.Наименование);
	ВидДвиженияДСНаименование = СокрЛП(СтрокаВыписки.СтатьяДДС.Наименование);
	
	// Сохраняем таблицу
	МассивСтрокСохранения = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)) Цикл
		СтруктураСохранения = Новый Структура;
		
		Для Каждого Реквизит Из Метаданные.Документы.Выписка.ТабличныеЧасти.УправленческийУчет.Реквизиты Цикл
			Попытка
				СтруктураСохранения.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
			Исключение
				
			КонецПопытки;
		КонецЦикла;
		МассивСтрокСохранения.Добавить(СтруктураСохранения);
	КонецЦикла;
	
	Если ТипЗнч(ВыборкаПоУправленческомуУчету) <> Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		ЗапросПоУправленческомуУчету = Новый Запрос("ВЫБРАТЬ
		|	НастройкиИмпортаВыписок.ВидОплаты КАК ВидОплаты,
		|	НастройкиИмпортаВыписок.ПриходРасход КАК ПриходРасход,
		|	НастройкиИмпортаВыписок.ПлательщикИНН КАК ПлательщикИНН,
		|	НастройкиИмпортаВыписок.ПолучательИНН КАК ПолучательИНН,
		|	НастройкиИмпортаВыписок.ПоказательКБК КАК ПоказательКБК,
		|	НастройкиИмпортаВыписок.СтрокаПоиска КАК СтрокаПоиска,
		|	НастройкиИмпортаВыписок.КатегорияОпераций КАК КатегорияОпераций,
		|	НастройкиИмпортаВыписок.Реквизиты КАК Реквизиты
		|ИЗ
		|	РегистрСведений.НастройкиИмпортаВыписок КАК НастройкиИмпортаВыписок
		|ГДЕ
		|	НастройкиИмпортаВыписок.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиИмпортаВыписок.Приоритет");
		
		ВыборкаПоУправленческомуУчету = ЗапросПоУправленческомуУчету.Выполнить().Выбрать();
		
		МассивСтатейПриход = Новый Массив;
		МассивСтатейРасход = Новый Массив;
		
		МассивСтатейПриход.Добавить(Справочники.СтатьиДДС.Инкассация);
		МассивСтатейПриход.Добавить(Справочники.СтатьиДДС.Приход);
		МассивСтатейПриход.Добавить(Справочники.СтатьиДДС.ПриходПоКК);
		
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.Аренда);
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.Зарплата);
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.ЗарплатаНаКК);
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.ЗаТовары);
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.КомиссияБанка);
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.Налог);
		МассивСтатейРасход.Добавить(Справочники.СтатьиДДС.Расход);
		
	КонецЕсли;
	
//	Если НЕ ЗначениеЗаполнено(СтрокаВыписки.КатегорияОперации) Тогда 
//		
//		//+mdfc
//		СтруктураДоработки = Новый Структура();
//		Если RegularExpressions.ТестRegExp(СтрокаВыписки.НазначениеПлатежа, "(Оплата за товары нар)") Тогда
//			
//			СтрокаВыписки.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоНаименованию("Взаиморасчеты с ЦУМом/ДЛТ, поступление");
//			СтруктураДоработки.Вставить("КатегорияВзаиморасчетов", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("ЦУМ, расчеты за товар Россия", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКатегорииВзаиморасчетов)); // Справочники.КатегорииВзаиморасчетов.НайтиПоНаименованию("ЦУМ, расчеты за товар Россия", Истина));
//			
//		ИначеЕсли RegularExpressions.ТестRegExp(СтрокаВыписки.НазначениеПлатежа, "(Суточн)") Тогда
//			
//			СтруктураДоработки.Вставить("ВидКомандировочныхРасходов", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("Прочие командировочные расходы", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыКомандировочныхРасходов));
//			
//		ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "(УФК по г.Москве \(ФТС России\))") ИЛИ RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "ФТС России") Тогда
//			
//			Если RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(ТОП МОТО)") ИЛИ RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(Маранелло)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Авто мото", Истина));
//			ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(М Фэшн)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Одежда", Истина));
//			ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(Меркури Мода)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Одежда", Истина));
//			ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(Меркури Классик)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Ювелирка", Истина));
//			КонецЕсли;
//			
//		ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "(УФК по г. Москве \(Государственная инспекция пробирного надзора по г. Москве и Московской области\))") Тогда 
//			
//			Если RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(ТОП МОТО)") ИЛИ RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(Маранелло)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Авто мото", Истина));
//			ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(М Фэшн)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Одежда", Истина));
//			ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(Меркури Мода)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Одежда", Истина));
//			ИначеЕсли RegularExpressions.ТестRegExp(НаименованиеОрганизации, "(Меркури Классик)") Тогда
//				СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Логистика-Ювелирка", Истина));
//			КонецЕсли;
//			
//		ИначеЕсли НаименованиеОрганизации = "МБС" И ВидДвиженияДСНаименование = "Инкассация" Тогда
//			//СтруктураДоработки.Вставить("ОтвЛицо", Справочники.ФизЛица.НайтиПоНаименованию("Михайлова О.Н.", Истина));
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Возврат денег с депозита" ИЛИ НаименованиеКатегорииОперации = "Перевод денег на депозит" Тогда
//			
//			// Ищем депозит
//			Если НаименованиеОрганизации = "М Стиль" И НаименованиеСчетаОрганизации = "СРБ" Тогда
//				НаименованиеДепозита = "Депозит М Стиль (СРБ) однодневный";
//			Иначе
//				НаименованиеДепозита = "Депозит " + СокрЛП(НаименованиеОрганизации) + " (" + НаименованиеСчетаОрганизации + ")";
//			КонецЕсли;
//			
//			Депозит = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию(НаименованиеДепозита, Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКредитыИОбязательства);
//			Если НЕ ЗначениеЗаполнено(Депозит) Тогда
//				Сообщить("Не найден депозит " + НаименованиеДепозита + "!");
//			Иначе
//				СтруктураДоработки.Вставить("Депозит", Депозит);
//			КонецЕсли;
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Взаиморасчеты с ЦУМом/ДЛТ, поступление" Тогда
//			СтруктураДоработки.Вставить("КатегорияВзаиморасчетов", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("ЦУМ, расчеты прочие", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоКатегорииВзаиморасчетов));
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Получение банковского кредита (краткосрочного)" Тогда
//			СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("M-Invest", Истина));
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Расходы, связанные с COVID" Тогда
//			СтруктураДоработки.Вставить("ВидРасходовCOVID", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("Прочие расходы", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыРасходовCOVID));
//			
//			// Командировочные	
//		ИначеЕсли НаименованиеКатегорииОперации = "Командировочные расходы" И RegularExpressions.ТестRegExp(СтрокаВыписки.НазначениеПлатежа, "(Гостиница)") Тогда
//			СтруктураДоработки.Вставить("ВидКомандировочныхРасходов", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("Проживание", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыКомандировочныхРасходов));
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Командировочные расходы" И RegularExpressions.ТестRegExp(СтрокаВыписки.НазначениеПлатежа, "(билет)") Тогда
//			СтруктураДоработки.Вставить("ВидКомандировочныхРасходов", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("Билеты", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыКомандировочныхРасходов));
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Командировочные расходы" Тогда
//			СтруктураДоработки.Вставить("ВидКомандировочныхРасходов", Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоНаименованию("Прочие командировочные расходы", Истина,, ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСубконтоВидыКомандировочныхРасходов));
//			// -- командировочные
//			
//		ИначеЕсли НаименованиеКатегорииОперации = "Коммунальные платежи" И RegularExpressions.ТестRegExp(НаименованиеКонтрагента, "(Мосводоканал, АО)") Тогда
//			СтруктураДоработки.Вставить("ЦФУ", Справочники.ЦФУ.НайтиПоНаименованию("Площадка Третьяковский проезд", Истина));
//			СтруктураДоработки.Вставить("НДС", СтрокаВыписки.СуммаНДС);
//			
//		КонецЕсли;
//		//-mdfc
//		
//		Если СтрокаВыписки.КатегорияОперации.Пустая() Тогда
//			Возврат;
//		КонецЕсли;
//		
//		Для Каждого СтрокаТЧ Из Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)) Цикл
//			Объект.УправленческийУчет.Удалить(СтрокаТЧ);
//		КонецЦикла;
//		
//		Для Каждого СтруктураДанных Из УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(СтрокаВыписки.КатегорияОперации) Цикл
//			НоваяСтрока = Объект.УправленческийУчет.Добавить();
//			НоваяСтрока.GUIDСтрокиВыписки = GUIDСтрокиВыписки;
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
//		КонецЦикла;
//		
//		УправленческийУчетСервер.ОбновитьТаблицуУправленческогоУчета(ЭтаФорма.Объект, Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)));
//		
//		Для Каждого СтрокаТЧ Из Объект.УправленческийУчет.НайтиСтроки(Новый Структура("GUIDСтрокиВыписки", GUIDСтрокиВыписки)) Цикл
//			Если СтруктураДоработки.Свойство(СтрокаТЧ.Имя) Тогда
//				СтрокаТЧ.Значение = СтруктураДоработки[СтрокаТЧ.Имя];
//			КонецЕсли;
//		КонецЦикла;
//		
//	КонецЕсли;

	////
	////Если РучноеИзменение Тогда
	////	
	////	Для Каждого Элемент Из НеизменяемыеРеквизиты Цикл
	////		
	////		врСтрокиПоиска = врТаблицаКатегорийОпераций.НайтиСтроки(Новый Структура("Имя, НомерСтрокиВыписки", Элемент, СтрокаВыписки.НомерСтроки));
	////		СтрокиПоиска = ТаблицаКатегорийОпераций.НайтиСтроки(Новый Структура("Имя, НомерСтрокиВыписки", Элемент, СтрокаВыписки.НомерСтроки));
	////		Если врСтрокиПоиска.Количество() > 0
	////			И СтрокиПоиска.Количество() > 0 Тогда
	////			
	////			СтрокиПоиска[0].Значение = врСтрокиПоиска[0].Значение;
	////			
	////		КонецЕсли;
	////		
	////	КонецЦикла;
	////	
	////КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВыпискиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		
		Если НоваяСтрока Тогда
			Элемент.ТекущиеДанные.GUIDСтрокиВыписки = СокрЛП(Новый УникальныйИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВыпискиСтатьяДДСПриИзменении(Элемент)
	ОбработкаИзмененияЭлементаДанныхВыпискиНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЭлементаДанныхВыпискиНаКлиенте(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Имя = "ДанныеВыпискиСтатьяДДС" Тогда
		
		СтатьяДДС = ТекущиеДанные.СтатьяДДС;
		
		Если СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.Приход")
			ИЛИ СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.ПриходПоКК") Тогда
			
			ТекущиеДанные.НедоступностьКолонкиПриход = Ложь;
			ТекущиеДанные.НедоступностьКолонкиРасход = Истина;
			
		Иначе
			
			ТекущиеДанные.НедоступностьКолонкиПриход = Истина;
			ТекущиеДанные.НедоступностьКолонкиРасход = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаИзмененияЭлементаДанныхВыпискиНаСервере(Элементы.ДанныеВыписки.ТекущаяСтрока, Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияЭлементаДанныхВыпискиНаСервере(ИдентификаторСтроки, ИмяЭлемента)
	
	СтрокаОбработки = Объект.ДанныеВыписки.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ИмяЭлемента = "ДанныеВыпискиСтатьяДДС" Тогда
		
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ДанныеВыпискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ДанныеВыпискиНомерЗаявки" Тогда
		ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			
			МассивЗаявокВДокументе = Новый Массив;
			
			Для Каждого СтрокаТЧ Из Объект.ДанныеВыписки Цикл
				
				Если СтрокаТЧ.НомерЗаявки <> "" Тогда
					МассивЗаявокВДокументе.Добавить(СтрокаТЧ.НомерЗаявки);
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыОткрытия = Новый Структура("ДатаАнализа, ОрганизацияАнализа, ИспользуемыеЗаявки", Объект.Дата, Объект.Организация, МассивЗаявокВДокументе);
			ОткрытьФорму("Документ.Выписка.Форма.ФормаПоискаЗаявки", ПараметрыОткрытия, ЭтотОбъект,,,, Новый ОписаниеОповещения("ДанныеВыпискиВыборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры



&НаКлиенте
Процедура ДанныеВыпискиВыборЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ДанныеВыписки.ТекущиеДанные;
	
	Если Результат <> Неопределено И ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Если ЗначениеЗаполнено(ТекущиеДанные.КатегорияОперации) Тогда
			КатегорияОперацииПриИзмененииНаСервере(ТекущиеДанные.КатегорияОперации, ТекущиеДанные.GUIDСтрокиВыписки);
			ОбновитьТаблицуУправленческогоУчетаСтрокиВыпискиНаСервере(ТекущиеДанные.GUIDСтрокиВыписки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




