Перем СписокСохраненныхЗаявок Экспорт;
Перем СписокТекущихЗаявок Экспорт;

Процедура ОбработкаПроведения(Отказ, Режим)

	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Для Каждого СтрокаТЧ Из Планирование Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.GUIDСтрокиФинансовогоПлана) Тогда
			СтрокаТЧ.GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	Если НЕ ПометкаУдаления И РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	мРубли = ПараметрыСеанса.ВалютаРегламентированногоУчета;
	УстановитьПривилегированныйРежим(Истина);
	Движения.ПланируемыеДвижения.Очистить();

	// ***********************
	
	Если НЕ ПометкаУдаления Тогда
		
		// --- Статусы документов
		
		//Если ТипЗнч(СписокСохраненныхЗаявок) = Тип("Массив") И ТипЗнч(СписокТекущихЗаявок) = Тип("Массив") Тогда // Работа с SQL
		//	
		//	МассивЗаявкиДобавились = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокТекущихЗаявок, СписокСохраненныхЗаявок);
		//	МассивЗаявкиУдалились = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСохраненныхЗаявок, СписокТекущихЗаявок);
		//	
		//	Запрос = Новый Запрос("ВЫБРАТЬ
		//	|	Заявка.Ссылка КАК Заявка,
		//	|	Заявка.IDЗаявки КАК IDЗаявки
		//	|ИЗ
		//	|	Документ.Заявка КАК Заявка
		//	|ГДЕ
		//	|	Заявка.Ссылка В (&МассивЗаявок)");
		//	
		//	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявкиДобавились);
		//	
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	Пока Выборка.Следующий() Цикл
		//		ОчередьSQL.ДобавитьВОчередь(РаботаСЗаявкамиСервер.ТекстЗапроса_ВзятьВРаботу(Выборка.IDЗаявки));
		//	КонецЦикла;
		//	
		//	
		//	Запрос = Новый Запрос("ВЫБРАТЬ
		//	|	Заявка.Ссылка КАК Ссылка
		//	|ПОМЕСТИТЬ ВТ_Заявки
		//	|ИЗ
		//	|	Документ.Заявка КАК Заявка
		//	|ГДЕ
		//	|	Заявка.Ссылка В(&СписокЗаявок)
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|ВЫБРАТЬ
		//	|	ВТ_Заявки.Ссылка КАК Заявка,
		//	|	СтатусыЗаявок.Заявка КАК ЗаявкаРегистра,
		//	|	СтатусыЗаявок.Статус КАК Статус,
		//	|	ВТ_Заявки.Ссылка.IDЗаявки КАК IDЗаявки
		//	|ИЗ
		//	|	ВТ_Заявки КАК ВТ_Заявки
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявок КАК СтатусыЗаявок
		//	|		ПО ВТ_Заявки.Ссылка = СтатусыЗаявок.Заявка
		//	|			И (СтатусыЗаявок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок.ВРаботе))
		//	|			И (СтатусыЗаявок.Документ ССЫЛКА Документ.ФинансовыйПлан)
		//	|			И (СтатусыЗаявок.Документ <> &Регистратор)
		//	|ГДЕ
		//	|	СтатусыЗаявок.Заявка ЕСТЬ NULL");
		//	
		//	Запрос.УстановитьПараметр("Регистратор", Ссылка);
		//	Запрос.УстановитьПараметр("СписокЗаявок", МассивЗаявкиУдалились);
		//	
		//	РезультатЗапроса = Запрос.Выполнить();
		//	
		//	Выборка = РезультатЗапроса.Выбрать();
		//	
		//	Пока Выборка.Следующий() Цикл
		//		ОчередьSQL.ДобавитьВОчередь(РаботаСЗаявкамиСервер.ТекстЗапроса_ОтменитьВзятиеВРаботу(Выборка.IDЗаявки));
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		//Если Истина ИЛИ НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("АвтоматическаяЗапись") Тогда
		//	
		//	// --- Планируемые движения
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = "ВЫБРАТЬ
		//	|	ФинансовыйПланПланирование.Ссылка.Дата КАК Период,
		//	|	ФинансовыйПланПланирование.ПланируемаяОплата КАК ПланируемаяОплата,
		//	|	ФинансовыйПланПланирование.Организация КАК Организация,
		//	|	ФинансовыйПланПланирование.СчетОрганизации КАК СчетОрганизации,
		//	|	ЕСТЬNULL(ФинансовыйПланПланирование.Контрагент.ВнутренняяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияПолучатель,
		//	|	ЕСТЬNULL(ФинансовыйПланПланирование.СчетКонтрагента.ПарныйБанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК СчетОрганизацииПолучатель,
		//	|	ФинансовыйПланПланирование.Валюта КАК Валюта,
		//	|	ФинансовыйПланПланирование.Сумма КАК Сумма,
		//	|	ФинансовыйПланПланирование.ВалютнаяСумма КАК ВалютнаяСумма,
		//	|	ФинансовыйПланПланирование.Организация.ВнутреннийКонтрагент КАК Контрагент,
		//	|	ФинансовыйПланПланирование.СчетОрганизации.ПарныйБанковскийСчет КАК СчетКонтрагента,
		//	|	ФинансовыйПланПланирование.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаДенежныхСредствСчета,
		//	|	ВЫРАЗИТЬ(ЕСТЬNULL(ФинансовыйПланПланирование.Контрагент.ВнутренняяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Справочник.Организации).ВидОрганизации КАК ВидОрганизацииПолучателя,
		//	|	ВЫРАЗИТЬ(ЕСТЬNULL(ФинансовыйПланПланирование.Контрагент.ВнутренняяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Справочник.Организации).ЭтоИностраннаяОрганизация КАК ОрганизацияПолучателяЭтоИностраннаяОрганизация,
		//	|	ФинансовыйПланПланирование.СчетКонтрагента.ВалютаДенежныхСредств КАК СчетПолучателяВалютаДенежныхСредствСчета
		//	|ИЗ
		//	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		//	|		ПО ФинансовыйПланПланирование.Контрагент.ВнутренняяОрганизация = БанковскиеСчета.Владелец
		//	|			И ФинансовыйПланПланирование.СчетКонтрагента.НомерСчета = БанковскиеСчета.НомерСчета
		//	|			И ФинансовыйПланПланирование.СчетКонтрагента.Банк = БанковскиеСчета.Банк
		//	|			И (ФинансовыйПланПланирование.Контрагент.ВнутренняяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//	|ГДЕ
		//	|	ФинансовыйПланПланирование.Ссылка = &Ссылка
		//	|	И НЕ ФинансовыйПланПланирование.ОтменаПлатежа
		//	|	И ФинансовыйПланПланирование.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		//	|	И ФинансовыйПланПланирование.Сумма <> 0
		//	|	И ФинансовыйПланПланирование.СчетОрганизации.ПарныйБанковскийСчет <> ФинансовыйПланПланирование.СчетКонтрагента
		//	|	И ФинансовыйПланПланирование.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)";
		//	
		//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		//	
		//	РезультатЗапроса = Запрос.Выполнить();
		//	
		//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//	
		//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//		
		//		ЗаписьПриход = Движения.ПланируемыеДвижения.ДобавитьПриход();
		//		ЗаписьПриход.Период = НачалоДня(ВыборкаДетальныеЗаписи.Период);
		//		ЗаполнитьЗначенияСвойств(ЗаписьПриход, ВыборкаДетальныеЗаписи, "Организация, СчетОрганизации, ПланируемаяОплата, Валюта, Сумма, ВалютнаяСумма");
		//		
		//		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетОрганизацииПолучатель)
		//			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПланируемаяОплата) Тогда
		//			
		//			ЗаписьРасход = Движения.ПланируемыеДвижения.ДобавитьРасход();
		//			ЗаполнитьЗначенияСвойств(ЗаписьРасход,
		//				Новый Структура("Период, Организация, СчетОрганизации, ПланируемаяОплата, Валюта, Сумма, ВалютнаяСумма",
		//				НачалоДня(ВыборкаДетальныеЗаписи.Период),
		//				ВыборкаДетальныеЗаписи.ОрганизацияПолучатель,
		//				ВыборкаДетальныеЗаписи.СчетОрганизацииПолучатель,
		//				ВыборкаДетальныеЗаписи.ПланируемаяОплата,
		//				ВыборкаДетальныеЗаписи.Валюта,
		//				ВыборкаДетальныеЗаписи.Сумма,
		//				ВыборкаДетальныеЗаписи.ВалютнаяСумма
		//			));
		//			
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	//Движения.ПланируемыеДвижения.Записать();
	//РаботаСЗаявкамиСервер.ОбработатьЗаявкиФинансовогоПланаИзСсылки(Ссылка, ПометкаУдаления);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КлючСтруктуры(Структура) Экспорт
	
	Ключ = "";
	Для Каждого КлючЗначение Из Структура Цикл
		Ключ = Ключ + КлючЗначение.Ключ + КлючЗначение.Значение;
	КонецЦикла;
	
	Возврат Ключ;
	
КонецФункции




Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	// Проверяем снятие пометки удаления
	Если НЕ ПометкаУдаления И Ссылка.ПометкаУдаления Тогда
		
		МассивНомеровЗаявок = Новый Массив;
		Для Каждого СтрокаТЧ Из Планирование Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.НомерЗаявки) Тогда
				МассивНомеровЗаявок.Добавить(СтрокаТЧ.НомерЗаявки);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйПланПланирование.Ссылка КАК ФинансовыйПлан,
		|	ФинансовыйПланПланирование.НомерЗаявки КАК НомерЗаявки
		|ИЗ
		|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
		|ГДЕ
		|	НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления
		|	И ФинансовыйПланПланирование.НомерЗаявки В(&НомераЗаявок)
		|ИТОГИ ПО
		|	ФинансовыйПлан";
		
		Запрос.УстановитьПараметр("НомераЗаявок", МассивНомеровЗаявок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаФинансовыйПлан = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФинансовыйПлан.Следующий() Цикл

			ВыборкаДетальныеЗаписи = ВыборкаФинансовыйПлан.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщить("В " + ВыборкаФинансовыйПлан.ФинансовыйПлан + " существует заявка " + ВыборкаДетальныеЗаписи.НомерЗаявки);
				Отказ = Истина;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Отказ = Истина Тогда
			Сообщить("Снятие пометки удаления невозможно!");
		Иначе
			
			СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
			
			Для Каждого СтрокаТЧ Из Планирование Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.НомерЗаявки) Тогда
					РаботаСЗаявкамиСервер.SQL_ЗаблокироватьЗаявку(СоединениеАДО, СтрокаТЧ.IDЗаявки);
				КонецЕсли;
			КонецЦикла; 	
			
		КонецЕсли;
		
	КонецЕсли;
		
	
	//Если НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("АвтоматическаяЗапись") Тогда
	//	ОбработатьПланируемыеОплаты();
	//КонецЕсли;
	
	//Для Каждого СтрокаТЧ Из Планирование Цикл
	//	СтрокаТЧ._Валюта = СтрокаТЧ.СчетОрганизации.ВалютаДенежныхСредств;
	//КонецЦикла;
	
	МассивОрганизаций = Новый Массив;
	МассивСчетовОрганизации = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Планирование Цикл
		МассивОрганизаций.Добавить(СтрокаТЧ.Организация);
		МассивСчетовОрганизации.Добавить(СтрокаТЧ.СчетОрганизации);
	КонецЦикла;
	
	ЗапросПоВалютамСчетов = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Валютный КАК Валютный,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В (&МассивСчетов)");
	
	ЗапросПоВалютамСчетов.УстановитьПараметр("МассивСчетов", МассивСчетовОрганизации);
	
	ВыборкаПоСчетам = ЗапросПоВалютамСчетов.Выполнить().Выбрать();
	
	Для Каждого СтрокаТЧ Из Планирование Цикл
		ВыборкаПоСчетам.Сбросить();
		Если ВыборкаПоСчетам.НайтиСледующий(Новый Структура("Ссылка", СтрокаТЧ.СчетОрганизации)) Тогда
			//СтрокаТЧ._Валюта = ВыборкаПоСчетам.ВалютаДенежныхСредств;	
			СтрокаТЧ.Валюта = ВыборкаПоСчетам.ВалютаДенежныхСредств;	
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&Организации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Комментарий = "";
	Пока Выборка.Следующий() Цикл
		
		Если Комментарий = "" Тогда
			Комментарий = Выборка.Наименование;
		Иначе
			Комментарий = Комментарий + "; " + Выборка.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ссылка.Пустая() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры


