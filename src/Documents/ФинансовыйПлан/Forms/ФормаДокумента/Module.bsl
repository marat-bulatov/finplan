
&НаКлиенте
Процедура ПланированиеПередУдалением(Элемент, Отказ)
	
	// Проверка на оплаченность
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Планирование.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТаблицы.ОплатаВыполнена Тогда
			
			ПоказатьПредупреждение(, "Невозможно удалить оплаченные строки!");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерЗаявки) И СтрокаТаблицы.ЗаявкаВзятаВРаботу Тогда
			//ОтменитьВзятиеВРаботуНаСервере(СтрокаТаблицы.IDЗаявки);
			СтрокаТаблицы.ЗаявкаВзятаВРаботу = Ложь;
		КонецЕсли;
		
		//УдалитьСтрокуРегистра(СтрокаТаблицы);

	КонецЦикла;
	
КонецПроцедуры



&НаСервере
Процедура ОтменитьВзятиеВРаботуНаСервере(IDЗаявки)
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	РаботаСЗаявкамиСервер.SQL_ОтменитьВзятиеВРаботу(СоединениеАДО, IDЗаявки);	
КонецПроцедуры


#Область Общее

&НаСервере
Функция РасчитатьВалютнуюСуммуСУсловиями(Данные)
	Возврат РаботаСЗаявкамиСервер.РасчитатьВалютнуюСуммуСУсловиями(Данные);
КонецФункции

&НаСервере
Процедура УстановитьФлагиДоступностиРеквизитов(ИдентификаторСтроки = Неопределено)
	
	// Подготовка таблицы
	
	ТаблицаПланирование = Новый ТаблицаЗначений;
	ТаблицаПланирование.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПланирование.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПланирование.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаПланирование.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПланирование.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаПланирование.Колонки.Добавить("СтатьяДДС", Новый ОписаниеТипов("СправочникСсылка.СтатьиДДС"));
	ТаблицаПланирование.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПланирование.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Строка"));
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		СтрокаТЧ = Объект.Планирование.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ТаблицаПланирование.Добавить(), СтрокаТЧ);
		
	Иначе
		
		Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПланирование.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаПланирование.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.Организация КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.СчетОрганизации КАК Справочник.БанковскиеСчета) КАК СчетОрганизации,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.СчетКонтрагента КАК Справочник.БанковскиеСчета) КАК СчетКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.СтатьяДДС КАК Справочник.СтатьиДДС) КАК СтатьяДДС,
	|	ВЫРАЗИТЬ(ТаблицаПланирование.Валюта КАК Справочник.Валюты) КАК Валюта,
	|	ТаблицаПланирование.НомерЗаявки КАК НомерЗаявки
	|ПОМЕСТИТЬ ВТ_ТаблицаПланирование
	|ИЗ
	|	&ТаблицаПланирование КАК ТаблицаПланирование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПланирование.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаПланирование.Организация.Ссылка КАК Организация,
	|	ВТ_ТаблицаПланирование.СчетОрганизации КАК СчетОрганизации,
	|	ВТ_ТаблицаПланирование.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПланирование.СчетКонтрагента КАК СчетКонтрагента,
	|	ВТ_ТаблицаПланирование.СтатьяДДС КАК СтатьяДДС,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаПланирование.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.РоссийскийРубль)
	|		ИНАЧЕ ВТ_ТаблицаПланирование.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ВТ_ТаблицаПланирование.НомерЗаявки КАК НомерЗаявки,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.Контрагент.ВнутренняяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ВнутренняяОрганизацияКонтрагента,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СтатьяДДС.РасчитыватьСуммуНДС, ЛОЖЬ) КАК РасчитыватьСуммуНДС,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СтатьяДДС.ВидимостьКонтрагента, ЛОЖЬ) КАК ВидимостьКонтрагента,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СтатьяДДС.ВидимостьСчетаКонтрагента, ЛОЖЬ) КАК ВидимостьСчетаКонтрагента,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СчетОрганизации.ВалютаДенежныхСредств, ЗНАЧЕНИЕ(Справочник.Валюты.РоссийскийРубль)) КАК ВалютаСчетаОрганизации,
	|	ЕСТЬNULL(ВТ_ТаблицаПланирование.СчетКонтрагента.ВалютаДенежныхСредств, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаСчетаКонтрагента
	|ИЗ
	|	ВТ_ТаблицаПланирование КАК ВТ_ТаблицаПланирование");
	
	Запрос.УстановитьПараметр("ТаблицаПланирование", ТаблицаПланирование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого СтрокаТЧ Из Объект.Планирование.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки)) Цикл
			
			СтруктураРезультат = Новый Структура;
			СтруктураРезультат.Вставить("НедоступностьПоляСумма", Ложь);
			СтруктураРезультат.Вставить("НедоступностьПоляВалютнаяСумма", Выборка.ВалютаСчетаОрганизации = ПараметрыСеанса.ВалютаРегламентированногоУчета И НЕ ЗначениеЗаполнено(Выборка.НомерЗаявки) И (НЕ ЗначениеЗаполнено(Выборка.ВалютаСчетаКонтрагента) ИЛИ Выборка.ВалютаСчетаКонтрагента = ПараметрыСеанса.ВалютаРегламентированногоУчета));
			СтруктураРезультат.Вставить("НедоступностьПоляСуммаНДС", НЕ Выборка.РасчитыватьСуммуНДС ИЛИ Выборка.ВалютаСчетаОрганизации <> ПараметрыСеанса.ВалютаРегламентированногоУчета);
			//СтруктураРезультат.Вставить("НедоступностьПоляСчетКонтрагента", ?(Выборка.ВидимостьСчетаКонтрагента И ЗначениеЗаполнено(Выборка.ВнутренняяОрганизацияКонтрагента), Ложь, Истина));
			СтруктураРезультат.Вставить("НедоступностьПоляСчетКонтрагента", Ложь);
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокБанковскихСчетов(Объект.Дата, ТекущиеДанные.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокБанковскихСчетов(Объект.Дата, ТекущиеДанные.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТаблицыПланирования(СтрокиТаблицы, ИнформацияОЗаявках)
	
	мРубли = ПараметрыСеанса.ВалютаРегламентированногоУчета;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерЗаявки) Тогда
			
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИнформациюПоОстаткамНаСчетахНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненностиСтрок(Отказ)
	
	РеквизитыДляПроверки = Новый Структура;
	//РеквизитыДляПроверки.Вставить("Организация", "Организация");
	//РеквизитыДляПроверки.Вставить("СчетОрганизации", "Счет плательщика");
	//РеквизитыДляПроверки.Вставить("НазначениеПлатежа", "Назначение платежа");
	РеквизитыДляПроверки.Вставить("СтатьяДДС", "Статья движения денежных средств");
	РеквизитыДляПроверки.Вставить("Сумма", "Сумма");
	
	МассивСчетовСОтрицательнымиОстатками = ПолучитьСчетаСОтрицательнымиОстатками();
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		
		Для Каждого КлючЗначение Из РеквизитыДляПроверки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ[КлючЗначение.Ключ]) И ЗначениеЗаполнено(СтрокаТЧ.Организация) Тогда
				Поле = "Объект.Планирование[" + Объект.Планирование.Индекс(СтрокаТЧ) + "]." + КлючЗначение.Ключ;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит " + КлючЗначение.Значение,, Поле,, Отказ);
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСчетовСОтрицательнымиОстатками.Найти(СтрокаТЧ.СчетОрганизации) <> Неопределено Тогда
			
			Поле = "Объект.Планирование[" + Объект.Планирование.Индекс(СтрокаТЧ) + "].СчетОрганизации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На счете отрицательный остаток!",, Поле,, Отказ);	
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ВалютаБанковскогоСчета(Счет)
	Возврат БанковскиеСчетаВызовСервера.ВалютаБанковскогоСчета(Счет);
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОКурсахВалют()
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период КАК Период,
		|	""$"" КАК Валюта,
		|	ВЫРАЗИТЬ(КурсыВалютСрезПоследних.Курс КАК ЧИСЛО(10, 4)) КАК Курс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАнализа, Валюта.Код = ""840"") КАК КурсыВалютСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период,
		|	""EUR"",
		|	ВЫРАЗИТЬ(КурсыВалютСрезПоследних.Курс КАК ЧИСЛО(10, 4))
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАнализа, Валюта.Код = ""978"") КАК КурсыВалютСрезПоследних");
		
		Запрос.УстановитьПараметр("ДатаАнализа", Объект.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтекИнформации = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Если СтекИнформации.Количество() <> 0 Тогда
				СтекИнформации.Добавить(", ");
			КонецЕсли;
			
			СтекИнформации.Добавить(Новый ФорматированнаяСтрока(Выборка.Валюта, Новый Шрифт(,, Истина,), WebЦвета.ТемноЗеленый));
			СтекИнформации.Добавить(" (");
			СтекИнформации.Добавить(Новый ФорматированнаяСтрока(Формат(Выборка.Период, "ДФ=dd.MM"),, WebЦвета.Синий));
			СтекИнформации.Добавить(") ");
			СтекИнформации.Добавить(Новый ФорматированнаяСтрока("" + Формат(Выборка.Курс, "ЧДЦ=4"), Новый Шрифт(,, Истина,)));
			
		КонецЦикла;
		
		СтрокаИнформации = Новый ФорматированнаяСтрока("");
		
		Для Каждого Элемент Из СтекИнформации Цикл
			СтрокаИнформации = Новый ФорматированнаяСтрока(СтрокаИнформации, Элемент);
		КонецЦикла;
			
		Элементы.ДекорацияКурсыВалют.Заголовок = СтрокаИнформации;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьИнформациюОКурсахВалют();
	
	Если ЭтаФорма.Объект.Планирование.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект), "Пересчитать рублевые суммы валютных платежей?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПересчитатьРублевыеСуммыВалютныхПлатежей();
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьРублевыеСуммыВалютныхПлатежей()
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		
		Если СтрокаТЧ.ВалютаЗаявки <> Справочники.Валюты.РоссийскийРубль
			И СтрокаТЧ.Валюта = Справочники.Валюты.РоссийскийРубль Тогда
			
			Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаТЧ.ВалютнаяСумма, СтрокаТЧ.ВалютаЗаявки, СтрокаТЧ.Валюта, Объект.Дата, СтрокаТЧ.КурсОплатыФиксированный, СтрокаТЧ.Процент);
			
			СтрокаТЧ.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
			Если СтрокаТЧ.СуммаНДС <> 0 Тогда
				СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма * 20 / 120;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция СтатьиДДСРасход()
	Возврат Справочники.СтатьиДДС.СтатьиДДСРасход();
КонецФункции

&НаСервере
Функция ПолучитьСписокБанковскихСчетов(Дата, Владелец)
	Возврат РаботаСФормамиДокументов.ПолучитьСписокБанковскихСчетов(Дата, Владелец);
КонецФункции

&НаКлиенте
Процедура ИмпортИзФинпланов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИмпортИзФинплановЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ФинансовыйПлан.Форма.ФормаИмпорта", Новый Структура("ТекущийДокумент", Объект.Ссылка), ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзФинплановЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		//ИмпортИзФинплановНаСервере(Результат.ФинансовыйПлан, Результат.МассивСтрок, Результат.УдалитьИсходныеСтроки);
		ИмпортИзФинплановНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИмпортИзФинплановНаСервере(Данные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФинансовыйПланПланирование.НомерЗаявки КАК НомерЗаявки,
	|	ФинансовыйПланПланирование.Организация КАК Организация,
	|	ФинансовыйПланПланирование.СчетОрганизации КАК СчетОрганизации,
	|	ФинансовыйПланПланирование.СтатьяДДС КАК СтатьяДДС,
	|	ФинансовыйПланПланирование.Контрагент КАК Контрагент,
	|	ФинансовыйПланПланирование.СчетКонтрагента КАК СчетКонтрагента,
	|	ФинансовыйПланПланирование.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ФинансовыйПланПланирование.Сумма КАК Сумма,
	|	ФинансовыйПланПланирование.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ФинансовыйПланПланирование.СуммаНДС КАК СуммаНДС,
	|	ФинансовыйПланПланирование.Валюта КАК Валюта,
	|	ФинансовыйПланПланирование.КатегорияОперации КАК КатегорияОперации,
	|	ФинансовыйПланПланирование.Процент КАК Процент,
	|	ФинансовыйПланПланирование.КурсОплатыФиксированный КАК КурсОплатыФиксированный,
	|	ФинансовыйПланПланирование.Договор КАК Договор,
	|	ФинансовыйПланПланирование.Комментарий КАК Комментарий,
	|	ФинансовыйПланПланирование.АвторСтроки КАК АвторСтроки,
	|	ФинансовыйПланПланирование.GUIDСтрокиФинансовогоПлана КАК GUIDСтрокиФинансовогоПлана
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	ФинансовыйПланПланирование.Ссылка = &Ссылка
	|	И ФинансовыйПланПланирование.НомерСтроки В(&МассивСтрок)";
	
	Запрос.УстановитьПараметр("МассивСтрок", Данные.МассивСтрок);
	Запрос.УстановитьПараметр("Ссылка", Данные.ФинансовыйПлан);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МодифицированностьДокумента = Ложь;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ Данные.УдалитьИсходныеСтроки Тогда
			ЕстьСтрокаСТакимGUID = Объект.Планирование.НайтиСтроки(Новый Структура("GUIDСтрокиФинансовогоПлана", ВыборкаДетальныеЗаписи.GUIDСтрокиФинансовогоПлана)).Количество() > 0;
		Иначе
			ЕстьСтрокаСТакимGUID = Ложь;
		КонецЕсли;
		
		ЕстьТакаяЗаявка = ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерЗаявки) И Объект.Планирование.НайтиСтроки(Новый Структура("НомерЗаявки", ВыборкаДетальныеЗаписи.НомерЗаявки)).Количество() > 0;
		
		Если НЕ ЕстьСтрокаСТакимGUID И НЕ ЕстьТакаяЗаявка Тогда
			
			НоваяСтрока = Объект.Планирование.Добавить();
			//НоваяСтрока.АвторСтроки = ПараметрыСеанса.ТекущийПользователь;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			Модифицированность = Истина;
			МодифицированностьДокумента = Истина;
			
			Если НЕ Данные.УдалитьИсходныеСтроки Тогда
				НоваяСтрока.GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Данные.УдалитьИсходныеСтроки Тогда
		
		ФинансовыйПланОбъект = Данные.ФинансовыйПлан.ПолучитьОбъект();

		Если Данные.ОчиститьИсходныйДокумент Тогда
			ФинансовыйПланОбъект.Планирование.Очистить();
			ФинансовыйПланОбъект.УправленческийУчетЗаявок.Очистить();
			
		Иначе
			МассивСтрокНаУдаление = Новый Массив;
		
			Для Каждого НомерСтроки Из Данные.МассивСтрок Цикл
				СтрокаНаУдаление = ФинансовыйПланОбъект.Планирование[НомерСтроки - 1];
				МассивСтрокНаУдаление.Добавить(СтрокаНаУдаление);
			КонецЦикла;
			
			Для Каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
				ФинансовыйПланОбъект.Планирование.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
		КонецЕсли;
		
		ФинансовыйПланОбъект.Записать();
		
	КонецЕсли;
	
	Записать(Новый Структура("АвтоматическаяЗапись", Истина));
	
	ЗаполнитьИнформациюПоОстаткамНаСчетахНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоПлатежам(Команда)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыОтчета = ПолучитьПараметрыОтчетаПоПлатежамДляЗапуска(Новый Структура("Дата, Организация, Контрагент", Объект.Дата, ТекущиеДанные.Организация, ТекущиеДанные.Контрагент));
		ОткрытьФорму("Отчет.ОтчетПоПлатежам.ФормаОбъекта", ПараметрыОтчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОтчетаПоПлатежамДляЗапуска(СтруктураДанных)
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ДобавитьМесяц(СтруктураДанных.Дата, -6);
	ПериодОтчета.ДатаОкончания = СтруктураДанных.Дата;
	
	СхемаКомпоновкиДанных = Отчеты.ОтчетПоПлатежам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период").Значение = ПериодОтчета;
		
	ОтборОтчета = Новый Структура;
	
	ПользовательскиеНастройкиКомпоновкиДанных = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	НовыйОтбор = ПользовательскиеНастройкиКомпоновкиДанных.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
    НовыйОтбор.ИдентификаторПользовательскойНастройки = "Отбор";    
	
	Если ЗначениеЗаполнено(СтруктураДанных.Организация) Тогда
		ОтборОтчета.Вставить("Организация", СтруктураДанных.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.Контрагент) Тогда
		ОтборОтчета.Вставить("Контрагент", СтруктураДанных.Контрагент);
	КонецЕсли;
	
	ПараметрыОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
    ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчета.Вставить("ФормироватьСразу", Истина);
	ПараметрыОтчета.Вставить("РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Истина);
    ПараметрыОтчета.Вставить("КлючВарианта", "Отчет по платежам");
	
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыОтчета.Вставить("Отбор", ОтборОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоПлатежам(Команда)
	ОткрытьФорму("Отчет.ОтчетПоПлатежам.ФормаОбъекта",, Истина);
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.Печать 
&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) 
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект); 
КонецПроцедуры 
// Конец СтандартныеПодсистемы.Печать 
// СтандартныеПодсистемы.ПодключаемыеКоманды 
&НаКлиенте 
Процедура Подключаемый_ВыполнитьКоманду(Команда) 
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект); 
КонецПроцедуры 
&НаСервере 
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) 
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат); 
КонецПроцедуры 
&НаКлиенте 
Процедура Подключаемый_ОбновитьКоманды() 
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект); 
КонецПроцедуры 
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедуры

&НаСервере
Функция ПолучитьКонтрагентаБанкаИзСчетаОрганизации(БанковскийСчет)

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Банк.Контрагент КАК БанкКонтрагент
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет");
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.БанкКонтрагент;
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПодборЗаявок(Команда)
	ОткрытьФорму("ОбщаяФорма.ЗагрузкаЗаявок",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ПодборЗаявокОкончание", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаявокОкончание(Результат, ДополнительныеПараметы) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПодборЗаявокОкончаниеСервер(Результат);
		Записать();
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборЗаявокОкончаниеСервер(Результат)
	
	МассивСтрокНаОбработку = Новый Массив;
	
	// СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	
	МассивНомеровЗаявок = Новый Массив;
	Для Каждого ИнформацияОЗаявке Из Результат Цикл
		МассивНомеровЗаявок.Добавить(ИнформацияОЗаявке.НомерЗаявки);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ФинансовыйПланПланирование.НомерЗаявки КАК НомерЗаявки,
	|	ФинансовыйПланПланирование.Ссылка КАК ФинансовыйПлан
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	ФинансовыйПланПланирование.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления
	|	И ФинансовыйПланПланирование.НомерЗаявки В(&НомераЗаявок)");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДобавитьМесяц(Объект.Дата, -6));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(Объект.Дата, 6));
	Запрос.УстановитьПараметр("НомераЗаявок", МассивНомеровЗаявок);
	
	ВыборкаПоНомерамИспользованныхЗаявок = Запрос.Выполнить().Выбрать();
	
	Для Каждого ИнформацияОЗаявке Из Результат Цикл
		
		ВыборкаПоНомерамИспользованныхЗаявок.Сбросить();
		Если ВыборкаПоНомерамИспользованныхЗаявок.НайтиСледующий(Новый Структура("НомерЗаявки", ИнформацияОЗаявке.НомерЗаявки)) Тогда
			Сообщить("Заявка " + ИнформацияОЗаявке.НомерЗаявки + " не перенесена, она уже присутствует в документе " + ВыборкаПоНомерамИспользованныхЗаявок.ФинансовыйПлан);
			Продолжить;
		КонецЕсли;
		
		Если Объект.Планирование.НайтиСтроки(Новый Структура("НомерЗаявки", ИнформацияОЗаявке.НомерЗаявки)).Количество() > 0 Тогда
			Сообщить("Заявка " + ИнформацияОЗаявке.НомерЗаявки + " не перенесена, дубль");
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеЗаявки.Добавить(Новый Структура("НомерЗаявки, IDЗаявки", ИнформацияОЗаявке.НомерЗаявки, ИнформацияОЗаявке.IDЗаявки));
		
		GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
		
		НоваяСтрока = Объект.Планирование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИнформацияОЗаявке);
		НоваяСтрока.АвторСтроки = ПараметрыСеанса.ТекущийПользователь;
		НоваяСтрока.ВалютаЗаявки = ИнформацияОЗаявке.Валюта;
		НоваяСтрока.Валюта = ИнформацияОЗаявке.ВалютаОплаты;
		
		Если НоваяСтрока.ВалютаЗаявки = НоваяСтрока.Валюта И НоваяСтрока.ВалютаЗаявки = ПараметрыСеанса.ВалютаРегламентированногоУчета Тогда
			НоваяСтрока.Сумма = ?(ИнформацияОЗаявке.Сумма < 0, 0, ИнформацияОЗаявке.Сумма);
			НоваяСтрока.ВалютнаяСумма = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.ВалютнаяСумма = ?(ИнформацияОЗаявке.Сумма < 0, 0, ИнформацияОЗаявке.Сумма);

			Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", НоваяСтрока.ВалютнаяСумма, НоваяСтрока.ВалютаЗаявки, НоваяСтрока.Валюта, Объект.Дата, НоваяСтрока.КурсОплатыФиксированный, НоваяСтрока.Процент);
			НоваяСтрока.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
			
			Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", НоваяСтрока.СуммаНДС, НоваяСтрока.ВалютаЗаявки, НоваяСтрока.Валюта, Объект.Дата, НоваяСтрока.КурсОплатыФиксированный, НоваяСтрока.Процент);
			НоваяСтрока.СуммаНДС = РасчитатьВалютнуюСуммуСУсловиями(Данные);			
			
		КонецЕсли;
		
		НоваяСтрока.СтатьяДДС = Справочники.СтатьиДДС.Расход;
		НоваяСтрока.GUIDСтрокиФинансовогоПлана = GUIDСтрокиФинансовогоПлана;
		НоваяСтрока.ЗаявкаВзятаВРаботу = Истина;
		
		Для Каждого СтрокаТЧ Из ИнформацияОЗаявке.ТаблицаУправленческогоУчета Цикл
			
			НоваяСтрокаУУ = Объект.УправленческийУчетЗаявок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, СтрокаТЧ);
			НоваяСтрокаУУ.GUIDСтрокиФинансовогоПлана = GUIDСтрокиФинансовогоПлана;
			
		КонецЦикла;
		
		МассивСтрокНаОбработку.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ОбработатьСтрокиТаблицыПланирования(МассивСтрокНаОбработку, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МассивЗаявок = Новый Массив;
	
	//Параметры
	Если НЕ Параметры.Ключ.Пустая() Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ОбновитьИнформациюОКурсахВалют();
	
	Элементы.Подбор.Доступность = НЕ Объект.Проведен;
	Элементы.ПланированиеИмпортИзФинпланов.Доступность = НЕ Объект.Проведен;
	Элементы.ПланированиеСкопироватьСтроку.Доступность = НЕ Объект.Проведен;
	Элементы.ПланированиеУпорядочитьПоОрганизации.Доступность = НЕ Объект.Проведен;
	
	НаправлениеСортировки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		
		ЭтотОбъект.ТолькоПросмотр = Объект.Проведен;
		
		Попытка
			ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
		Исключение
			Сообщить("Ошибка при блокировке!");
		КонецПопытки;
		
		
		// ПодключитьОбработчикОжидания("АвтоматическаяЗаписьДокумента", 3600);
		
	КонецЕсли;
	
	ОбновитьИнформациюОКурсахВалют();
	УстановитьФлагиДоступностиРеквизитов();
	ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОплатам", 0.2, Истина);
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерЗаявки) Тогда
			СохраненныеЗаявки.Добавить(Новый Структура("НомерЗаявки, IDЗаявки", СтрокаТЧ.НомерЗаявки, СтрокаТЧ.IDЗаявки));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Модифицированность И НЕ Параметры.Ключ.Пустая() Тогда
		//ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьФинансовогоПлана" Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Даты запрета редактирования
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды 
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект); 
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура")
		И ПараметрыЗаписи.Свойство("АвтоматическаяЗапись") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ПроверкаЗаполненностиСтрок(Отказ);
	Иначе
		ПроверкаПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗаписьДокумента() Экспорт
	
	Возврат;
	
	Если Модифицированность Тогда
		Записать(Новый Структура("АвтоматическаяЗаписьДокумента", Истина));
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Документ сохранен'"),
			,
			,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивСохраненныхЗаявок = Новый Массив;
	МассивТекущихЗаявок = Новый Массив;
	
	МассивУдаленныхЗаявок = Новый Массив;
	МассивДобавленныхЗаявок = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерЗаявки) Тогда
			МассивТекущихЗаявок.Добавить(СтрокаТЧ.НомерЗаявки);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(СтрокаТЧ.GUIDСтрокиФинансовогоПлана) Тогда
		//	Запись = РегистрыСведений.СостоянияСтрокДокументов.СоздатьМенеджерЗаписи();
		//	Запись.Документ = Параметры.Ключ;
		//	Запись.GUIDСтроки = СтрокаТЧ.GUIDСтрокиФинансовогоПлана;
		//	Запись.Состояние = ?(СтрокаТЧ.ОплатаВыполнена, Перечисления.СостоянияСтрокДокументов.Оплачено, Перечисления.СостоянияСтрокДокументов.НеОплачено);
		//	Запись.Записать(Истина);
		//КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из СохраненныеЗаявки Цикл
		МассивСохраненныхЗаявок.Добавить(Элемент.Значение.НомерЗаявки);
		
		Если Объект.Планирование.НайтиСтроки(Новый Структура("НомерЗаявки", Элемент.Значение.НомерЗаявки)).Количество() = 0 Тогда
			МассивУдаленныхЗаявок.Добавить(Новый Структура("НомерЗаявки, IDЗаявки", Элемент.Значение.НомерЗаявки, Элемент.Значение.IDЗаявки));
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСохраненныхЗаявок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСохраненныхЗаявок);
	МассивТекущихЗаявок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивТекущихЗаявок);

	МассивДобавленные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивТекущихЗаявок, МассивСохраненныхЗаявок);
	
	Для Каждого Элемент Из МассивДобавленные Цикл
		
		СтрокаПланирования = Объект.Планирование.НайтиСтроки(Новый Структура("НомерЗаявки", Элемент))[0];
		МассивДобавленныхЗаявок.Добавить(Новый Структура("НомерЗаявки, IDЗаявки", СтрокаПланирования.НомерЗаявки, СтрокаПланирования.IDЗаявки));
		
	КонецЦикла;
	
	// Обработать. Добавленные добавляем, удаленные удаляем. Все ж логично, не? Что может пойти не так?
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	Для Каждого Элемент Из МассивДобавленныхЗаявок Цикл
		РаботаСЗаявкамиСервер.SQL_ЗаблокироватьЗаявку(СоединениеАДО, Элемент.IDЗаявки);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаленныхЗаявок Цикл
		РаботаСЗаявкамиСервер.SQL_ОтменитьВзятиеВРаботу(СоединениеАДО, Элемент.IDЗаявки);
	КонецЦикла;
	
	// Обновим "Сохраненные заявки" после записи
	СохраненныеЗаявки.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерЗаявки) Тогда
			СохраненныеЗаявки.Добавить(Новый Структура("НомерЗаявки, IDЗаявки", СтрокаТЧ.НомерЗаявки, СтрокаТЧ.IDЗаявки));
		КонецЕсли;
	КонецЦикла;
	
	// Помечаем на удаление Финпланы
	//Для Каждого УдаляемыйФинплан Из ПомечаемыеНаУдалениеФинансовыеПланы Цикл
	//	
	//	УдаляемыйФинпланОбъект = УдаляемыйФинплан.Значение.ПолучитьОбъект();
	//	УдаляемыйФинпланОбъект.УстановитьПометкуУдаления(Истина);
	//	Сообщить("Помечен на удаление " + УдаляемыйФинплан);
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПроверкаПослеЗаписи Тогда
		Отказ = Ложь;
		ПроверкаЗаполненностиСтрок(Отказ);
	КонецЕсли;
	
	УстановитьФлагиДоступностиРеквизитов();
	ОбновитьИнформациюОКурсахВалют();
	ДобавляемыеЗаявки.Очистить();
	
	Оповестить("ЗаписьФинансовогоПлана");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьСписокСохраненныхЗаявок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтрок

&НаКлиенте
Процедура ПланированиеОрганизацияПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
	ОбработатьСодержимоеТекущейСтроки("ПланированиеСчетОрганизации");
	//	
	//ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	//Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
	//	Элементы.ПланированиеСчетОрганизации.СписокВыбора.Очистить();
	//	Для Каждого ЭлементСписка Из ПолучитьСписокБанковскихСчетов(Объект.Дата, ТекущиеДанные.Организация) Цикл
	//		Элементы.ПланированиеСчетОрганизации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	//	КонецЦикла;
	//	Элементы.ПланированиеСчетОрганизации.СписокВыбора.СортироватьПоПредставлению();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСчетОрганизацииПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСтатьяДДСПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКонтрагентПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСчетПолучателяПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеВалютнаяСуммаПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммаОплатыПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСтатьяДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(СтатьиДДСРасход());
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписка



&НаКлиенте
Процедура ПланированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ПланированиеОстатокНаСчете" Тогда
			
			//СтандартнаяОбработка = Ложь;
			//
			//ПараметрыВизуализации = Новый Структура;
			//ПараметрыВизуализации.Вставить("ОстаткиДенежныхСредств", ТекущиеДанные.РасшифровкаОстатокДенежныхСредств);
			//ПараметрыВизуализации.Вставить("ПланированиеТекущийДень", ТекущиеДанные.РасшифровкаСуммаТекущееПланирование);
			//ПараметрыВизуализации.Вставить("ПредварительноеПланирование", ТекущиеДанные.РасшифровкаСуммаПредварительноеПланирование);
			//ПараметрыВизуализации.Вставить("ТекущийДокумент", ТекущиеДанные.РасшифровкаСуммаДокумента);
			//ПараметрыВизуализации.Вставить("ОстатокНаСчете", ТекущиеДанные.ОстатокНаСчете);
			//
			//ОткрытьФорму("Документ.ФинансовыйПлан.Форма.ФормаРасшифровкиОстатков", ПараметрыВизуализации, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли Поле.Имя = "ПланированиеЗаявка" Тогда
			
			//СтандартнаяОбработка = Ложь;
			//
			//Если ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда
			//	ПараметрыОткрытия = Новый Структура;
			//	ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Заявка);
			//	ОткрытьФорму("Документ.Заявка.Форма.ФормаДокумента", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			//КонецЕсли;
			
		ИначеЕсли Поле.Имя = "ПланированиеОплачено" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если Копирование И НоваяСтрока Тогда
		ТекущиеДанные.ОстатокНаСчете = 0;
		ТекущиеДанные.АвторСтроки = "";
	КонецЕсли;
	
	Если НЕ Копирование И НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, ДанныеПервоначальногоЗаполненияСтрокиТабличнойЧасти());
	КонецЕсли;
	
	Если НоваяСтрока И ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
		ТекущиеДанные.АвторСтроки = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПервоначальногоЗаполненияСтрокиТабличнойЧасти()
	Возврат Новый Структура("СтатьяДДС, АвторСтроки, Валюта", Справочники.СтатьиДДС.Расход, ПараметрыСеанса.ТекущийПользователь, Справочники.Валюты.РоссийскийРубль);
КонецФункции

&НаКлиенте
Процедура ПланированиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ОтменаРедактирования И НоваяСтрока Тогда
			ТекущиеДанные.GUIDСтрокиФинансовогоПлана = СокрЛП(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Если НЕ ОтменаРедактирования Тогда
			
			ФлагИзмененнойСтроки = Ложь;
			ОбработатьСодержимоеТекущейСтроки(,НоваяСтрока);
			
			ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Записать(Новый Структура("АвтоматическаяЗапись", Истина));
		ОбновитьСтрокуРегистра(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПланированиеПриОкончанииРедактированияНаСервере(СтрокаТЧ)
	
	Если Объект.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	мРубли = ПараметрыСеанса.ВалютаРегламентированногоУчета;
	
	//СтруктураДанных = Новый Структура("Дата,
	//|	Организация,
	//|   СчетОрганизации,
	//|   СтатьяДДС,
	//|   Контрагент,
	//|   СчетКонтрагента, 
	//|   НазначениеПлатежа, 
	//|   Валюта, 
	////|   ВалютаРасчета, 
	//|   Сумма,
	//|   ВалютнаяСумма,
	//|   СуммаНДС, 
	//|   Заявка,
	//|   КатегорияОперации,
	//|   ДоговорКонтрагента,
	//|   ФинансовыйПлан",
	//ЭтотОбъект.Дата,
	//СтрокаТЧ.Организация,
	//СтрокаТЧ.СчетОрганизации,
	//СтрокаТЧ.СтатьяДДС,
	//СтрокаТЧ.Контрагент,
	//СтрокаТЧ.СчетКонтрагента,
	//СтрокаТЧ.НазначениеПлатежа,
	////?(ЗначениеЗаполнено(СтрокаТЧ.Валюта), СтрокаТЧ.Валюта, мРубли),
	//?(ЗначениеЗаполнено(СтрокаТЧ.Валюта), СтрокаТЧ.Валюта, мРубли),
	//СтрокаТЧ.Сумма,
	//СтрокаТЧ.ВалютнаяСумма,
	//СтрокаТЧ.СуммаНДС,
	//СтрокаТЧ.Заявка,
	//СтрокаТЧ.КатегорияОперации,
	//СтрокаТЧ.Договор,
	//ЭтотОбъект.Ссылка);
	//
	//КлючСтруктуры = КлючСтруктуры(СтруктураДанных);
	//Если СтрокаТЧ.КлючМодификации = КлючСтруктуры Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПланируемаяОплата) Тогда
	//	ДокументПланируемаяОплата = Документы.ПланируемаяОплата.СоздатьДокумент();
	//Иначе
	//	ДокументПланируемаяОплата = СтрокаТЧ.ПланируемаяОплата.ПолучитьОбъект();
	//КонецЕсли;
	//
	//ДокументПланируемаяОплата.Дата = ЭтотОбъект.Дата;
	//ЗаполнитьЗначенияСвойств(ДокументПланируемаяОплата, СтруктураДанных);
	//
	//ДокументПланируемаяОплата.Записать();
	//СтрокаТЧ.ПланируемаяОплата = ДокументПланируемаяОплата.Ссылка;
	//СтрокаТЧ.КлючМодификации = КлючСтруктуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСодержимоеТекущейСтроки(ИмяКолонки = Неопределено, ЭтоНоваяСтрока = Ложь)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, "", ЭтоНоваяСтрока);
	
	Если ИмяКолонки = "ПланированиеОплатаВыполнена" Тогда
		// Обработка колонки "ОплатаВыполнена"
		
	ИначеЕсли ИмяКолонки = "ПланированиеОрганизация" Тогда
		// Обработка колонки "Организация"
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СчетОрганизации) Тогда
			ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетОрганизации" Тогда
		// Обработка колонки "СчетОрганизации"
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСтатьяДДС" Тогда	
		// Обработка колонки "СтатьяДДС"
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеКонтрагент" Тогда
		// Обработка колонки "Контрагент"
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		//Если ТекущиеДанные.НедоступностьПоляСчетКонтрагента = Истина Тогда
			ТекущиеДанные.СчетКонтрагента = "";
			ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, "ПланированиеКонтрагент", ЭтоНоваяСтрока);
			ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, "ПланированиеСчетОрганизации", ЭтоНоваяСтрока);
		//КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетКонтрагента" Тогда
		// Обработка колонки "СчетКонтрагента"
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
		УстановитьФлагиДоступностиРеквизитов(Элементы.Планирование.ТекущаяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеНазначениеПлатежа" Тогда
		// Обработка колонки "НазначениеПлатежа"
		
	ИначеЕсли ИмяКолонки = "ПланированиеВалютнаяСумма" Тогда
		// Обработка колонки "ВалютнаяСумма"
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		//ПодключитьОбработчикОжидания("ОбновитьДанныеПоЗаявкам", 0.2, Истина);
		//ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
		
	ИначеЕсли ИмяКолонки = "ПланированиеКурсОплатыФиксированный" Тогда
		// Обработка колонки "ВалютнаяСумма"
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		//ПодключитьОбработчикОжидания("ОбновитьДанныеПоЗаявкам", 0.2, Истина);
		//ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
		
	ИначеЕсли ИмяКолонки = "ПланированиеПроцент" Тогда
		// Обработка колонки "ВалютнаяСумма"
		ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаОплаты" Тогда
		// Обработка колонки "Сумма"
		
		Если ТекущиеДанные.СтатьяДДС <> ПредопределенноеЗначение("Справочник.СтатьиДДС.Налог")
			И ТекущиеДанные.СтатьяДДС <> ПредопределенноеЗначение("Справочник.СтатьиДДС.Зарплата")
			И ТекущиеДанные.СтатьяДДС <> ПредопределенноеЗначение("Справочник.СтатьиДДС.ЗарплатаНаКК") Тогда
			
			ОбработатьСодержимоеТекущейСтрокиНаСервере(Элементы.Планирование.ТекущаяСтрока, ИмяКолонки, ЭтоНоваяСтрока);
			
		Иначе
			ТекущиеДанные.СуммаНДС = 0;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
		
		//Если ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда
		//	ПодключитьОбработчикОжидания("ОбновитьДанныеПоЗаявкам", 0.2, Истина);
		//КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаНДС" Тогда
		// Обработка колонки "НДС"
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСодержимоеТекущейСтрокиНаСервере(ИдентификаторСтроки, ИмяКолонки = Неопределено, ЭтоНоваяСтрока = Ложь)
	
	СтрокаОбработки = Объект.Планирование.НайтиПоИдентификатору(ИдентификаторСтроки);
		
	Если СтрокаОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНоваяСтрока Тогда
		СтрокаОбработки.АвторСтроки = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаОбработки.СтатьяДДС) Тогда
		СтрокаОбработки.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.Расход");
	КонецЕсли;
	
	Если ИмяКолонки = "ПланированиеОплатаВыполнена" Тогда
		// Обработка колонки "ОплатаВыполнена"
		
	ИначеЕсли ИмяКолонки = "ПланированиеОрганизация" Тогда
		// Обработка колонки "Организация"
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
		|	Организации.ОсновнойБанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация");
		
		Запрос.УстановитьПараметр("Организация", СтрокаОбработки.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СтрокаОбработки.СчетОрганизации = Выборка.ОсновнойБанковскийСчет;
		СтрокаОбработки.Валюта = Выборка.ВалютаДенежныхСредств;
		
		Если ЗначениеЗаполнено(СтрокаОбработки.Валюта) Тогда	
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ОрганизацииОсновныеБанковскиеСчета.БанковскийСчет КАК БанковскийСчет
			|ИЗ
			|	Справочник.Организации.ОсновныеБанковскиеСчета КАК ОрганизацииОсновныеБанковскиеСчета
			|ГДЕ
			|	ОрганизацииОсновныеБанковскиеСчета.Ссылка = &Организация
			|	И ОрганизацииОсновныеБанковскиеСчета.Валюта = &Валюта");
			
			Запрос.УстановитьПараметр("Организация", СтрокаОбработки.Организация);
			Запрос.УстановитьПараметр("Валюта", СтрокаОбработки.Валюта);
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				СтрокаОбработки.СчетОрганизации = Выборка.БанковскийСчет;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетОрганизации" Тогда
		// Обработка колонки "СчетОрганизации"
		
		Если НЕ ЗначениеЗаполнено(СтрокаОбработки.НомерЗаявки) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОбработки, ОпределениеВалют(СтрокаОбработки));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОбработки.СтатьяДДС)
			И СтрокаОбработки.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.КомиссияБанка") Тогда
			
			СтрокаОбработки.Контрагент = ПолучитьКонтрагентаБанкаИзСчетаОрганизации(СтрокаОбработки.СчетОрганизации);
			
		КонецЕсли;
	
		
	ИначеЕсли ИмяКолонки = "ПланированиеСтатьяДДС" Тогда
		// Обработка колонки "СтатьяДДС"
		
		Если ЗначениеЗаполнено(СтрокаОбработки.СтатьяДДС) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СтатьиДДС.Ссылка КАК СтатьяДДС,
			|	СтатьиДДС.РасчитыватьСуммуНДС КАК РасчитыватьСуммуНДС,
			|	СтатьиДДС.НазначениеПлатежаПоУмолчанию КАК НазначениеПлатежаПоУмолчанию,
			|	СтатьиДДС.КатегорияОперацииПоУмолчанию КАК КатегорияОперацииПоУмолчанию,
			|	СтатьиДДС.УстанавливатьНазначениеПлатежа КАК УстанавливатьНазначениеПлатежа,
			|	СтатьиДДС.УстанавливатьКатегориюОперации КАК УстанавливатьКатегориюОперации,
			|	БанковскиеСчета.Банк.Контрагент КАК БанкКонтрагент,
			|	СтатьиДДС.КонтрагентПоУмолчанию КАК КонтрагентПоУмолчанию
			|ИЗ
			|	Справочник.СтатьиДДС КАК СтатьиДДС
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
			|		ПО (БанковскиеСчета.Ссылка = &СчетОрганизации)
			|ГДЕ
			|	СтатьиДДС.Ссылка = &СтатьяДДС");
			
			Запрос.УстановитьПараметр("СтатьяДДС", СтрокаОбработки.СтатьяДДС); 
			Запрос.УстановитьПараметр("СчетОрганизации", СтрокаОбработки.СчетОрганизации);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			//Если Выборка.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.ЗарплатаНаКК") Тогда
			//	СтрокаОбработки.Контрагент = Выборка.БанкКонтрагент;
			//КонецЕсли;
			
			Если СтрокаОбработки.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДДС.КомиссияБанка")
				И ЗначениеЗаполнено(СтрокаОбработки.СчетОрганизации) Тогда
				СтрокаОбработки.Контрагент = ПолучитьКонтрагентаБанкаИзСчетаОрганизации(СтрокаОбработки.СчетОрганизации);
			КонецЕсли;
			
			Если Выборка.УстанавливатьНазначениеПлатежа Тогда
				СтрокаОбработки.НазначениеПлатежа = Выборка.НазначениеПлатежаПоУмолчанию;
			КонецЕсли;
			
			Если Выборка.УстанавливатьКатегориюОперации Тогда
				СтрокаОбработки.КатегорияОперации = Выборка.КатегорияОперацииПоУмолчанию;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КонтрагентПоУмолчанию) И НЕ ЗначениеЗаполнено(СтрокаОбработки.Контрагент) Тогда
				СтрокаОбработки.Контрагент = Выборка.КонтрагентПоУмолчанию;
			КонецЕсли;
			
			Если НЕ Выборка.РасчитыватьСуммуНДС Тогда
				СтрокаОбработки.СуммаНДС = 0;
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеКонтрагент" Тогда
		
		Если ЗначениеЗаполнено(СтрокаОбработки.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаОбработки.СчетКонтрагента) Тогда
			ДанныеСчетов = ПолучитьСписокБанковскихСчетов(Объект.Дата, СтрокаОбработки.Контрагент);
			Если ДанныеСчетов.Количество() > 0 Тогда
				СтрокаОбработки.СчетКонтрагента = ДанныеСчетов[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
		
	ИначеЕсли ИмяКолонки = "ПланированиеСчетКонтрагента" Тогда
		// Обработка колонки "СчетКонтрагента"
		Если НЕ ЗначениеЗаполнено(СтрокаОбработки.НомерЗаявки) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОбработки, ОпределениеВалют(СтрокаОбработки));
		КонецЕсли;
		
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
	ИначеЕсли ИмяКолонки = "ПланированиеНазначениеПлатежа" Тогда
		// Обработка колонки "НазначениеПлатежа"
		
	ИначеЕсли ИмяКолонки = "ПланированиеВалютнаяСумма" Тогда
		// Обработка колонки "ВалютнаяСумма"
		//СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.Валюта, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		//Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, ПараметрыСеанса.ВалютаРегламентированногоУчета, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
	ИначеЕсли ИмяКолонки = "ПланированиеКурсОплатыФиксированный" Тогда
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
    ИначеЕсли ИмяКолонки = "ПланированиеПроцент" Тогда
		Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.ВалютнаяСумма, СтрокаОбработки.ВалютаЗаявки, СтрокаОбработки.Валюта, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
		СтрокаОбработки.Сумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаОплаты" Тогда
		// Обработка колонки "Сумма"
		
		Если ЗначениеЗаполнено(СтрокаОбработки.НомерЗаявки) Тогда
			Если СтрокаОбработки.Валюта = ПараметрыСеанса.ВалютаРегламентированногоУчета
				И СтрокаОбработки.Валюта <> СтрокаОбработки.ВалютаЗаявки Тогда
				
				Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.Сумма, ПараметрыСеанса.ВалютаРегламентированногоУчета, СтрокаОбработки.ВалютаЗаявки, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
				СтрокаОбработки.ВалютнаяСумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
				
				СтрокаОбработки.СуммаНДС = СтрокаОбработки.Сумма * 20 / 120;
				
			КонецЕсли;
		Иначе
			
			//Если СтрокаОбработки.Валюта <> ПараметрыСеанса.ВалютаРегламентированногоУчета
			//	И СтрокаОбработки.Валюта <> СтрокаОбработки.Валюта Тогда
				
				Данные = Новый Структура("Сумма, ВалютаИсходная, ВалютаКонечная, ДатаКурса, КурсФиксированный, ПроцентНадбавкиКурса", СтрокаОбработки.Сумма, СтрокаОбработки.Валюта, СтрокаОбработки.ВалютаЗаявки, Объект.Дата, СтрокаОбработки.КурсОплатыФиксированный, СтрокаОбработки.Процент);
				СтрокаОбработки.ВалютнаяСумма = РасчитатьВалютнуюСуммуСУсловиями(Данные);
				
			//КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПланированиеСуммаНДС" Тогда
		// Обработка колонки "НДС"
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределениеВалют(Данные)
	
	СтруктураВозврата = Новый Структура("Валюта, ВалютаЗаявки");
	
	// Определение валют счетов
	Если ЗначениеЗаполнено(Данные.СчетОрганизации) Тогда
		СтруктураВозврата.Валюта = ВалютаБанковскогоСчета(Данные.СчетОрганизации);
	Иначе
		СтруктураВозврата.Валюта = Справочники.Валюты.РоссийскийРубль;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.НомерЗаявки) Тогда
		СтруктураВозврата.Валюта = Данные.ВалютаЗаявки;
	Иначе
		
		Если ЗначениеЗаполнено(Данные.СчетКонтрагента) Тогда
			СтруктураВозврата.ВалютаЗаявки = ВалютаБанковскогоСчета(Данные.СчетКонтрагента);
		Иначе
			СтруктураВозврата.ВалютаЗаявки = СтруктураВозврата.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПланированиеПослеУдаления(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьИнформациюПоОстаткамНаСчетах", 0.2, Истина);
	//Записать(Новый Структура("АвтоматическаяЗапись", Истина));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегистров

&НаКлиенте
Процедура ОбновитьДанныеПоЗаявкам() Экспорт
	ОбновитьДанныеПоЗаявкамНаСервереИзФормы();
	Оповестить("ИнформацияПоЗаявкамОбновлена");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнформациюПоОстаткамНаСчетах() Экспорт
	ЗаполнитьИнформациюПоОстаткамНаСчетахНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоОстаткамНаСчетахНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаСчетов.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаСчетов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		
		Если СтрокаТЧ.ОтменаПлатежа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.СчетОрганизации = СтрокаТЧ.СчетОрганизации;
		НоваяСтрока.СчетКонтрагента = СтрокаТЧ.СчетКонтрагента;
		НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_ТаблицаСчетов.СчетОрганизации КАК Справочник.БанковскиеСчета) КАК СчетОрганизации,
	|	ВЫРАЗИТЬ(ВТ_ТаблицаСчетов.СчетКонтрагента КАК Справочник.БанковскиеСчета) КАК СчетКонтрагента,
	|	ВТ_ТаблицаСчетов.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетов
	|ИЗ
	|	&ТаблицаСчетов КАК ВТ_ТаблицаСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетов.СчетОрганизации КАК СчетОрганизации
	|ПОМЕСТИТЬ ВТ_ИспользуемыеСчета
	|ИЗ
	|	ВТ_ТаблицаСчетов КАК ВТ_ТаблицаСчетов
	|ГДЕ
	|	ВТ_ТаблицаСчетов.СчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетов.СчетКонтрагента.ПарныйБанковскийСчет
	|ИЗ
	|	ВТ_ТаблицаСчетов КАК ВТ_ТаблицаСчетов
	|ГДЕ
	|	ВТ_ТаблицаСчетов.СчетКонтрагента.ПарныйБанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетов.СчетОрганизации КАК СчетОрганизации,
	|	-ВТ_ТаблицаСчетов.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_СписанияПоФП
	|ИЗ
	|	ВТ_ТаблицаСчетов КАК ВТ_ТаблицаСчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетов.СчетКонтрагента.ПарныйБанковскийСчет,
	|	ВТ_ТаблицаСчетов.Сумма
	|ИЗ
	|	ВТ_ТаблицаСчетов КАК ВТ_ТаблицаСчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФинансовыйПланПланирование.СчетОрганизации,
	|	-ФинансовыйПланПланирование.Сумма
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФинансовыйПланПланирование.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаАнализа, ДЕНЬ)
	|	И ФинансовыйПланПланирование.Ссылка <> &ЭтотДокумент
	|	И ФинансовыйПланПланирование.СчетОрганизации В
	|			(ВЫБРАТЬ
	|				ВТ_ИспользуемыеСчета.СчетОрганизации КАК СчетОрганизации
	|			ИЗ
	|				ВТ_ИспользуемыеСчета КАК ВТ_ИспользуемыеСчета)
	|	И НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФинансовыйПланПланирование.СчетКонтрагента.ПарныйБанковскийСчет,
	|	ФинансовыйПланПланирование.Сумма
	|ИЗ
	|	Документ.ФинансовыйПлан.Планирование КАК ФинансовыйПланПланирование
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФинансовыйПланПланирование.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаАнализа, ДЕНЬ)
	|	И ФинансовыйПланПланирование.Ссылка <> &ЭтотДокумент
	|	И ФинансовыйПланПланирование.СчетКонтрагента.ПарныйБанковскийСчет В
	|			(ВЫБРАТЬ
	|				ВТ_ИспользуемыеСчета.СчетОрганизации КАК СчетОрганизации
	|			ИЗ
	|				ВТ_ИспользуемыеСчета КАК ВТ_ИспользуемыеСчета)
	|	И НЕ ФинансовыйПланПланирование.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписанияПоФП.СчетОрганизации КАК СчетОрганизации,
	|	СУММА(ВТ_СписанияПоФП.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_СписанияПоФП_Сумма
	|ИЗ
	|	ВТ_СписанияПоФП КАК ВТ_СписанияПоФП
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписанияПоФП.СчетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.БанковскийСчет КАК БанковскийСчет,
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ДЕНЬ, -1), ДЕНЬ),
	|			БанковскийСчет В
	|				(ВЫБРАТЬ
	|					ВТ_ИспользуемыеСчета.СчетОрганизации КАК СчетОрганизации
	|				ИЗ
	|					ВТ_ИспользуемыеСчета КАК ВТ_ИспользуемыеСчета)) КАК ДенежныеСредстваОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписанияПоФП_Сумма.СчетОрганизации КАК СчетОрганизации,
	|	ВТ_СписанияПоФП_Сумма.Сумма + ЕСТЬNULL(ВТ_ОстатокПоРегистру.СуммаОстаток, 0) КАК Сумма
	|ИЗ
	|	ВТ_СписанияПоФП_Сумма КАК ВТ_СписанияПоФП_Сумма
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстатокПоРегистру КАК ВТ_ОстатокПоРегистру
	|		ПО ВТ_СписанияПоФП_Сумма.СчетОрганизации = ВТ_ОстатокПоРегистру.БанковскийСчет");
	

	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("ТаблицаСчетов", ТаблицаСчетов);
	Запрос.УстановитьПараметр("ДатаАнализа", Объект.Дата);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	// Предварительно очищаем остаток
	Для Каждого СтрокаТаблицыПланирование Из Объект.Планирование Цикл
		
		СтрокаТаблицыПланирование.ОстатокНаСчете = 0;
		
		Выборка.Сбросить();
		
		Если Выборка.НайтиСледующий(Новый Структура("СчетОрганизации", СтрокаТаблицыПланирование.СчетОрганизации)) Тогда
			СтрокаТаблицыПланирование.ОстатокНаСчете = Выборка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнформациюПоОплатам() Экспорт
	ЗаполнитьИнформациюПоОплатамНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоОплатамНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СостоянияСтрокДокументов.GUIDСтроки КАК GUIDСтроки,
	|	СостоянияСтрокДокументов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияСтрокДокументов КАК СостоянияСтрокДокументов
	|ГДЕ
	|	СостоянияСтрокДокументов.Документ = &Документ
	|	И СостоянияСтрокДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСтрокДокументов.Оплачено)");
	
	Запрос.УстановитьПараметр("Документ", Параметры.Ключ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		Выборка.Сбросить();
		СтрокаТЧ.ОплатаВыполнена = Выборка.НайтиСледующий(Новый Структура("GUIDСтроки", СтрокаТЧ.GUIDСтрокиФинансовогоПлана));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаявкуПоСтроке(Заявка, Зафиксировать) Экспорт
	
	//Если НЕ Параметры.Ключ.Пустая() Тогда
	//	
	//	НаборСтатусыЗаявок = РегистрыСведений.СтатусыЗаявок.СоздатьНаборЗаписей();
	//	НаборСтатусыЗаявок.Отбор.Документ.Установить(Объект.Ссылка);
	//	НаборСтатусыЗаявок.Отбор.Заявка.Установить(Заявка);
	//	
	//	Если Зафиксировать Тогда
	//		
	//		НовоеДвижение = НаборСтатусыЗаявок.Добавить();
	//		НовоеДвижение.Период = НачалоДня(Объект.Дата);
	//		НовоеДвижение.Документ = Объект.Ссылка;
	//		НовоеДвижение.Заявка = Заявка;
	//		НовоеДвижение.Статус = Перечисления.СтатусыЗаявок.ВРаботе;
	//		
	//	КонецЕсли;
	//	
	//	НаборСтатусыЗаявок.Записать();
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоЗаявкамНаСервереИзСсылки()
	//РаботаСЗаявкамиСервер.ОбработатьЗаявкиФинансовогоПланаИзСсылки(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоЗаявкамНаСервереИзФормы()
	РаботаСЗаявкамиСервер.ОбработатьЗаявкиФинансовогоПланаИзФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//Если Параметры.Ключ.Пустая() Тогда
	//	ПоказатьПредупреждение(, "Перед добавлением строк документ необходимо записать!");
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСписокСохраненныхЗаявок()
	
	//СохраненныеЗаявки.Очистить();
	//
	//Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
	//	
	//	Если ЗначениеЗаполнено(СтрокаТЧ.Заявка) Тогда
	//		СохраненныеЗаявки.Добавить(СтрокаТЧ.Заявка);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроку(Команда)
	
	#Если НЕ ВебКлиент Тогда
	мГенераторКлавиш = Новый COMОбъект("Wscript.shell");
	мГенераторКлавиш.SendKeys("{F9}");
	#КонецЕсли
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСчетаСОтрицательнымиОстатками()
	
	ТаблицаПроверки = Новый ТаблицаЗначений;
	ТаблицаПроверки.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаПроверки.Колонки.Добавить("ОстатокНаСчете", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПроверки.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВТ_ДанныеТаблицы.СчетОрганизации КАК СчетОрганизации,
	|	ВТ_ДанныеТаблицы.ОстатокНаСчете КАК ОстатокНаСчете
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ВТ_ДанныеТаблицы КАК ВТ_ДанныеТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.СчетОрганизации КАК СчетОрганизации
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(ВТ_Данные.СчетОрганизации КАК Справочник.БанковскиеСчета).РазрешитьСписаниеВМинус
	|	И ВТ_Данные.ОстатокНаСчете < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.СчетОрганизации");
	
	Запрос.УстановитьПараметр("ВТ_ДанныеТаблицы", ТаблицаПроверки);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетОрганизации");
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьРублевыеСуммы(Команда)
	
	Если ЭтаФорма.Объект.Планирование.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект), "Пересчитать рублевые суммы валютных платежей?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеНазначениеПлатежаПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммаНДСПриИзменении(Элемент)
	ФлагИзмененнойСтроки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеОплатаВыполненаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И НЕ ТекущиеДанные.ОплатаВыполнена Тогда
		
		ТекущиеДанные.ОплатаВыполнена = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПланированиеОплатаВыполненаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), "Оплата по данной строке выполнена. Снять пометку?", РежимДиалогаВопрос.ДаНет);

	Иначе
		ЗафиксироватьОплаченностьСтроки(ТекущиеДанные.GUIDСтрокиФинансовогоПлана, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеОплатаВыполненаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.ОплатаВыполнена = Ложь;
		ЗафиксироватьОплаченностьСтроки(ТекущиеДанные.GUIDСтрокиФинансовогоПлана, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОплаченностьСтроки(GUIDСтрокиФинансовогоПлана, Оплачено = Ложь)
	
	Если ЗначениеЗаполнено(GUIDСтрокиФинансовогоПлана) Тогда
		Запись = РегистрыСведений.СостоянияСтрокДокументов.СоздатьМенеджерЗаписи();
		Запись.Документ = Параметры.Ключ;
		Запись.GUIDСтроки = GUIDСтрокиФинансовогоПлана;
		Запись.Состояние = ?(Оплачено, Перечисления.СостоянияСтрокДокументов.Оплачено, Перечисления.СостоянияСтрокДокументов.НеОплачено);
		Запись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКурсОплатыФиксированныйПриИзменении(Элемент)
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПроцентПриИзменении(Элемент)
	ОбработатьСодержимоеТекущейСтроки(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьПоОрганизации(Команда)
	
	Если НаправлениеСортировки Тогда
		Объект.Планирование.Сортировать("Организация");
		Элементы.ПланированиеУпорядочитьПоОрганизации.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
	Иначе
		Объект.Планирование.Сортировать("Организация Убыв");
		Элементы.ПланированиеУпорядочитьПоОрганизации.Картинка = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
	КонецЕсли;
	
	НаправлениеСортировки = НЕ НаправлениеСортировки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	т = 1;
КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ОбновитьСтрокуРегистра(ИдентификаторСтрокиТаблицы)
	
	СтрокаТаблицы = Объект.Планирование.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	ЗаписьРегистра = РегистрыСведений.ТабличнаяЧастьФинансовогоПлана.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаТаблицы);
	ЗаписьРегистра.ФинансовыйПлан = Объект.Ссылка;
	// ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуРегистра(ИдентификаторСтрокиТаблицы)
	
	СтрокаТаблицы = Объект.Планирование.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	
	ЗаписьРегистра = РегистрыСведений.ТабличнаяЧастьФинансовогоПлана.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.GUIDСтрокиФинансовогоПлана = СтрокаТаблицы.GUIDСтрокиФинансовогоПлана;
	ЗаписьРегистра.ФинансовыйПлан = Объект.Ссылка;
	ЗаписьРегистра.Удалить();
	
КонецПроцедуры