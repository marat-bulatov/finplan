
&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	СоединениеАДО = ЗапросыЧерезАДО.ПолучитьСоединениеАДО("Fin_Request");
	
	Данные = ЗапросыЧерезАДО.ВыполнитьЗапросАДО(СоединениеАДО, СформироватьТекстЗапроса(ДатаНачала, ДатаОкончания));
	
	Если Данные <> Неопределено Тогда
		
		ТаблицаЗаявок.Очистить();
		
		МассивНовыхСтрок = Новый Массив;
		
		Для Каждого Элемент Из Данные Цикл
			
			//Если Элемент.i_status_id <> 3 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			// Валюты
			Элемент.codeCurr = ?(Элемент.codeCurr = 810, 643, Элемент.codeCurr);
			Элемент.codeCurrPay = ?(Элемент.codeCurrPay = 810, 643, Элемент.codeCurrPay);
			
			НоваяСтрока = ТаблицаЗаявок.Добавить();
			
			МассивНовыхСтрок.Добавить(НоваяСтрока);
			
			НоваяСтрока.IDЗаявки = СокрЛП(Элемент.IDRequest);
			НоваяСтрока.ДатаЗаявки = Элемент.DateRequest;
			НоваяСтрока.ДатаОплаты = Элемент.DatePayDue;
			НоваяСтрока.НомерЗаявки = Элемент.NumberRequest;
			НоваяСтрока.Казначейство = Элемент.nomkazn;
			
			текНазнПлат = СокрЛП(Элемент.objPay);
			текДопИнфо = СокрЛП(Элемент.S_DOC_INFO); 
			текНазнПлат = текНазнПлат + ?(НЕ(текНазнПлат = "" И текДопИнфо = ""),"; ","") + текДопИнфо;
			
			НоваяСтрока.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", Элемент.OrgINN);
			НоваяСтрока.НазначениеПлатежа = текНазнПлат;
			НоваяСтрока.Сумма = Элемент.Amount;
			НоваяСтрока.СуммаНДС = Элемент.AmountNDS;
			НоваяСтрока.Валюта = Справочники.Валюты.НайтиПоКоду(СокрЛП(Элемент.codeCurr));
			НоваяСтрока.ВалютаОплаты = Справочники.Валюты.НайтиПоКоду(СокрЛП(Элемент.codeCurrPay));
			НоваяСтрока.КатегорияОперации = Справочники.КатегорииОпераций.НайтиПоКоду(СокрЛП(Элемент.codeKatOper));
			НоваяСтрока.Автор = СокрЛП(Элемент.Who);
			НоваяСтрока.ДолжностьАвтора = СокрЛП(Элемент.position);
			НоваяСтрока.Сводная = Булево(Элемент.hasChildren);
			НоваяСтрока.Процент = Элемент.percentPay;
			НоваяСтрока.КурсОплатыФиксированный	= Элемент.fixExchPay;
			НоваяСтрока.ЦФУ = Справочники.ЦФУ.НайтиПоКоду(СокрЛП(Элемент.codeCFU));
			НоваяСтрока.Бренд = Справочники.Брэнды.НайтиПоКоду(СокрЛП(Элемент.codeBrand));
			НоваяСтрока.ВзятаВРаботу = Элемент.i_status_id <> 3;
			НоваяСтрока.Комментарий = Элемент.comment;
			
			Если ЗначениеЗаполнено(Элемент.s_contractor_id) Тогда
				НоваяСтрока.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.s_contractor_id));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элемент.s_contract_id) Тогда
				НоваяСтрока.Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.s_contract_id));
			КонецЕсли;
			
			// Заполняем из Категории
			ДанныеУУ = УправленческийУчетСервер.ПодготовитьДанныеУправленческогоУчета(НоваяСтрока.КатегорияОперации);
			
			Для Каждого СтрокаПараметры Из ДанныеУУ Цикл
				
				НоваяСтрокаУУ = НоваяСтрока.ТаблицаУправленческогоУчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУУ, СтрокаПараметры);
				
			КонецЦикла;
			
			//заполняем субконто
			Для т = 0 по 8 Цикл
				
				Параметр = Элемент["Параметр" + т];
				
				Если ЗначениеЗаполнено(Параметр) Тогда
					
					ФорматПараметра = Элемент["ФорматПараметра" + т];
					ЗначениеПараметра = Элемент["s_sub" + (т + 1)];
					
					СтрокиПоиска = НоваяСтрока.ТаблицаУправленческогоУчета.НайтиСтроки(Новый Структура("Имя", Параметр));
					Если СтрокиПоиска.Количество() > 0 Тогда
						
						СтрокаОбработки = СтрокиПоиска[0];
						Если СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникЦФУ
							ИЛИ СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникБрэнды Тогда
							
							Продолжить;
							
						ИначеЕсли СтрокаОбработки.ВидПараметра = ПланыВидовХарактеристик.РеквизитыУправленческогоУчета.ТипСправочникКонтрагенты Тогда
							СтрокаОбработки.Значение = Справочники.Контрагенты.НайтиПоКоду(ЗначениеПараметра);
							
						ИначеЕсли СтрокаОбработки.ВидПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоУправленческогоУчета") Тогда
							СтрокаОбработки.Значение = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоКоду(ЗначениеПараметра,,, СтрокаОбработки.ВидПараметра);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Для Каждого СтрокаУУ Из НоваяСтрока.ТаблицаУправленческогоУчета Цикл
						
						Если ТипЗнч(СтрокаУУ.ВидПараметра) = Тип("ПланВидовХарактеристикСсылка.РеквизитыУправленческогоУчета")
							И СтрокаУУ.ВидПараметра.НаименованиеПараметра = ФорматПараметра Тогда
							
							СтрокаУУ.Значение = Справочники.ЗначенияСубконтоУправленческогоУчета.НайтиПоКоду(ЗначениеПараметра,,, СтрокаУУ.ВидПараметра);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			// Заполним ЦФУ и Брэнд
			СтрокиЦФУ = НоваяСтрока.ТаблицаУправленческогоУчета.НайтиСтроки(Новый Структура("Имя", "ЦФУ"));
			СтрокиБренд = НоваяСтрока.ТаблицаУправленческогоУчета.НайтиСтроки(Новый Структура("Имя", "Бренд"));
			СтрокиВалютнаяСумма = НоваяСтрока.ТаблицаУправленческогоУчета.НайтиСтроки(Новый Структура("Имя", "ВалютнаяСумма"));
			
			Если СтрокиЦФУ.Количество() > 0 Тогда
				СтрокиЦФУ[0].Значение = Справочники.ЦФУ.НайтиПоКоду(СокрЛП(Элемент.codeCFU));
			КонецЕсли;
			
			Если СтрокиБренд.Количество() > 0 Тогда
				СтрокиБренд[0].Значение = Справочники.Брэнды.НайтиПоКоду(СокрЛП(Элемент.codeBrand));
			КонецЕсли;
			
			Если СтрокиВалютнаяСумма.Количество() > 0 Тогда
				СтрокиВалютнаяСумма[0].Значение = НоваяСтрока.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Поиск счетов по умолчанию
	ЗапросСчетовПоУмолчанию = Новый Запрос("ВЫБРАТЬ
	|	ОрганизацииОсновныеБанковскиеСчета.Ссылка КАК Организация,
	|	ОрганизацииОсновныеБанковскиеСчета.Валюта КАК Валюта,
	|	ОрганизацииОсновныеБанковскиеСчета.БанковскийСчет КАК СчетОрганизации
	|ИЗ
	|	Справочник.Организации.ОсновныеБанковскиеСчета КАК ОрганизацииОсновныеБанковскиеСчета
	|ГДЕ
	|	ОрганизацииОсновныеБанковскиеСчета.Ссылка В(&МассивОрганизаций)");
	
	ЗапросСчетовПоУмолчанию.УстановитьПараметр("МассивОрганизаций", ТаблицаЗаявок.Выгрузить(, "Организация").ВыгрузитьКолонку("Организация"));

	Выборка = ЗапросСчетовПоУмолчанию.Выполнить().Выбрать();
	
	Для Каждого СтрокаТЧ Из МассивНовыхСтрок Цикл
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("Организация, Валюта", СтрокаТЧ.Организация, ?(ЗначениеЗаполнено(СтрокаТЧ.ВалютаОплаты), СтрокаТЧ.ВалютаОплаты, Справочники.Валюты.РоссийскийРубль))) Тогда
			СтрокаТЧ.СчетОрганизации = Выборка.СчетОрганизации;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТекстЗапроса(Дата1, Дата2)
	
	//Чернов
	ТекстЗапроса = "exec sp_get_requests_BUDGET_99
	| @d_begin 		= '" + ПреобразоватьДатуДляЗапросаSQL(НачалоДня(Дата1)) + "',
	| @d_end 		= '" + ПреобразоватьДатуДляЗапросаSQL(НачалоДня(Дата2) + 86400) + "',
	//| @s_division	= '" + СокрЛП(ФинПодразделение.Наименование) + "'";
	| @s_division	= 'All'";
	
	  
	Возврат ТекстЗапроса;

КонецФункции

Функция ПреобразоватьДатуДляЗапросаSQL(пДата) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(пДата) Тогда
		Возврат NULL;
		
	Иначе
		Возврат Формат(Год(пДата), "ЧГ=0") + ?(Месяц(пДата) <= 9, "0", "") + Строка(Месяц(пДата)) + ?(День(пДата) <= 9, "0", "") + Строка(День(пДата));
		
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ТаблицаЗаявок Цикл
		СтрокаТЧ.Отметка = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВсего(Команда)
	
	Для Каждого СтрокаТЧ Из ТаблицаЗаявок Цикл
		СтрокаТЧ.Отметка = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиЗавершение", ЭтотОбъект), "Перенести выбранные заявки?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Результат = Новый Массив;
		МассивНомеровЗаявок = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ТаблицаЗаявок Цикл
			
			Если СтрокаТЧ.Отметка Тогда
				
				СтруктураВыгрузки = Новый Структура("Отметка, IDЗаявки, ДатаЗаявки, НомерЗаявки, КатегорияОперации, Сумма, СуммаНДС, Валюта, ВалютаОплаты, НазначениеПлатежа, ДолжностьАвтора, Автор, Сводная, Казначейство, Организация, СчетОрганизации, ДатаОплаты, ЦФУ, Бренд, Процент, КурсОплатыФиксированный, Комментарий, Контрагент, Договор");
				МассивНомеровЗаявок.Добавить(СтруктураВыгрузки);
				
				Для Каждого КлючЗначение Из СтруктураВыгрузки Цикл
					СтруктураВыгрузки.Вставить(КлючЗначение.Ключ, СтрокаТЧ[КлючЗначение.Ключ]);
				КонецЦикла;
				
				МассивСтрокУУ = Новый Массив;
				Для Каждого СтрокаТЧУУ Из СтрокаТЧ.ТаблицаУправленческогоУчета Цикл
					
					СтруктураВыгрузкиУУ = Новый Структура("Имя, Значение, ТипРеквизита, ЗапретРедактирования, Необязательный, ВидПараметра, Формула");
					
					Для Каждого КлючЗначение Из СтруктураВыгрузкиУУ Цикл
						СтруктураВыгрузкиУУ[КлючЗначение.Ключ] = СтрокаТЧУУ[КлючЗначение.Ключ];
					КонецЦикла;
					
					МассивСтрокУУ.Добавить(СтруктураВыгрузкиУУ);
					
				КонецЦикла;
				
				СтруктураВыгрузки.Вставить("ТаблицаУправленческогоУчета", МассивСтрокУУ);
				
			КонецЕсли;
			
		КонецЦикла;
		Закрыть(МассивНомеровЗаявок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОЗаявках(МассивНомеровЗаявок)
	Возврат(РаботаСЗаявкамиКлиентСервер.ПолучитьИнформациюОЗаявкахПоМассивуЗаявок(МассивНомеровЗаявок));
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаДокумента") Тогда
		
		ДатаНачала = Параметры.ДатаДокумента;
		ДатаОкончания = Параметры.ДатаДокумента;
		ЗаполнитьНаСервере();
		
		НеОткрыватьДиалог = Истина;
		
	Иначе
		
		ДатаНачала = ДобавитьМесяц(ТекущаяДата(), -1);
		ДатаОкончания = ДобавитьМесяц(ТекущаяДата(), 1);
		ЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьДиалог Тогда
		
		Результат = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ТаблицаЗаявок Цикл
			Результат.Добавить(Новый Структура("НомерЗаявки, IDЗаявки", СтрокаТЧ.НомерЗаявки, СтрокаТЧ.IDЗаявки));
		КонецЦикла;
		
		//Закрыть(Результат);
		
	КонецЕсли;
	
	УстановитьОтборСтрокВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаявокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьОтборСтрокВСписке();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВзятыеВРаботуПриИзменении(Элемент)
	УстановитьОтборСтрокВСписке();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВСписке()
	
	Если ПоказатьВзятыеВРаботу И ЗначениеЗаполнено(Организация) Тогда
		Элементы.ТаблицаЗаявок.ОтборСтрок = Новый ФиксированнаяСтруктура("Организация", Организация);
	ИначеЕсли НЕ ПоказатьВзятыеВРаботу И ЗначениеЗаполнено(Организация) Тогда
		Элементы.ТаблицаЗаявок.ОтборСтрок = Новый ФиксированнаяСтруктура("Организация, ВзятаВРаботу", Организация, Ложь);
	ИначеЕсли ПоказатьВзятыеВРаботу И НЕ ЗначениеЗаполнено(Организация) Тогда
		Элементы.ТаблицаЗаявок.ОтборСтрок = Неопределено;
	ИначеЕсли НЕ ПоказатьВзятыеВРаботу И НЕ ЗначениеЗаполнено(Организация) Тогда
		Элементы.ТаблицаЗаявок.ОтборСтрок = Новый ФиксированнаяСтруктура("ВзятаВРаботу", Ложь);
	КонецЕсли;
	
КонецПроцедуры



